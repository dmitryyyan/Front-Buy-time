// ton-connect.service.ts
import { Injectable } from '@angular/core';
import { TonConnect, Wallet, UserRejectsError } from '@tonconnect/sdk';

@Injectable({
  providedIn: 'root',
})
export class TonConnectService {
  // –∑–∞–ª–∏—à–∞—î–º–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–º
  private _tonConnect: TonConnect;
  walletAddress: string | null = null;

  // –ü–£–ë–õ–Ü–ß–ù–ò–ô –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Å—Ç–∞–Ω—Å—É TonConnect
  get tonConnectInstance(): TonConnect {
    return this._tonConnect;
  }

  constructor() {
    this._tonConnect = new TonConnect({
      manifestUrl: 'https://dmitryyyan.github.io/ton-wallet-manifest/tonconnect-manifest.json',
    });

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    this._tonConnect.restoreConnection().then(() => {
      const wallet = this._tonConnect.wallet;
      if (wallet?.account) {
        this.walletAddress = wallet.account.address;
        console.log('üîÑ Wallet restored:', this.walletAddress);
      }
    });

    // –°–ª—ñ–¥–∫—É—î–º–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
    this._tonConnect.onStatusChange((wallet: Wallet | null) => {
      if (wallet?.account) {
        this.walletAddress = wallet.account.address;
        console.log('üü¢ Wallet connected:', this.walletAddress);
      } else {
        this.walletAddress = null;
        console.log('üî¥ Wallet disconnected');
      }
    });
  }

  // –ß–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å?
  isWalletConnected(): boolean {
    return !!this.walletAddress;
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è
  getAddress(): string | null {
    return this.walletAddress;
  }

  // –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è (—Ç–∞–π–º–∞—É—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 —Å–µ–∫—É–Ω–¥)
  async waitForWalletConnection(timeout = 10000): Promise<void> {
    const start = Date.now();
    while (!this.walletAddress && (Date.now() - start < timeout)) {
      await new Promise(res => setTimeout(res, 50));
    }
  
    if (!this.walletAddress) {
      throw new Error('Wallet not connected within timeout.');
    }
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è (—á–µ—Ä–µ–∑ SDK, UI —Ä–µ–Ω–¥–µ—Ä–∏—à –æ–∫—Ä–µ–º–æ)
  async connectWallet(): Promise<void> {
    await this._tonConnect.restoreConnection();
    if (!this.walletAddress) {
      throw new Error('–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –≥–∞–º–∞–Ω–µ—Ü—å —á–µ—Ä–µ–∑ UI –∫–Ω–æ–ø–∫—É');
    }
  }

  async sendTon(amountTon: number, recipientAddress: string): Promise<string> {
    if (!this._tonConnect.wallet?.account) {
      throw new Error('–ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π');
    }

    const amountNano = BigInt(amountTon * 1e9).toString();

    const tx = {
      validUntil: Math.floor(Date.now() / 1000) + 100,
      messages: [
        {
          address: recipientAddress,
          amount: amountNano
        }
      ]
    };

    console.log('üìù Transaction object:', tx);

    try {
      const result = await this._tonConnect.sendTransaction(tx);
      console.log('‚úÖ Transaction sent, BOC:', result.boc);
      return result.boc;
    } catch (err) {
      console.error('‚ùå Error sending transaction:', err);
      throw err;
    }
  }

  private encodeComment(comment: string): string {
    const encoder = new TextEncoder();
    const bytes = encoder.encode(comment);
    const payloadBytes = [0x01, ...bytes];
    return '0x' + payloadBytes.map(b => b.toString(16).padStart(2, '0')).join('');
  }
}
