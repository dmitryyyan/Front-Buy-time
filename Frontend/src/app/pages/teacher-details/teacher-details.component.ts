import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TeacherService } from '../react-ton-connect/teacher.service';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { TonConnectService } from '../react-ton-connect/ton-connect.service';
import { MatDialog } from '@angular/material/dialog';
import { ConfirmDialogComponent } from '../teacher-details/confirm-dialog.component';
import { ReactTonConnectComponent } from '../react-ton-connect/react-ton-connect.component';

@Component({
  selector: 'app-teacher-details',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './teacher-details.component.html',
  styleUrls: ['./teacher-details.component.css']
})
export class TeacherDetailsComponent implements OnInit {
  @ViewChild(ReactTonConnectComponent) reactTonConnectComponent!: ReactTonConnectComponent;
  teacher: any;
  timeSlots: any[] = [];
  bookings: any[] = [];
  userId: string = '';
  message: string = '';
  urlOfMeeting: string = '';
  isLoading: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private tonConnectService: TonConnectService,
    private teacherService: TeacherService,
    private http: HttpClient,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    const teacherId = this.route.snapshot.paramMap.get('id');

    this.teacherService.getTeacherById(teacherId).subscribe(
      (data) => {
        this.teacher = data;
        console.log("Teacher details:", data);
      },
      (error) => console.error('Error fetching teacher details', error)
    );

    this.teacherService.getTimeSlotsByTeacherId(teacherId).subscribe(
      (data) => {
        this.timeSlots = data;
        const timeslotIds = data.map(slot => slot.id);
        this.teacherService.getBookingsByTimeslotIds(timeslotIds).subscribe(
          (bookings) => {
            this.bookings = bookings.filter(b => timeslotIds.includes(b.timeslotId));
            this.compareUserIdWithAllUsers();
          },
          (error) => console.error('Error fetching bookings', error)
        );
      },
      (error) => console.error('Error fetching time slots', error)
    );

    this.fetchChatId();
  }

  fetchChatId(): void {
    this.http.get<{ chatId: string }>('http://localhost:3000/api/getCurrentChatId').subscribe(
      async (res) => {
        await this.teacherService.createUserIfNotExists(res.chatId);
        this.fetchUserData(res.chatId);
      },
      (err) => console.error('Error fetching chat ID', err)
    );
  }

  createUserIfNotExists(chatId: string): Promise<any> {
    return this.http.post('http://localhost:5258/api/user/create-if-not-exists', { chatId }).toPromise();
  }

  fetchUserData(chatId: string): void {
    this.http.get<any>(`http://localhost:5258/api/user/get-by-chat-id?chatId=${chatId}`).subscribe(
      (data) => {
        if (data && !data.message) {
          this.userId = data.id;
          this.fetchWallet();
        }
      },
      (err) => console.error('Error fetching user data', err)
    );
  }

  fetchWallet(): void {
    this.http.get<any>(`http://localhost:5258/api/wallet/get-by-user-id?userId=${this.userId}`).subscribe(
      (data) => {
        console.log('Wallet:', data.walletAddress);
      },
      (err) => console.error('Error fetching wallet data', err)
    );
  }

  compareUserIdWithAllUsers(): void {
    if (!this.userId) return;
    this.http.get<any[]>('http://localhost:5258/api/user/get-all').subscribe(
      (users) => {
        this.bookings.forEach(booking => {
          const match = users.find(user => user.id === booking.userId);
          if (match) booking.user = match;
        });
      },
      (err) => console.error('Error fetching all users', err)
    );
  }

  async bookTimeSlot(slot: any): Promise<void> {
    // 1. –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –æ–ø–ª–∞—Ç–∏
    const dialogRef = this.dialog.open(ConfirmDialogComponent, {
      width: '400px',
      data: {
        message: '–î–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç–∏ 0.05 TON. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.'
      }
    });
  
    const confirmed = await dialogRef.afterClosed().toPromise();
    if (!confirmed) {
      this.message = '';
      return;
    }
  
    try {
      this.isLoading = true;
      this.message = '‚è≥ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–∞–º–∞–Ω—Ü—è...';
      await this.tonConnectService.waitForWalletConnection();
  
      const amount = 0.05;
      let teacherChatId = slot.teacherChatId;
      if (!teacherChatId) {
        const teacher = await this.teacherService.getTeacherById(slot.userId).toPromise();
        teacherChatId = teacher?.telegramChatId;
      }
      if (!teacherChatId) {
        throw new Error('Telegram ChatId —É –≤–∏–∫–ª–∞–¥–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!');
      }
  
      this.message = 'üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è TON...';
  
      // --- –û—Å—å —Ç—É—Ç –æ—Å–Ω–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ ---
      let teacherWalletAddress;
      try {
        teacherWalletAddress = await this.teacherService.getTeacherWalletAddressByChatId(teacherChatId).toPromise();
      } catch (err: any) {
        if (err.status === 500) {
          this.message = '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ TON-–∞–¥—Ä–µ—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞!';
          alert(this.message + '\n\n(Internal server error)\n\n–ü–æ–≤—ñ–¥–æ–º—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∫—É!');
          throw err;
        }
        throw err;
      }
  
      if (!teacherWalletAddress) {
        this.message = '‚ùå –í–∏–∫–ª–∞–¥–∞—á —â–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤ TON-–≥–∞–º–∞–Ω–µ—Ü—å. –û–ø–ª–∞—Ç–∞ –Ω–µ–º–æ–∂–ª–∏–≤–∞!';
        alert(this.message);
        return;
      }
  
      // --- –î–∞–ª—ñ –≤—Å–µ —è–∫ –±—É–ª–æ ---
      await this.tonConnectService.sendTonToTeacher(teacherChatId, amount);
  
      this.message = 'üìö –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –°—Ç–≤–æ—Ä—é—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è...';
  
      const bookingData = {
        userId: this.userId,
        timeslotId: slot.id,
        status: 'booked',
        message: '',
        urlOfMeeting: '',
        boc: 'transaction_boc_here',
      };
  
      await this.http.post('http://localhost:5258/api/booking/create', bookingData).toPromise();
      this.message = '‚úÖ –ë—É–∫—ñ–Ω–≥ —Ç–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω—ñ!';
      slot.isAvailable = false;
    } catch (error: any) {
      // –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
      if (error?.status === 500) {
        this.message = '‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.';
        alert(this.message);
      } else {
        this.message = '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∞–±–æ –±—É–∫—ñ–Ω–≥—É.';
        alert(this.message + '\n\n' + (error?.message || error));
      }
      console.error('Error in booking or payment:', error);
    } finally {
      this.isLoading = false;
    }
  }
  
  

  navigateToTeacherList(): void {
    this.router.navigate(['/teacher']);
  }
}
