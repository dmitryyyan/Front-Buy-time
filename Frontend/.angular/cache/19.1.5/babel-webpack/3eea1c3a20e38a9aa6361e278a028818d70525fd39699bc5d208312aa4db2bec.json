{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./connect-wallet.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./connect-wallet.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TonConnect } from '@tonconnect/sdk';\nlet ConnectWalletComponent = class ConnectWalletComponent {\n  http;\n  walletAddress = null;\n  tonConnect = new TonConnect({\n    manifestUrl: 'https://dmitryyyan.github.io/ton-wallet-manifest/tonconnect-manifest.json'\n  });\n  constructor(http) {\n    this.http = http;\n  }\n  ngOnInit() {\n    this.tonConnect.on('wallet', walletInfo => {\n      this.handleWalletInfo(walletInfo);\n    });\n  }\n  handleWalletInfo(walletInfo) {\n    if (walletInfo && walletInfo.account) {\n      this.walletAddress = walletInfo.account.address;\n      console.log('Connected wallet address:', this.walletAddress);\n      this.saveWalletAddress();\n    } else {\n      this.walletAddress = null;\n      console.log('Wallet disconnected');\n    }\n  }\n  connectWallet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.tonConnect.connect({\n          universalLink: 'https://app.tonkeeper.com/transfer/',\n          bridgeUrl: 'https://bridge.tonapi.io'\n        });\n      } catch (error) {\n        console.error('Failed to connect wallet', error);\n        alert('Не вдалося підключити гаманець');\n      }\n    })();\n  }\n  saveWalletAddress() {\n    if (!this.walletAddress) {\n      alert('Гаманець не підключено.');\n      return;\n    }\n    const apiUrl = 'http://localhost:5258/api/wallet/set-by-user-id';\n    const payload = {\n      userId: this.userId,\n      walletType: 'TonWallet',\n      walletAddress: this.walletAddress\n    };\n    this.http.post(apiUrl, payload).subscribe({\n      next: () => alert('Гаманець успішно збережено!'),\n      error: () => alert('Помилка збереження гаманця.')\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nConnectWalletComponent = __decorate([Component({\n  selector: 'app-connect-wallet',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ConnectWalletComponent);\nexport { ConnectWalletComponent };","map":{"version":3,"names":["Component","HttpClient","TonConnect","ConnectWalletComponent","http","walletAddress","tonConnect","manifestUrl","constructor","ngOnInit","on","walletInfo","handleWalletInfo","account","address","console","log","saveWalletAddress","connectWallet","_this","_asyncToGenerator","connect","universalLink","bridgeUrl","error","alert","apiUrl","payload","userId","walletType","post","subscribe","next","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\user\\Desktop\\Front\\buy-time\\Frontend\\src\\app\\pages\\connect-wallet\\connect-wallet.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TonConnect, WalletInfo } from '@tonconnect/sdk';\r\n\r\n@Component({\r\n  selector: 'app-connect-wallet',\r\n  templateUrl: './connect-wallet.component.html',\r\n  styleUrls: ['./connect-wallet.component.css']\r\n})\r\nexport class ConnectWalletComponent implements OnInit {\r\n  walletAddress: string | null = null;\r\n\r\n  tonConnect = new TonConnect({\r\n    manifestUrl: 'https://dmitryyyan.github.io/ton-wallet-manifest/tonconnect-manifest.json'\r\n  });\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.tonConnect.on('wallet', (walletInfo: WalletInfo | null) => {\r\n      this.handleWalletInfo(walletInfo);\r\n    });\r\n  }\r\n\r\n  private handleWalletInfo(walletInfo: WalletInfo | null) {\r\n    if (walletInfo && walletInfo.account) {\r\n      this.walletAddress = walletInfo.account.address;\r\n      console.log('Connected wallet address:', this.walletAddress);\r\n      this.saveWalletAddress();\r\n    } else {\r\n      this.walletAddress = null;\r\n      console.log('Wallet disconnected');\r\n    }\r\n  }\r\n\r\n  async connectWallet() {\r\n    try {\r\n      await this.tonConnect.connect({\r\n        universalLink: 'https://app.tonkeeper.com/transfer/',\r\n        bridgeUrl: 'https://bridge.tonapi.io'\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to connect wallet', error);\r\n      alert('Не вдалося підключити гаманець');\r\n    }\r\n  }\r\n\r\n  saveWalletAddress() {\r\n    if (!this.walletAddress) {\r\n      alert('Гаманець не підключено.');\r\n      return;\r\n    }\r\n\r\n    const apiUrl = 'http://localhost:5258/api/wallet/set-by-user-id';\r\n    const payload = {\r\n      userId: this.userId,\r\n      walletType: 'TonWallet',\r\n      walletAddress: this.walletAddress,\r\n    };\r\n\r\n    this.http.post(apiUrl, payload).subscribe({\r\n      next: () => alert('Гаманець успішно збережено!'),\r\n      error: () => alert('Помилка збереження гаманця.'),\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,UAAU,QAAoB,iBAAiB;AAOjD,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAObC,IAAA;EANpBC,aAAa,GAAkB,IAAI;EAEnCC,UAAU,GAAG,IAAIJ,UAAU,CAAC;IAC1BK,WAAW,EAAE;GACd,CAAC;EAEFC,YAAoBJ,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCK,QAAQA,CAAA;IACN,IAAI,CAACH,UAAU,CAACI,EAAE,CAAC,QAAQ,EAAGC,UAA6B,IAAI;MAC7D,IAAI,CAACC,gBAAgB,CAACD,UAAU,CAAC;IACnC,CAAC,CAAC;EACJ;EAEQC,gBAAgBA,CAACD,UAA6B;IACpD,IAAIA,UAAU,IAAIA,UAAU,CAACE,OAAO,EAAE;MACpC,IAAI,CAACR,aAAa,GAAGM,UAAU,CAACE,OAAO,CAACC,OAAO;MAC/CC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAACX,aAAa,CAAC;MAC5D,IAAI,CAACY,iBAAiB,EAAE;IAC1B,CAAC,MAAM;MACL,IAAI,CAACZ,aAAa,GAAG,IAAI;MACzBU,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC;EACF;EAEME,aAAaA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACjB,IAAI;QACF,MAAMD,KAAI,CAACb,UAAU,CAACe,OAAO,CAAC;UAC5BC,aAAa,EAAE,qCAAqC;UACpDC,SAAS,EAAE;SACZ,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDC,KAAK,CAAC,gCAAgC,CAAC;MACzC;IAAC;EACH;EAEAR,iBAAiBA,CAAA;IACf,IAAI,CAAC,IAAI,CAACZ,aAAa,EAAE;MACvBoB,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;IAEA,MAAMC,MAAM,GAAG,iDAAiD;IAChE,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,UAAU,EAAE,WAAW;MACvBxB,aAAa,EAAE,IAAI,CAACA;KACrB;IAED,IAAI,CAACD,IAAI,CAAC0B,IAAI,CAACJ,MAAM,EAAEC,OAAO,CAAC,CAACI,SAAS,CAAC;MACxCC,IAAI,EAAEA,CAAA,KAAMP,KAAK,CAAC,6BAA6B,CAAC;MAChDD,KAAK,EAAEA,CAAA,KAAMC,KAAK,CAAC,6BAA6B;KACjD,CAAC;EACJ;;;;;AAvDWtB,sBAAsB,GAAA8B,UAAA,EALlCjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,oBAAoB;EAC9BC,QAAA,EAAAC,oBAA8C;;CAE/C,CAAC,C,EACWjC,sBAAsB,CAwDlC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}