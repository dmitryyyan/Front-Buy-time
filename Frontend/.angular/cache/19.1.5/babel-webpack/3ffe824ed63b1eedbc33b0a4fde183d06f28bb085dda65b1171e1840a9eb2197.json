{"ast":null,"code":"/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf) {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"names":["abytes","aexists","ahash","clean","Hash","toBytes","HMAC","constructor","hash","_key","finished","destroyed","key","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","buf","digestInto","out","destroy","_cloneInto","to","Object","getPrototypeOf","clone","hmac","message"],"sources":["C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@noble/hashes/esm/hmac.js"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}