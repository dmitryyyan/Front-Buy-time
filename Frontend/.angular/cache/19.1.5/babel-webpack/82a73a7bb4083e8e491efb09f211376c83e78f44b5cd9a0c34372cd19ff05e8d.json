{"ast":null,"code":"import { SolanaError, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE } from '@solana/errors';\nimport { combineCodec, createDecoder, createEncoder, assertByteArrayIsNotEmptyForCodec, assertByteArrayHasEnoughBytesForCodec } from '@solana/codecs-core';\n\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n  if (value < min || value > max) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n      codecDescription,\n      max,\n      min,\n      value\n    });\n  }\n}\n\n// src/common.ts\nvar Endian = /* @__PURE__ */(Endian2 => {\n  Endian2[Endian2[\"Little\"] = 0] = \"Little\";\n  Endian2[Endian2[\"Big\"] = 1] = \"Big\";\n  return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n  return config?.endian === 1 /* Big */ ? false : true;\n}\nfunction numberEncoderFactory(input) {\n  return createEncoder({\n    fixedSize: input.size,\n    write(value, bytes, offset) {\n      if (input.range) {\n        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n      }\n      const arrayBuffer = new ArrayBuffer(input.size);\n      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n      bytes.set(new Uint8Array(arrayBuffer), offset);\n      return offset + input.size;\n    }\n  });\n}\nfunction numberDecoderFactory(input) {\n  return createDecoder({\n    fixedSize: input.size,\n    read(bytes, offset = 0) {\n      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n      const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n      return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n    }\n  });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n  const bytesOffset = bytes.byteOffset + (offset ?? 0);\n  const bytesLength = length ?? bytes.byteLength;\n  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n\n// src/f32.ts\nvar getF32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f32\",\n  set: (view, value, le) => view.setFloat32(0, Number(value), le),\n  size: 4\n});\nvar getF32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat32(0, le),\n  name: \"f32\",\n  size: 4\n});\nvar getF32Codec = (config = {}) => combineCodec(getF32Encoder(config), getF32Decoder(config));\nvar getF64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f64\",\n  set: (view, value, le) => view.setFloat64(0, Number(value), le),\n  size: 8\n});\nvar getF64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat64(0, le),\n  name: \"f64\",\n  size: 8\n});\nvar getF64Codec = (config = {}) => combineCodec(getF64Encoder(config), getF64Decoder(config));\nvar getI128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i128\",\n  range: [-BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getI128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigInt64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"i128\",\n  size: 16\n});\nvar getI128Codec = (config = {}) => combineCodec(getI128Encoder(config), getI128Decoder(config));\nvar getI16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i16\",\n  range: [-Number(\"0x7fff\") - 1, Number(\"0x7fff\")],\n  set: (view, value, le) => view.setInt16(0, Number(value), le),\n  size: 2\n});\nvar getI16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt16(0, le),\n  name: \"i16\",\n  size: 2\n});\nvar getI16Codec = (config = {}) => combineCodec(getI16Encoder(config), getI16Decoder(config));\nvar getI32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i32\",\n  range: [-Number(\"0x7fffffff\") - 1, Number(\"0x7fffffff\")],\n  set: (view, value, le) => view.setInt32(0, Number(value), le),\n  size: 4\n});\nvar getI32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt32(0, le),\n  name: \"i32\",\n  size: 4\n});\nvar getI32Codec = (config = {}) => combineCodec(getI32Encoder(config), getI32Decoder(config));\nvar getI64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i64\",\n  range: [-BigInt(\"0x7fffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffff\")],\n  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n  size: 8\n});\nvar getI64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigInt64(0, le),\n  name: \"i64\",\n  size: 8\n});\nvar getI64Codec = (config = {}) => combineCodec(getI64Encoder(config), getI64Decoder(config));\nvar getI8Encoder = () => numberEncoderFactory({\n  name: \"i8\",\n  range: [-Number(\"0x7f\") - 1, Number(\"0x7f\")],\n  set: (view, value) => view.setInt8(0, Number(value)),\n  size: 1\n});\nvar getI8Decoder = () => numberDecoderFactory({\n  get: view => view.getInt8(0),\n  name: \"i8\",\n  size: 1\n});\nvar getI8Codec = () => combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = () => createEncoder({\n  getSizeFromValue: value => {\n    if (value <= 127) return 1;\n    if (value <= 16383) return 2;\n    return 3;\n  },\n  maxSize: 3,\n  write: (value, bytes, offset) => {\n    assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n    const shortU16Bytes = [0];\n    for (let ii = 0;; ii += 1) {\n      const alignedValue = Number(value) >> ii * 7;\n      if (alignedValue === 0) {\n        break;\n      }\n      const nextSevenBits = 127 & alignedValue;\n      shortU16Bytes[ii] = nextSevenBits;\n      if (ii > 0) {\n        shortU16Bytes[ii - 1] |= 128;\n      }\n    }\n    bytes.set(shortU16Bytes, offset);\n    return offset + shortU16Bytes.length;\n  }\n});\nvar getShortU16Decoder = () => createDecoder({\n  maxSize: 3,\n  read: (bytes, offset) => {\n    let value = 0;\n    let byteCount = 0;\n    while (++byteCount) {\n      const byteIndex = byteCount - 1;\n      const currentByte = bytes[offset + byteIndex];\n      const nextSevenBits = 127 & currentByte;\n      value |= nextSevenBits << byteIndex * 7;\n      if ((currentByte & 128) === 0) {\n        break;\n      }\n    }\n    return [value, offset + byteCount];\n  }\n});\nvar getShortU16Codec = () => combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u128\",\n  range: [0n, BigInt(\"0xffffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getU128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigUint64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"u128\",\n  size: 16\n});\nvar getU128Codec = (config = {}) => combineCodec(getU128Encoder(config), getU128Decoder(config));\nvar getU16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u16\",\n  range: [0, Number(\"0xffff\")],\n  set: (view, value, le) => view.setUint16(0, Number(value), le),\n  size: 2\n});\nvar getU16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint16(0, le),\n  name: \"u16\",\n  size: 2\n});\nvar getU16Codec = (config = {}) => combineCodec(getU16Encoder(config), getU16Decoder(config));\nvar getU32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u32\",\n  range: [0, Number(\"0xffffffff\")],\n  set: (view, value, le) => view.setUint32(0, Number(value), le),\n  size: 4\n});\nvar getU32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint32(0, le),\n  name: \"u32\",\n  size: 4\n});\nvar getU32Codec = (config = {}) => combineCodec(getU32Encoder(config), getU32Decoder(config));\nvar getU64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u64\",\n  range: [0n, BigInt(\"0xffffffffffffffff\")],\n  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n  size: 8\n});\nvar getU64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigUint64(0, le),\n  name: \"u64\",\n  size: 8\n});\nvar getU64Codec = (config = {}) => combineCodec(getU64Encoder(config), getU64Decoder(config));\nvar getU8Encoder = () => numberEncoderFactory({\n  name: \"u8\",\n  range: [0, Number(\"0xff\")],\n  set: (view, value) => view.setUint8(0, Number(value)),\n  size: 1\n});\nvar getU8Decoder = () => numberDecoderFactory({\n  get: view => view.getUint8(0),\n  name: \"u8\",\n  size: 1\n});\nvar getU8Codec = () => combineCodec(getU8Encoder(), getU8Decoder());\nexport { Endian, assertNumberIsBetweenForCodec, getF32Codec, getF32Decoder, getF32Encoder, getF64Codec, getF64Decoder, getF64Encoder, getI128Codec, getI128Decoder, getI128Encoder, getI16Codec, getI16Decoder, getI16Encoder, getI32Codec, getI32Decoder, getI32Encoder, getI64Codec, getI64Decoder, getI64Encoder, getI8Codec, getI8Decoder, getI8Encoder, getShortU16Codec, getShortU16Decoder, getShortU16Encoder, getU128Codec, getU128Decoder, getU128Encoder, getU16Codec, getU16Decoder, getU16Encoder, getU32Codec, getU32Decoder, getU32Encoder, getU64Codec, getU64Decoder, getU64Encoder, getU8Codec, getU8Decoder, getU8Encoder };\n\n//# sourceMappingURL=index.browser.mjs.map","map":{"version":3,"names":["SolanaError","SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE","combineCodec","createDecoder","createEncoder","assertByteArrayIsNotEmptyForCodec","assertByteArrayHasEnoughBytesForCodec","assertNumberIsBetweenForCodec","codecDescription","min","max","value","Endian","Endian2","isLittleEndian","config","endian","numberEncoderFactory","input","fixedSize","size","write","bytes","offset","range","name","arrayBuffer","ArrayBuffer","set","DataView","Uint8Array","numberDecoderFactory","read","view","toArrayBuffer","get","length","bytesOffset","byteOffset","bytesLength","byteLength","buffer","slice","getF32Encoder","le","setFloat32","Number","getF32Decoder","getFloat32","getF32Codec","getF64Encoder","setFloat64","getF64Decoder","getFloat64","getF64Codec","getI128Encoder","BigInt","leftOffset","rightOffset","rightMask","setBigInt64","setBigUint64","getI128Decoder","left","getBigInt64","right","getBigUint64","getI128Codec","getI16Encoder","setInt16","getI16Decoder","getInt16","getI16Codec","getI32Encoder","setInt32","getI32Decoder","getInt32","getI32Codec","getI64Encoder","getI64Decoder","getI64Codec","getI8Encoder","setInt8","getI8Decoder","getInt8","getI8Codec","getShortU16Encoder","getSizeFromValue","maxSize","shortU16Bytes","ii","alignedValue","nextSevenBits","getShortU16Decoder","byteCount","byteIndex","currentByte","getShortU16Codec","getU128Encoder","getU128Decoder","getU128Codec","getU16Encoder","setUint16","getU16Decoder","getUint16","getU16Codec","getU32Encoder","setUint32","getU32Decoder","getUint32","getU32Codec","getU64Encoder","getU64Decoder","getU64Codec","getU8Encoder","setUint8","getU8Decoder","getUint8","getU8Codec"],"sources":["C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@solana/codecs-numbers/dist/index.browser.mjs"],"sourcesContent":["import { SolanaError, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE } from '@solana/errors';\nimport { combineCodec, createDecoder, createEncoder, assertByteArrayIsNotEmptyForCodec, assertByteArrayHasEnoughBytesForCodec } from '@solana/codecs-core';\n\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n  if (value < min || value > max) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n      codecDescription,\n      max,\n      min,\n      value\n    });\n  }\n}\n\n// src/common.ts\nvar Endian = /* @__PURE__ */ ((Endian2) => {\n  Endian2[Endian2[\"Little\"] = 0] = \"Little\";\n  Endian2[Endian2[\"Big\"] = 1] = \"Big\";\n  return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n  return config?.endian === 1 /* Big */ ? false : true;\n}\nfunction numberEncoderFactory(input) {\n  return createEncoder({\n    fixedSize: input.size,\n    write(value, bytes, offset) {\n      if (input.range) {\n        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n      }\n      const arrayBuffer = new ArrayBuffer(input.size);\n      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n      bytes.set(new Uint8Array(arrayBuffer), offset);\n      return offset + input.size;\n    }\n  });\n}\nfunction numberDecoderFactory(input) {\n  return createDecoder({\n    fixedSize: input.size,\n    read(bytes, offset = 0) {\n      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n      const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n      return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n    }\n  });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n  const bytesOffset = bytes.byteOffset + (offset ?? 0);\n  const bytesLength = length ?? bytes.byteLength;\n  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n\n// src/f32.ts\nvar getF32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f32\",\n  set: (view, value, le) => view.setFloat32(0, Number(value), le),\n  size: 4\n});\nvar getF32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat32(0, le),\n  name: \"f32\",\n  size: 4\n});\nvar getF32Codec = (config = {}) => combineCodec(getF32Encoder(config), getF32Decoder(config));\nvar getF64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"f64\",\n  set: (view, value, le) => view.setFloat64(0, Number(value), le),\n  size: 8\n});\nvar getF64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getFloat64(0, le),\n  name: \"f64\",\n  size: 8\n});\nvar getF64Codec = (config = {}) => combineCodec(getF64Encoder(config), getF64Decoder(config));\nvar getI128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i128\",\n  range: [-BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getI128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigInt64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"i128\",\n  size: 16\n});\nvar getI128Codec = (config = {}) => combineCodec(getI128Encoder(config), getI128Decoder(config));\nvar getI16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i16\",\n  range: [-Number(\"0x7fff\") - 1, Number(\"0x7fff\")],\n  set: (view, value, le) => view.setInt16(0, Number(value), le),\n  size: 2\n});\nvar getI16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt16(0, le),\n  name: \"i16\",\n  size: 2\n});\nvar getI16Codec = (config = {}) => combineCodec(getI16Encoder(config), getI16Decoder(config));\nvar getI32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i32\",\n  range: [-Number(\"0x7fffffff\") - 1, Number(\"0x7fffffff\")],\n  set: (view, value, le) => view.setInt32(0, Number(value), le),\n  size: 4\n});\nvar getI32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getInt32(0, le),\n  name: \"i32\",\n  size: 4\n});\nvar getI32Codec = (config = {}) => combineCodec(getI32Encoder(config), getI32Decoder(config));\nvar getI64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"i64\",\n  range: [-BigInt(\"0x7fffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffff\")],\n  set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n  size: 8\n});\nvar getI64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigInt64(0, le),\n  name: \"i64\",\n  size: 8\n});\nvar getI64Codec = (config = {}) => combineCodec(getI64Encoder(config), getI64Decoder(config));\nvar getI8Encoder = () => numberEncoderFactory({\n  name: \"i8\",\n  range: [-Number(\"0x7f\") - 1, Number(\"0x7f\")],\n  set: (view, value) => view.setInt8(0, Number(value)),\n  size: 1\n});\nvar getI8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getInt8(0),\n  name: \"i8\",\n  size: 1\n});\nvar getI8Codec = () => combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = () => createEncoder({\n  getSizeFromValue: (value) => {\n    if (value <= 127) return 1;\n    if (value <= 16383) return 2;\n    return 3;\n  },\n  maxSize: 3,\n  write: (value, bytes, offset) => {\n    assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n    const shortU16Bytes = [0];\n    for (let ii = 0; ; ii += 1) {\n      const alignedValue = Number(value) >> ii * 7;\n      if (alignedValue === 0) {\n        break;\n      }\n      const nextSevenBits = 127 & alignedValue;\n      shortU16Bytes[ii] = nextSevenBits;\n      if (ii > 0) {\n        shortU16Bytes[ii - 1] |= 128;\n      }\n    }\n    bytes.set(shortU16Bytes, offset);\n    return offset + shortU16Bytes.length;\n  }\n});\nvar getShortU16Decoder = () => createDecoder({\n  maxSize: 3,\n  read: (bytes, offset) => {\n    let value = 0;\n    let byteCount = 0;\n    while (++byteCount) {\n      const byteIndex = byteCount - 1;\n      const currentByte = bytes[offset + byteIndex];\n      const nextSevenBits = 127 & currentByte;\n      value |= nextSevenBits << byteIndex * 7;\n      if ((currentByte & 128) === 0) {\n        break;\n      }\n    }\n    return [value, offset + byteCount];\n  }\n});\nvar getShortU16Codec = () => combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u128\",\n  range: [0n, BigInt(\"0xffffffffffffffffffffffffffffffff\")],\n  set: (view, value, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const rightMask = 0xffffffffffffffffn;\n    view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n    view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n  },\n  size: 16\n});\nvar getU128Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => {\n    const leftOffset = le ? 8 : 0;\n    const rightOffset = le ? 0 : 8;\n    const left = view.getBigUint64(leftOffset, le);\n    const right = view.getBigUint64(rightOffset, le);\n    return (left << 64n) + right;\n  },\n  name: \"u128\",\n  size: 16\n});\nvar getU128Codec = (config = {}) => combineCodec(getU128Encoder(config), getU128Decoder(config));\nvar getU16Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u16\",\n  range: [0, Number(\"0xffff\")],\n  set: (view, value, le) => view.setUint16(0, Number(value), le),\n  size: 2\n});\nvar getU16Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint16(0, le),\n  name: \"u16\",\n  size: 2\n});\nvar getU16Codec = (config = {}) => combineCodec(getU16Encoder(config), getU16Decoder(config));\nvar getU32Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u32\",\n  range: [0, Number(\"0xffffffff\")],\n  set: (view, value, le) => view.setUint32(0, Number(value), le),\n  size: 4\n});\nvar getU32Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getUint32(0, le),\n  name: \"u32\",\n  size: 4\n});\nvar getU32Codec = (config = {}) => combineCodec(getU32Encoder(config), getU32Decoder(config));\nvar getU64Encoder = (config = {}) => numberEncoderFactory({\n  config,\n  name: \"u64\",\n  range: [0n, BigInt(\"0xffffffffffffffff\")],\n  set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n  size: 8\n});\nvar getU64Decoder = (config = {}) => numberDecoderFactory({\n  config,\n  get: (view, le) => view.getBigUint64(0, le),\n  name: \"u64\",\n  size: 8\n});\nvar getU64Codec = (config = {}) => combineCodec(getU64Encoder(config), getU64Decoder(config));\nvar getU8Encoder = () => numberEncoderFactory({\n  name: \"u8\",\n  range: [0, Number(\"0xff\")],\n  set: (view, value) => view.setUint8(0, Number(value)),\n  size: 1\n});\nvar getU8Decoder = () => numberDecoderFactory({\n  get: (view) => view.getUint8(0),\n  name: \"u8\",\n  size: 1\n});\nvar getU8Codec = () => combineCodec(getU8Encoder(), getU8Decoder());\n\nexport { Endian, assertNumberIsBetweenForCodec, getF32Codec, getF32Decoder, getF32Encoder, getF64Codec, getF64Decoder, getF64Encoder, getI128Codec, getI128Decoder, getI128Encoder, getI16Codec, getI16Decoder, getI16Encoder, getI32Codec, getI32Decoder, getI32Encoder, getI64Codec, getI64Decoder, getI64Encoder, getI8Codec, getI8Decoder, getI8Encoder, getShortU16Codec, getShortU16Decoder, getShortU16Encoder, getU128Codec, getU128Decoder, getU128Encoder, getU16Codec, getU16Decoder, getU16Encoder, getU32Codec, getU32Decoder, getU32Encoder, getU64Codec, getU64Decoder, getU64Encoder, getU8Codec, getU8Decoder, getU8Encoder };\n\n//# sourceMappingURL=index.browser.mjs.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}