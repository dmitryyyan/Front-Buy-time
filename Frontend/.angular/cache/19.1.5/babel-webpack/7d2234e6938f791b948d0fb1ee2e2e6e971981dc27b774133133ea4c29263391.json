{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./timeslot-page.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./timeslot-page.component.css?ngResource\";\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'; // Для здійснення HTTP запитів\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormBuilder, Validators } from '@angular/forms'; // Додайте ReactiveFormsModule\nimport { Router } from '@angular/router';\nimport { UserDataService } from '../../services/user-data.service';\nimport { TimeslotService } from '../../services/timeslot.service';\nlet TimeslotPageComponent = class TimeslotPageComponent {\n  userDataService;\n  http;\n  timeslotService;\n  fb;\n  router;\n  userData = null;\n  timeSlots = [];\n  chatId = null;\n  userForm;\n  isSubmitting = false;\n  constructor(userDataService, http, timeslotService, fb, router) {\n    this.userDataService = userDataService;\n    this.http = http;\n    this.timeslotService = timeslotService;\n    this.fb = fb;\n    this.router = router;\n    this.userForm = this.fb.group({\n      isTeacher: [false, Validators.required]\n    });\n    this.userForm.get('isTeacher')?.valueChanges.subscribe(value => {\n      if (this.userData && value !== this.userData.isTeacher && !this.isSubmitting) {\n        this.submitUser();\n      }\n    });\n  }\n  ngOnInit() {\n    this.fetchChatId();\n  }\n  fetchChatId() {\n    this.http.get('http://localhost:3000/api/getCurrentChatId').subscribe(response => {\n      this.chatId = response.chatId;\n      console.log('Chat ID:', this.chatId); // Вивід chatId в консоль\n      this.fetchUserData();\n    }, error => {\n      console.error('Error fetching chat ID', error);\n    });\n  }\n  fetchUserData() {\n    if (!this.chatId) {\n      console.error('Chat ID is not defined');\n      return;\n    }\n    this.http.get(`http://localhost:5258/api/user/get-by-chat-id?chatId=${this.chatId}`).subscribe(data => {\n      console.log('Fetched user data:', data); // Log the fetched data\n      if (data && !data.message) {\n        this.userData = data; // Зберігаємо отримані дані користувача\n        this.userForm.patchValue({\n          isTeacher: data.isTeacher\n        }, {\n          emitEvent: false\n        }); // Set the checkbox value without emitting event\n        console.log('User Data:', data); // Log the entire user data\n        if (data.id) {\n          console.log('User ID:', data.id); // Log the user ID\n          this.fetchTimeSlotsByTeacherId(data.id); // Викликати метод тут з потрібним userId\n        } else {\n          console.error('User ID is undefined');\n        }\n      } else {\n        console.log('No user data available');\n      }\n    }, error => {\n      console.error('Error fetching user data', error);\n    });\n  }\n  fetchTimeSlotsByTeacherId(userId) {\n    this.timeslotService.getAllTimeSlots().subscribe(data => {\n      console.log('Fetched all time slots:', data); // Log all fetched data\n      console.log(userId); // Log the user ID\n      this.timeSlots = data.filter(slot => slot.userId === userId.toLowerCase()); // Filter and store matching timeslots\n    }, error => {\n      console.error('Error fetching time slots', error);\n    });\n  }\n  submitUser() {\n    if (this.userForm.valid && this.userData) {\n      this.isSubmitting = true;\n      const userId = this.userData.id;\n      const isTeacher = this.userForm.get('isTeacher')?.value;\n      console.log('Toggling isTeacher status for user:', userId, 'to:', isTeacher);\n      this.http.put(`http://localhost:5258/api/user/toggle-is-teacher?userId=${userId}`, {\n        isTeacher\n      }).subscribe(response => {\n        console.log('User isTeacher status updated successfully', response);\n        this.fetchUserData(); // Refresh user data after updating the role\n        this.fetchTimeSlotsByTeacherId(userId); // Refresh timeslots after updating the role\n        alert(`Ви тепер ${isTeacher ? 'викладач' : 'студент'}`); // Show message box\n        this.isSubmitting = false;\n      }, error => {\n        console.error('Error updating user isTeacher status', error);\n        this.isSubmitting = false;\n      });\n    }\n  }\n  getLionEmojis(rating) {\n    return '🦁'.repeat(rating);\n  }\n  navigateToUserPage() {\n    this.router.navigate(['/user-page']);\n  }\n  static ctorParameters = () => [{\n    type: UserDataService\n  }, {\n    type: HttpClient\n  }, {\n    type: TimeslotService\n  }, {\n    type: FormBuilder\n  }, {\n    type: Router\n  }];\n};\nTimeslotPageComponent = __decorate([Component({\n  selector: 'app-timeslot-page',\n  imports: [CommonModule, HttpClientModule, ReactiveFormsModule],\n  // Додайте ReactiveFormsModule\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], TimeslotPageComponent);\nexport { TimeslotPageComponent };","map":{"version":3,"names":["CommonModule","Component","HttpClient","HttpClientModule","ReactiveFormsModule","FormBuilder","Validators","Router","UserDataService","TimeslotService","TimeslotPageComponent","userDataService","http","timeslotService","fb","router","userData","timeSlots","chatId","userForm","isSubmitting","constructor","group","isTeacher","required","get","valueChanges","subscribe","value","submitUser","ngOnInit","fetchChatId","response","console","log","fetchUserData","error","data","message","patchValue","emitEvent","id","fetchTimeSlotsByTeacherId","userId","getAllTimeSlots","filter","slot","toLowerCase","valid","put","alert","getLionEmojis","rating","repeat","navigateToUserPage","navigate","__decorate","selector","imports","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\user\\Desktop\\Front\\buy-time\\Frontend\\src\\app\\pages\\timeslot-page\\timeslot-page.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'; // Для здійснення HTTP запитів\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; // Додайте ReactiveFormsModule\r\nimport { Router } from '@angular/router';\r\nimport { UserDataService } from '../../services/user-data.service';\r\nimport { TimeslotService } from '../../services/timeslot.service';\r\n\r\ninterface UserData {\r\n  id: string; // Ensure the Id property is included\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  telegramChatId: string;\r\n  isTeacher: boolean;\r\n  teacherNickname: string;\r\n  description: string;\r\n  rating: number;\r\n  tags: string;\r\n  message?: string;\r\n}\r\n\r\ninterface TimeSlot {\r\n  id: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  isAvailable: boolean;\r\n  userId: string; // Ensure the TeacherId property is included\r\n}\r\n\r\n@Component({\r\n  selector: 'app-timeslot-page',\r\n  imports: [CommonModule, HttpClientModule, ReactiveFormsModule], // Додайте ReactiveFormsModule\r\n  templateUrl: './timeslot-page.component.html',\r\n  styleUrls: ['./timeslot-page.component.css']\r\n})\r\nexport class TimeslotPageComponent implements OnInit {\r\n  userData: UserData | null = null;\r\n  timeSlots: TimeSlot[] = [];\r\n  chatId: string | null = null;\r\n  userForm: FormGroup;\r\n  isSubmitting: boolean = false;\r\n\r\n  constructor(\r\n    private userDataService: UserDataService,\r\n    private http: HttpClient,\r\n    private timeslotService: TimeslotService,\r\n    private fb: FormBuilder,\r\n    private router: Router\r\n  ) {\r\n    this.userForm = this.fb.group({\r\n      isTeacher: [false, Validators.required]\r\n    });\r\n\r\n    this.userForm.get('isTeacher')?.valueChanges.subscribe((value) => {\r\n      if (this.userData && value !== this.userData.isTeacher && !this.isSubmitting) {\r\n        this.submitUser();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchChatId();\r\n  }\r\n\r\n  fetchChatId(): void {\r\n    this.http.get<{ chatId: string }>('http://localhost:3000/api/getCurrentChatId').subscribe(\r\n      (response) => {\r\n        this.chatId = response.chatId;\r\n        console.log('Chat ID:', this.chatId); // Вивід chatId в консоль\r\n        this.fetchUserData();\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching chat ID', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  fetchUserData(): void {\r\n    if (!this.chatId) {\r\n      console.error('Chat ID is not defined');\r\n      return;\r\n    }\r\n    this.http.get<UserData>(`http://localhost:5258/api/user/get-by-chat-id?chatId=${this.chatId}`).subscribe(\r\n      (data) => {\r\n        console.log('Fetched user data:', data); // Log the fetched data\r\n        if (data && !data.message) {\r\n          this.userData = data; // Зберігаємо отримані дані користувача\r\n          this.userForm.patchValue({ isTeacher: data.isTeacher }, { emitEvent: false }); // Set the checkbox value without emitting event\r\n          console.log('User Data:', data); // Log the entire user data\r\n          if (data.id) {\r\n            console.log('User ID:', data.id); // Log the user ID\r\n            this.fetchTimeSlotsByTeacherId(data.id); // Викликати метод тут з потрібним userId\r\n          } else {\r\n            console.error('User ID is undefined');\r\n          }\r\n        } else {\r\n          console.log('No user data available');\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching user data', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  fetchTimeSlotsByTeacherId(userId: string): void {\r\n    this.timeslotService.getAllTimeSlots().subscribe(\r\n      (data) => {\r\n        console.log('Fetched all time slots:', data); // Log all fetched data\r\n        console.log(userId); // Log the user ID\r\n        this.timeSlots = data.filter(slot => slot.userId === userId.toLowerCase()); // Filter and store matching timeslots\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching time slots', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  submitUser(): void {\r\n    if (this.userForm.valid && this.userData) {\r\n      this.isSubmitting = true;\r\n      const userId = this.userData.id;\r\n      const isTeacher = this.userForm.get('isTeacher')?.value;\r\n\r\n      console.log('Toggling isTeacher status for user:', userId, 'to:', isTeacher);\r\n\r\n      this.http.put(`http://localhost:5258/api/user/toggle-is-teacher?userId=${userId}`, { isTeacher }).subscribe(response => {\r\n        console.log('User isTeacher status updated successfully', response);\r\n        this.fetchUserData(); // Refresh user data after updating the role\r\n        this.fetchTimeSlotsByTeacherId(userId); // Refresh timeslots after updating the role\r\n        alert(`Ви тепер ${isTeacher ? 'викладач' : 'студент'}`); // Show message box\r\n        this.isSubmitting = false;\r\n      }, error => {\r\n        console.error('Error updating user isTeacher status', error);\r\n        this.isSubmitting = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  getLionEmojis(rating: number): string {\r\n    return '🦁'.repeat(rating);\r\n  }\r\n\r\n  navigateToUserPage(): void {\r\n    this.router.navigate(['/user-page']);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}