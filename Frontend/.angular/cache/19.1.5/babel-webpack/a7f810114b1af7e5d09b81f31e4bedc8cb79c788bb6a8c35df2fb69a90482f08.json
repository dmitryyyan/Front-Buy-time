{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { getU64Codec, getU64Encoder } from '@solana/codecs-numbers';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static createWithSeed(fromPublicKey, seed, programId) {\n    return _asyncToGenerator(function* () {\n      const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n      const publicKeyBytes = sha256(buffer);\n      return new PublicKey(publicKeyBytes);\n    })();\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static createProgramAddress(seeds, programId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.createProgramAddressSync(seeds, programId);\n    })();\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static findProgramAddress(seeds, programId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.findProgramAddressSync(seeds, programId);\n    })();\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  getEstimatedFee(connection) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return (yield connection.getFeeForMessage(_this3.compileMessage())).value;\n    })();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  getLogs(connection) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (!Array.isArray(_this4.transactionLogs)) {\n        _this4.transactionLogs = new Promise((resolve, reject) => {\n          connection.getTransaction(_this4.signature).then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              _this4.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          }).catch(reject);\n        });\n      }\n      return yield _this4.transactionLogs;\n    })();\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nfunction sendAndConfirmTransaction(_x, _x2, _x3, _x4) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator(function* (connection, transaction, signers, options) {\n    const sendOptions = options && {\n      skipPreflight: options.skipPreflight,\n      preflightCommitment: options.preflightCommitment || options.commitment,\n      maxRetries: options.maxRetries,\n      minContextSlot: options.minContextSlot\n    };\n    const signature = yield connection.sendTransaction(transaction, signers, sendOptions);\n    let status;\n    if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n      status = (yield connection.confirmTransaction({\n        abortSignal: options?.abortSignal,\n        signature: signature,\n        blockhash: transaction.recentBlockhash,\n        lastValidBlockHeight: transaction.lastValidBlockHeight\n      }, options && options.commitment)).value;\n    } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n      const {\n        nonceInstruction\n      } = transaction.nonceInfo;\n      const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n      status = (yield connection.confirmTransaction({\n        abortSignal: options?.abortSignal,\n        minContextSlot: transaction.minNonceContextSlot,\n        nonceAccountPubkey,\n        nonceValue: transaction.nonceInfo.nonce,\n        signature\n      }, options && options.commitment)).value;\n    } else {\n      if (options?.abortSignal != null) {\n        console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n      }\n      status = (yield connection.confirmTransaction(signature, options && options.commitment)).value;\n    }\n    if (status.err) {\n      if (signature != null) {\n        throw new SendTransactionError({\n          action: 'send',\n          signature: signature,\n          transactionMessage: `Status: (${JSON.stringify(status)})`\n        });\n      }\n      throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n    }\n    return signature;\n  });\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nfunction u64(property) {\n  const layout = blob(8 /* bytes */, property);\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  const bigIntLayout = layout;\n  const codec = getU64Codec();\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return codec.decode(src);\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = codec.encode(bigInt);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, programId, data) {\n    return _asyncToGenerator(function* () {\n      {\n        const balanceNeeded = yield connection.getMinimumBalanceForRentExemption(data.length);\n\n        // Fetch program account info to check if it has already been created\n        const programInfo = yield connection.getAccountInfo(program.publicKey, 'confirmed');\n        let transaction = null;\n        if (programInfo !== null) {\n          if (programInfo.executable) {\n            console.error('Program load failed, account is already executable');\n            return false;\n          }\n          if (programInfo.data.length !== data.length) {\n            transaction = transaction || new Transaction();\n            transaction.add(SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length\n            }));\n          }\n          if (!programInfo.owner.equals(programId)) {\n            transaction = transaction || new Transaction();\n            transaction.add(SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId\n            }));\n          }\n          if (programInfo.lamports < balanceNeeded) {\n            transaction = transaction || new Transaction();\n            transaction.add(SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports\n            }));\n          }\n        } else {\n          transaction = new Transaction().add(SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId\n          }));\n        }\n\n        // If the account is already created correctly, skip this step\n        // and proceed directly to loading instructions\n        if (transaction !== null) {\n          yield sendAndConfirmTransaction(connection, transaction, [payer, program], {\n            commitment: 'confirmed'\n          });\n        }\n      }\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n      const chunkSize = Loader.chunkSize;\n      let offset = 0;\n      let array = data;\n      let transactions = [];\n      while (array.length > 0) {\n        const bytes = array.slice(0, chunkSize);\n        const data = Buffer.alloc(chunkSize + 16);\n        dataLayout.encode({\n          instruction: 0,\n          // Load instruction\n          offset,\n          bytes: bytes,\n          bytesLength: 0,\n          bytesLengthPadding: 0\n        }, data);\n        const transaction = new Transaction().add({\n          keys: [{\n            pubkey: program.publicKey,\n            isSigner: true,\n            isWritable: true\n          }],\n          programId,\n          data\n        });\n        transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        }));\n\n        // Delay between sends in an attempt to reduce rate limit errors\n        if (connection._rpcEndpoint.includes('solana.com')) {\n          const REQUESTS_PER_SECOND = 4;\n          yield sleep(1000 / REQUESTS_PER_SECOND);\n        }\n        offset += chunkSize;\n        array = array.slice(chunkSize);\n      }\n      yield Promise.all(transactions);\n\n      // Finalize the account loaded with program data for execution\n      {\n        const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n        const data = Buffer.alloc(dataLayout.span);\n        dataLayout.encode({\n          instruction: 1 // Finalize instruction\n        }, data);\n        const transaction = new Transaction().add({\n          keys: [{\n            pubkey: program.publicKey,\n            isSigner: true,\n            isWritable: true\n          }, {\n            pubkey: SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false\n          }],\n          programId,\n          data\n        });\n        const deployCommitment = 'processed';\n        const finalizeSignature = yield connection.sendTransaction(transaction, [payer, program], {\n          preflightCommitment: deployCommitment\n        });\n        const {\n          context,\n          value\n        } = yield connection.confirmTransaction({\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n          blockhash: transaction.recentBlockhash\n        }, deployCommitment);\n        if (value.err) {\n          throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n        }\n        // We prevent programs from being usable until the slot after their deployment.\n        // See https://github.com/solana-labs/solana/pull/29654\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          try {\n            const currentSlot = yield connection.getSlot({\n              commitment: deployCommitment\n            });\n            if (currentSlot > context.slot) {\n              break;\n            }\n          } catch {\n            /* empty */\n          }\n          yield new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n        }\n      }\n\n      // success\n      return true;\n    })();\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\nfunction requireFastStableStringify() {\n  if (hasRequiredFastStableStringify) return fastStableStringify$1;\n  hasRequiredFastStableStringify = 1;\n  var objToString = Object.prototype.toString;\n  var objKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var name in obj) {\n      keys.push(name);\n    }\n    return keys;\n  };\n  function stringify(val, isArrayProp) {\n    var i, max, str, keys, key, propVal, toStr;\n    if (val === true) {\n      return \"true\";\n    }\n    if (val === false) {\n      return \"false\";\n    }\n    switch (typeof val) {\n      case \"object\":\n        if (val === null) {\n          return null;\n        } else if (val.toJSON && typeof val.toJSON === \"function\") {\n          return stringify(val.toJSON(), isArrayProp);\n        } else {\n          toStr = objToString.call(val);\n          if (toStr === \"[object Array]\") {\n            str = '[';\n            max = val.length - 1;\n            for (i = 0; i < max; i++) {\n              str += stringify(val[i], true) + ',';\n            }\n            if (max > -1) {\n              str += stringify(val[i], true);\n            }\n            return str + ']';\n          } else if (toStr === \"[object Object]\") {\n            // only object is left\n            keys = objKeys(val).sort();\n            max = keys.length;\n            str = \"\";\n            i = 0;\n            while (i < max) {\n              key = keys[i];\n              propVal = stringify(val[key], false);\n              if (propVal !== undefined) {\n                if (str) {\n                  str += ',';\n                }\n                str += JSON.stringify(key) + ':' + propVal;\n              }\n              i++;\n            }\n            return '{' + str + '}';\n          } else {\n            return JSON.stringify(val);\n          }\n        }\n      case \"function\":\n      case \"undefined\":\n        return isArrayProp ? null : undefined;\n      case \"string\":\n        return JSON.stringify(val);\n      default:\n        return isFinite(val) ? val : null;\n    }\n  }\n  fastStableStringify$1 = function (val) {\n    var returnVal = stringify(val, false);\n    if (returnVal !== undefined) {\n      return '' + returnVal;\n    }\n  };\n  return fastStableStringify$1;\n}\nvar fastStableStringifyExports = /*@__PURE__*/requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nvar fetchImpl = globalThis.fetch;\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (info, init) {\n        const modifiedFetchArgs = yield new Promise((resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return yield fetch(...modifiedFetchArgs);\n      });\n      return function fetchWithMiddleware(_x5, _x6) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  const clientBrowser = new RpcClient(/*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (request, callback) {\n      const options = {\n        method: 'POST',\n        body: request,\n        agent,\n        headers: Object.assign({\n          'Content-Type': 'application/json'\n        }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n      };\n      try {\n        let too_many_requests_retries = 5;\n        let res;\n        let waitTime = 500;\n        for (;;) {\n          if (fetchWithMiddleware) {\n            res = yield fetchWithMiddleware(url, options);\n          } else {\n            res = yield fetch(url, options);\n          }\n          if (res.status !== 429 /* Too many requests */) {\n            break;\n          }\n          if (disableRetryOnRateLimit === true) {\n            break;\n          }\n          too_many_requests_retries -= 1;\n          if (too_many_requests_retries === 0) {\n            break;\n          }\n          console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n          yield sleep(waitTime);\n          waitTime *= 2;\n        }\n        const text = yield res.text();\n        if (res.ok) {\n          callback(null, text);\n        } else {\n          callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n        }\n      } catch (err) {\n        if (err instanceof Error) callback(err);\n      }\n    });\n    return function (_x7, _x8) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.0.0-maintenance\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    var _this5 = this;\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (commitmentOrConfig) {\n          const {\n            commitment,\n            config\n          } = extractCommitmentFromConfig(commitmentOrConfig);\n          const args = _this5._buildArgs([], commitment, undefined /* encoding */, config);\n          const requestHash = fastStableStringify(args);\n          requestPromises[requestHash] = requestPromises[requestHash] ?? _asyncToGenerator(function* () {\n            try {\n              const unsafeRes = yield _this5._rpcRequest('getBlockHeight', args);\n              const res = create(unsafeRes, jsonRpcResult(number()));\n              if ('error' in res) {\n                throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n              }\n              return res.result;\n            } finally {\n              delete requestPromises[requestHash];\n            }\n          })();\n          return yield requestPromises[requestHash];\n        });\n        return function (_x9) {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  getBalanceAndContext(publicKey, commitmentOrConfig) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      /** @internal */\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this6._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this6._rpcRequest('getBalance', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  getBalance(publicKey, commitmentOrConfig) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this7.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n        throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n      });\n    })();\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  getBlockTime(slot) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this8._rpcRequest('getBlockTime', [slot]);\n      const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  getMinimumLedgerSlot() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this9._rpcRequest('minimumLedgerSlot', []);\n      const res = create(unsafeRes, jsonRpcResult(number()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  getFirstAvailableBlock() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this10._rpcRequest('getFirstAvailableBlock', []);\n      const res = create(unsafeRes, SlotRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  getSupply(config) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      let configArg = {};\n      if (typeof config === 'string') {\n        configArg = {\n          commitment: config\n        };\n      } else if (config) {\n        configArg = {\n          ...config,\n          commitment: config && config.commitment || _this11.commitment\n        };\n      } else {\n        configArg = {\n          commitment: _this11.commitment\n        };\n      }\n      const unsafeRes = yield _this11._rpcRequest('getSupply', [configArg]);\n      const res = create(unsafeRes, GetSupplyRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  getTokenSupply(tokenMintAddress, commitment) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this12._buildArgs([tokenMintAddress.toBase58()], commitment);\n      const unsafeRes = yield _this12._rpcRequest('getTokenSupply', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  getTokenAccountBalance(tokenAddress, commitment) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this13._buildArgs([tokenAddress.toBase58()], commitment);\n      const unsafeRes = yield _this13._rpcRequest('getTokenAccountBalance', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      let _args = [ownerAddress.toBase58()];\n      if ('mint' in filter) {\n        _args.push({\n          mint: filter.mint.toBase58()\n        });\n      } else {\n        _args.push({\n          programId: filter.programId.toBase58()\n        });\n      }\n      const args = _this14._buildArgs(_args, commitment, 'base64', config);\n      const unsafeRes = yield _this14._rpcRequest('getTokenAccountsByOwner', args);\n      const res = create(unsafeRes, GetTokenAccountsByOwner);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      let _args = [ownerAddress.toBase58()];\n      if ('mint' in filter) {\n        _args.push({\n          mint: filter.mint.toBase58()\n        });\n      } else {\n        _args.push({\n          programId: filter.programId.toBase58()\n        });\n      }\n      const args = _this15._buildArgs(_args, commitment, 'jsonParsed');\n      const unsafeRes = yield _this15._rpcRequest('getTokenAccountsByOwner', args);\n      const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  getLargestAccounts(config) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const arg = {\n        ...config,\n        commitment: config && config.commitment || _this16.commitment\n      };\n      const args = arg.filter || arg.commitment ? [arg] : [];\n      const unsafeRes = yield _this16._rpcRequest('getLargestAccounts', args);\n      const res = create(unsafeRes, GetLargestAccountsRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  getTokenLargestAccounts(mintAddress, commitment) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this17._buildArgs([mintAddress.toBase58()], commitment);\n      const unsafeRes = yield _this17._rpcRequest('getTokenLargestAccounts', args);\n      const res = create(unsafeRes, GetTokenLargestAccountsResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this18._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n      const unsafeRes = yield _this18._rpcRequest('getAccountInfo', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this19._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n      const unsafeRes = yield _this19._rpcRequest('getAccountInfo', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  getAccountInfo(publicKey, commitmentOrConfig) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this20.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n        return res.value;\n      } catch (e) {\n        throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n      }\n    })();\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  getMultipleParsedAccounts(publicKeys, rawConfig) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(rawConfig);\n      const keys = publicKeys.map(key => key.toBase58());\n      const args = _this21._buildArgs([keys], commitment, 'jsonParsed', config);\n      const unsafeRes = yield _this21._rpcRequest('getMultipleAccounts', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const keys = publicKeys.map(key => key.toBase58());\n      const args = _this22._buildArgs([keys], commitment, 'base64', config);\n      const unsafeRes = yield _this22._rpcRequest('getMultipleAccounts', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      const res = yield _this23.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n      return res.value;\n    })();\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this24._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch\n      });\n      const unsafeRes = yield _this24._rpcRequest('getStakeActivation', args);\n      const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  getProgramAccounts(programId, configOrCommitment) {\n    var _this25 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(configOrCommitment);\n      const {\n        encoding,\n        ...configWithoutEncoding\n      } = config || {};\n      const args = _this25._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters ? {\n          filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n        } : null)\n      });\n      const unsafeRes = yield _this25._rpcRequest('getProgramAccounts', args);\n      const baseSchema = array(KeyedAccountInfoResult);\n      const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  getParsedProgramAccounts(programId, configOrCommitment) {\n    var _this26 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(configOrCommitment);\n      const args = _this26._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n      const unsafeRes = yield _this26._rpcRequest('getProgramAccounts', args);\n      const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n      }\n      return res.result;\n    })();\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(strategy, commitment) {\n    var _this27 = this;\n    return _asyncToGenerator(function* () {\n      let rawSignature;\n      if (typeof strategy == 'string') {\n        rawSignature = strategy;\n      } else {\n        const config = strategy;\n        if (config.abortSignal?.aborted) {\n          return Promise.reject(config.abortSignal.reason);\n        }\n        rawSignature = config.signature;\n      }\n      let decodedSignature;\n      try {\n        decodedSignature = bs58.decode(rawSignature);\n      } catch (err) {\n        throw new Error('signature must be base58 encoded: ' + rawSignature);\n      }\n      assert(decodedSignature.length === 64, 'signature has invalid length');\n      if (typeof strategy === 'string') {\n        return yield _this27.confirmTransactionUsingLegacyTimeoutStrategy({\n          commitment: commitment || _this27.commitment,\n          signature: rawSignature\n        });\n      } else if ('lastValidBlockHeight' in strategy) {\n        return yield _this27.confirmTransactionUsingBlockHeightExceedanceStrategy({\n          commitment: commitment || _this27.commitment,\n          strategy\n        });\n      } else {\n        return yield _this27.confirmTransactionUsingDurableNonceStrategy({\n          commitment: commitment || _this27.commitment,\n          strategy\n        });\n      }\n    })();\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    var _this28 = this;\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        _asyncToGenerator(function* () {\n          yield subscriptionSetupPromise;\n          if (done) return;\n          const response = yield _this28.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    var _this29 = this;\n    return _asyncToGenerator(function* () {\n      let done = false;\n      const expiryPromise = new Promise(resolve => {\n        const checkBlockHeight = /*#__PURE__*/function () {\n          var _ref6 = _asyncToGenerator(function* () {\n            try {\n              const blockHeight = yield _this29.getBlockHeight(commitment);\n              return blockHeight;\n            } catch (_e) {\n              return -1;\n            }\n          });\n          return function checkBlockHeight() {\n            return _ref6.apply(this, arguments);\n          };\n        }();\n        _asyncToGenerator(function* () {\n          let currentBlockHeight = yield checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= lastValidBlockHeight) {\n            yield sleep(1000);\n            if (done) return;\n            currentBlockHeight = yield checkBlockHeight();\n            if (done) return;\n          }\n          resolve({\n            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n          });\n        })();\n      });\n      const {\n        abortConfirmation,\n        confirmationPromise\n      } = _this29.getTransactionConfirmationPromise({\n        commitment,\n        signature\n      });\n      const cancellationPromise = _this29.getCancellationPromise(abortSignal);\n      let result;\n      try {\n        const outcome = yield Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n        if (outcome.__type === TransactionStatus.PROCESSED) {\n          result = outcome.response;\n        } else {\n          throw new TransactionExpiredBlockheightExceededError(signature);\n        }\n      } finally {\n        done = true;\n        abortConfirmation();\n      }\n      return result;\n    })();\n  }\n  confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    var _this30 = this;\n    return _asyncToGenerator(function* () {\n      let done = false;\n      const expiryPromise = new Promise(resolve => {\n        let currentNonceValue = nonceValue;\n        let lastCheckedSlot = null;\n        const getCurrentNonceValue = /*#__PURE__*/function () {\n          var _ref8 = _asyncToGenerator(function* () {\n            try {\n              const {\n                context,\n                value: nonceAccount\n              } = yield _this30.getNonceAndContext(nonceAccountPubkey, {\n                commitment,\n                minContextSlot\n              });\n              lastCheckedSlot = context.slot;\n              return nonceAccount?.nonce;\n            } catch (e) {\n              // If for whatever reason we can't reach/read the nonce\n              // account, just keep using the last-known value.\n              return currentNonceValue;\n            }\n          });\n          return function getCurrentNonceValue() {\n            return _ref8.apply(this, arguments);\n          };\n        }();\n        _asyncToGenerator(function* () {\n          currentNonceValue = yield getCurrentNonceValue();\n          if (done) return;\n          while (true // eslint-disable-line no-constant-condition\n          ) {\n            if (nonceValue !== currentNonceValue) {\n              resolve({\n                __type: TransactionStatus.NONCE_INVALID,\n                slotInWhichNonceDidAdvance: lastCheckedSlot\n              });\n              return;\n            }\n            yield sleep(2000);\n            if (done) return;\n            currentNonceValue = yield getCurrentNonceValue();\n            if (done) return;\n          }\n        })();\n      });\n      const {\n        abortConfirmation,\n        confirmationPromise\n      } = _this30.getTransactionConfirmationPromise({\n        commitment,\n        signature\n      });\n      const cancellationPromise = _this30.getCancellationPromise(abortSignal);\n      let result;\n      try {\n        const outcome = yield Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n        if (outcome.__type === TransactionStatus.PROCESSED) {\n          result = outcome.response;\n        } else {\n          // Double check that the transaction is indeed unconfirmed.\n          let signatureStatus;\n          while (true // eslint-disable-line no-constant-condition\n          ) {\n            const status = yield _this30.getSignatureStatus(signature);\n            if (status == null) {\n              break;\n            }\n            if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n              yield sleep(400);\n              continue;\n            }\n            signatureStatus = status;\n            break;\n          }\n          if (signatureStatus?.value) {\n            const commitmentForStatus = commitment || 'finalized';\n            const {\n              confirmationStatus\n            } = signatureStatus.value;\n            switch (commitmentForStatus) {\n              case 'processed':\n              case 'recent':\n                if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                  throw new TransactionExpiredNonceInvalidError(signature);\n                }\n                break;\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                  throw new TransactionExpiredNonceInvalidError(signature);\n                }\n                break;\n              case 'finalized':\n              case 'max':\n              case 'root':\n                if (confirmationStatus !== 'finalized') {\n                  throw new TransactionExpiredNonceInvalidError(signature);\n                }\n                break;\n              default:\n                // Exhaustive switch.\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                (_ => {})(commitmentForStatus);\n            }\n            result = {\n              context: signatureStatus.context,\n              value: {\n                err: signatureStatus.value.err\n              }\n            };\n          } else {\n            throw new TransactionExpiredNonceInvalidError(signature);\n          }\n        }\n      } finally {\n        done = true;\n        abortConfirmation();\n      }\n      return result;\n    })();\n  }\n  confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    var _this31 = this;\n    return _asyncToGenerator(function* () {\n      let timeoutId;\n      const expiryPromise = new Promise(resolve => {\n        let timeoutMs = _this31._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (commitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip':\n            {\n              timeoutMs = _this31._confirmTransactionInitialTimeout || 30 * 1000;\n              break;\n            }\n        }\n        timeoutId = setTimeout(() => resolve({\n          __type: TransactionStatus.TIMED_OUT,\n          timeoutMs\n        }), timeoutMs);\n      });\n      const {\n        abortConfirmation,\n        confirmationPromise\n      } = _this31.getTransactionConfirmationPromise({\n        commitment,\n        signature\n      });\n      let result;\n      try {\n        const outcome = yield Promise.race([confirmationPromise, expiryPromise]);\n        if (outcome.__type === TransactionStatus.PROCESSED) {\n          result = outcome.response;\n        } else {\n          throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n        }\n      } finally {\n        clearTimeout(timeoutId);\n        abortConfirmation();\n      }\n      return result;\n    })();\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  getClusterNodes() {\n    var _this32 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this32._rpcRequest('getClusterNodes', []);\n      const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  getVoteAccounts(commitment) {\n    var _this33 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this33._buildArgs([], commitment);\n      const unsafeRes = yield _this33._rpcRequest('getVoteAccounts', args);\n      const res = create(unsafeRes, GetVoteAccounts);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  getSlot(commitmentOrConfig) {\n    var _this34 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this34._buildArgs([], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this34._rpcRequest('getSlot', args);\n      const res = create(unsafeRes, jsonRpcResult(number()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  getSlotLeader(commitmentOrConfig) {\n    var _this35 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this35._buildArgs([], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this35._rpcRequest('getSlotLeader', args);\n      const res = create(unsafeRes, jsonRpcResult(string()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  getSlotLeaders(startSlot, limit) {\n    var _this36 = this;\n    return _asyncToGenerator(function* () {\n      const args = [startSlot, limit];\n      const unsafeRes = yield _this36._rpcRequest('getSlotLeaders', args);\n      const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  getSignatureStatus(signature, config) {\n    var _this37 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        context,\n        value: values\n      } = yield _this37.getSignatureStatuses([signature], config);\n      assert(values.length === 1);\n      const value = values[0];\n      return {\n        context,\n        value\n      };\n    })();\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  getSignatureStatuses(signatures, config) {\n    var _this38 = this;\n    return _asyncToGenerator(function* () {\n      const params = [signatures];\n      if (config) {\n        params.push(config);\n      }\n      const unsafeRes = yield _this38._rpcRequest('getSignatureStatuses', params);\n      const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  getTransactionCount(commitmentOrConfig) {\n    var _this39 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this39._buildArgs([], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this39._rpcRequest('getTransactionCount', args);\n      const res = create(unsafeRes, jsonRpcResult(number()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  getTotalSupply(commitment) {\n    var _this40 = this;\n    return _asyncToGenerator(function* () {\n      const result = yield _this40.getSupply({\n        commitment,\n        excludeNonCirculatingAccountsList: true\n      });\n      return result.value.total;\n    })();\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  getInflationGovernor(commitment) {\n    var _this41 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this41._buildArgs([], commitment);\n      const unsafeRes = yield _this41._rpcRequest('getInflationGovernor', args);\n      const res = create(unsafeRes, GetInflationGovernorRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  getInflationReward(addresses, epoch, commitmentOrConfig) {\n    var _this42 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this42._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch\n      });\n      const unsafeRes = yield _this42._rpcRequest('getInflationReward', args);\n      const res = create(unsafeRes, GetInflationRewardResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  getInflationRate() {\n    var _this43 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this43._rpcRequest('getInflationRate', []);\n      const res = create(unsafeRes, GetInflationRateRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  getEpochInfo(commitmentOrConfig) {\n    var _this44 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this44._buildArgs([], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this44._rpcRequest('getEpochInfo', args);\n      const res = create(unsafeRes, GetEpochInfoRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  getEpochSchedule() {\n    var _this45 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this45._rpcRequest('getEpochSchedule', []);\n      const res = create(unsafeRes, GetEpochScheduleRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n      }\n      const epochSchedule = res.result;\n      return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n    })();\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  getLeaderSchedule() {\n    var _this46 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this46._rpcRequest('getLeaderSchedule', []);\n      const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  getMinimumBalanceForRentExemption(dataLength, commitment) {\n    var _this47 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this47._buildArgs([dataLength], commitment);\n      const unsafeRes = yield _this47._rpcRequest('getMinimumBalanceForRentExemption', args);\n      const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n      if ('error' in res) {\n        console.warn('Unable to fetch minimum balance for rent exemption');\n        return 0;\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  getRecentBlockhashAndContext(commitment) {\n    var _this48 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        context,\n        value: {\n          blockhash\n        }\n      } = yield _this48.getLatestBlockhashAndContext(commitment);\n      const feeCalculator = {\n        get lamportsPerSignature() {\n          throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');\n        },\n        toJSON() {\n          return {};\n        }\n      };\n      return {\n        context,\n        value: {\n          blockhash,\n          feeCalculator\n        }\n      };\n    })();\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  getRecentPerformanceSamples(limit) {\n    var _this49 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this49._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n      const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  getFeeCalculatorForBlockhash(blockhash, commitment) {\n    var _this50 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this50._buildArgs([blockhash], commitment);\n      const unsafeRes = yield _this50._rpcRequest('getFeeCalculatorForBlockhash', args);\n      const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n      }\n      const {\n        context,\n        value\n      } = res.result;\n      return {\n        context,\n        value: value !== null ? value.feeCalculator : null\n      };\n    })();\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  getFeeForMessage(message, commitment) {\n    var _this51 = this;\n    return _asyncToGenerator(function* () {\n      const wireMessage = toBuffer(message.serialize()).toString('base64');\n      const args = _this51._buildArgs([wireMessage], commitment);\n      const unsafeRes = yield _this51._rpcRequest('getFeeForMessage', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n      }\n      if (res.result === null) {\n        throw new Error('invalid blockhash');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  getRecentPrioritizationFees(config) {\n    var _this52 = this;\n    return _asyncToGenerator(function* () {\n      const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n      const args = accounts?.length ? [accounts] : [];\n      const unsafeRes = yield _this52._rpcRequest('getRecentPrioritizationFees', args);\n      const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n      }\n      return res.result;\n    })();\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  getRecentBlockhash(commitment) {\n    var _this53 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this53.getRecentBlockhashAndContext(commitment);\n        return res.value;\n      } catch (e) {\n        throw new Error('failed to get recent blockhash: ' + e);\n      }\n    })();\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  getLatestBlockhash(commitmentOrConfig) {\n    var _this54 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this54.getLatestBlockhashAndContext(commitmentOrConfig);\n        return res.value;\n      } catch (e) {\n        throw new Error('failed to get recent blockhash: ' + e);\n      }\n    })();\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  getLatestBlockhashAndContext(commitmentOrConfig) {\n    var _this55 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this55._buildArgs([], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this55._rpcRequest('getLatestBlockhash', args);\n      const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  isBlockhashValid(blockhash, rawConfig) {\n    var _this56 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(rawConfig);\n      const args = _this56._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this56._rpcRequest('isBlockhashValid', args);\n      const res = create(unsafeRes, IsBlockhashValidRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the node version\n   */\n  getVersion() {\n    var _this57 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this57._rpcRequest('getVersion', []);\n      const res = create(unsafeRes, jsonRpcResult(VersionResult));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get version');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  getGenesisHash() {\n    var _this58 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this58._rpcRequest('getGenesisHash', []);\n      const res = create(unsafeRes, jsonRpcResult(string()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  getBlock(slot, rawConfig) {\n    var _this59 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(rawConfig);\n      const args = _this59._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this59._rpcRequest('getBlock', args);\n      try {\n        switch (config?.transactionDetails) {\n          case 'accounts':\n            {\n              const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              return res.result;\n            }\n          case 'none':\n            {\n              const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              return res.result;\n            }\n          default:\n            {\n              const res = create(unsafeRes, GetBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              const {\n                result\n              } = res;\n              return result ? {\n                ...result,\n                transactions: result.transactions.map(({\n                  transaction,\n                  meta,\n                  version\n                }) => ({\n                  meta,\n                  transaction: {\n                    ...transaction,\n                    message: versionedMessageFromResponse(version, transaction.message)\n                  },\n                  version\n                }))\n              } : null;\n            }\n        }\n      } catch (e) {\n        throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n      }\n    })();\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  getParsedBlock(slot, rawConfig) {\n    var _this60 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(rawConfig);\n      const args = _this60._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n      const unsafeRes = yield _this60._rpcRequest('getBlock', args);\n      try {\n        switch (config?.transactionDetails) {\n          case 'accounts':\n            {\n              const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              return res.result;\n            }\n          case 'none':\n            {\n              const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              return res.result;\n            }\n          default:\n            {\n              const res = create(unsafeRes, GetParsedBlockRpcResult);\n              if ('error' in res) {\n                throw res.error;\n              }\n              return res.result;\n            }\n        }\n      } catch (e) {\n        throw new SolanaJSONRPCError(e, 'failed to get block');\n      }\n    })();\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  getBlockProduction(configOrCommitment) {\n    var _this61 = this;\n    return _asyncToGenerator(function* () {\n      let extra;\n      let commitment;\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else if (configOrCommitment) {\n        const {\n          commitment: c,\n          ...rest\n        } = configOrCommitment;\n        commitment = c;\n        extra = rest;\n      }\n      const args = _this61._buildArgs([], commitment, 'base64', extra);\n      const unsafeRes = yield _this61._rpcRequest('getBlockProduction', args);\n      const res = create(unsafeRes, BlockProductionResponseStruct);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  getTransaction(signature, rawConfig) {\n    var _this62 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(rawConfig);\n      const args = _this62._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      const unsafeRes = yield _this62._rpcRequest('getTransaction', args);\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    })();\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  getParsedTransaction(signature, commitmentOrConfig) {\n    var _this63 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const args = _this63._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      const unsafeRes = yield _this63._rpcRequest('getTransaction', args);\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  getParsedTransactions(signatures, commitmentOrConfig) {\n    var _this64 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const batch = signatures.map(signature => {\n        const args = _this64._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n        return {\n          methodName: 'getTransaction',\n          args\n        };\n      });\n      const unsafeRes = yield _this64._rpcBatchRequest(batch);\n      const res = unsafeRes.map(unsafeRes => {\n        const res = create(unsafeRes, GetParsedTransactionRpcResult);\n        if ('error' in res) {\n          throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n        }\n        return res.result;\n      });\n      return res;\n    })();\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  getTransactions(signatures, commitmentOrConfig) {\n    var _this65 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config\n      } = extractCommitmentFromConfig(commitmentOrConfig);\n      const batch = signatures.map(signature => {\n        const args = _this65._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n        return {\n          methodName: 'getTransaction',\n          args\n        };\n      });\n      const unsafeRes = yield _this65._rpcBatchRequest(batch);\n      const res = unsafeRes.map(unsafeRes => {\n        const res = create(unsafeRes, GetTransactionRpcResult);\n        if ('error' in res) {\n          throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n        }\n        const result = res.result;\n        if (!result) return result;\n        return {\n          ...result,\n          transaction: {\n            ...result.transaction,\n            message: versionedMessageFromResponse(result.version, result.transaction.message)\n          }\n        };\n      });\n      return res;\n    })();\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  getConfirmedBlock(slot, commitment) {\n    var _this66 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this66._buildArgsAtLeastConfirmed([slot], commitment);\n      const unsafeRes = yield _this66._rpcRequest('getBlock', args);\n      const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n      }\n      const result = res.result;\n      if (!result) {\n        throw new Error('Confirmed block ' + slot + ' not found');\n      }\n      const block = {\n        ...result,\n        transactions: result.transactions.map(({\n          transaction,\n          meta\n        }) => {\n          const message = new Message(transaction.message);\n          return {\n            meta,\n            transaction: {\n              ...transaction,\n              message\n            }\n          };\n        })\n      };\n      return {\n        ...block,\n        transactions: block.transactions.map(({\n          transaction,\n          meta\n        }) => {\n          return {\n            meta,\n            transaction: Transaction.populate(transaction.message, transaction.signatures)\n          };\n        })\n      };\n    })();\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  getBlocks(startSlot, endSlot, commitment) {\n    var _this67 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this67._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n      const unsafeRes = yield _this67._rpcRequest('getBlocks', args);\n      const res = create(unsafeRes, jsonRpcResult(array(number())));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  getBlockSignatures(slot, commitment) {\n    var _this68 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this68._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n        transactionDetails: 'signatures',\n        rewards: false\n      });\n      const unsafeRes = yield _this68._rpcRequest('getBlock', args);\n      const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get block');\n      }\n      const result = res.result;\n      if (!result) {\n        throw new Error('Block ' + slot + ' not found');\n      }\n      return result;\n    })();\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  getConfirmedBlockSignatures(slot, commitment) {\n    var _this69 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this69._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n        transactionDetails: 'signatures',\n        rewards: false\n      });\n      const unsafeRes = yield _this69._rpcRequest('getBlock', args);\n      const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n      }\n      const result = res.result;\n      if (!result) {\n        throw new Error('Confirmed block ' + slot + ' not found');\n      }\n      return result;\n    })();\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  getConfirmedTransaction(signature, commitment) {\n    var _this70 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this70._buildArgsAtLeastConfirmed([signature], commitment);\n      const unsafeRes = yield _this70._rpcRequest('getTransaction', args);\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n      }\n      const result = res.result;\n      if (!result) return result;\n      const message = new Message(result.transaction.message);\n      const signatures = result.transaction.signatures;\n      return {\n        ...result,\n        transaction: Transaction.populate(message, signatures)\n      };\n    })();\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  getParsedConfirmedTransaction(signature, commitment) {\n    var _this71 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this71._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      const unsafeRes = yield _this71._rpcRequest('getTransaction', args);\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  getParsedConfirmedTransactions(signatures, commitment) {\n    var _this72 = this;\n    return _asyncToGenerator(function* () {\n      const batch = signatures.map(signature => {\n        const args = _this72._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n        return {\n          methodName: 'getTransaction',\n          args\n        };\n      });\n      const unsafeRes = yield _this72._rpcBatchRequest(batch);\n      const res = unsafeRes.map(unsafeRes => {\n        const res = create(unsafeRes, GetParsedTransactionRpcResult);\n        if ('error' in res) {\n          throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n        }\n        return res.result;\n      });\n      return res;\n    })();\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    var _this73 = this;\n    return _asyncToGenerator(function* () {\n      let options = {};\n      let firstAvailableBlock = yield _this73.getFirstAvailableBlock();\n      while (!('until' in options)) {\n        startSlot--;\n        if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n          break;\n        }\n        try {\n          const block = yield _this73.getConfirmedBlockSignatures(startSlot, 'finalized');\n          if (block.signatures.length > 0) {\n            options.until = block.signatures[block.signatures.length - 1].toString();\n          }\n        } catch (err) {\n          if (err instanceof Error && err.message.includes('skipped')) {\n            continue;\n          } else {\n            throw err;\n          }\n        }\n      }\n      let highestConfirmedRoot = yield _this73.getSlot('finalized');\n      while (!('before' in options)) {\n        endSlot++;\n        if (endSlot > highestConfirmedRoot) {\n          break;\n        }\n        try {\n          const block = yield _this73.getConfirmedBlockSignatures(endSlot);\n          if (block.signatures.length > 0) {\n            options.before = block.signatures[block.signatures.length - 1].toString();\n          }\n        } catch (err) {\n          if (err instanceof Error && err.message.includes('skipped')) {\n            continue;\n          } else {\n            throw err;\n          }\n        }\n      }\n      const confirmedSignatureInfo = yield _this73.getConfirmedSignaturesForAddress2(address, options);\n      return confirmedSignatureInfo.map(info => info.signature);\n    })();\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  getConfirmedSignaturesForAddress2(address, options, commitment) {\n    var _this74 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this74._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n      const unsafeRes = yield _this74._rpcRequest('getConfirmedSignaturesForAddress2', args);\n      const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  getSignaturesForAddress(address, options, commitment) {\n    var _this75 = this;\n    return _asyncToGenerator(function* () {\n      const args = _this75._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n      const unsafeRes = yield _this75._rpcRequest('getSignaturesForAddress', args);\n      const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n      }\n      return res.result;\n    })();\n  }\n  getAddressLookupTable(accountKey, config) {\n    var _this76 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        context,\n        value: accountInfo\n      } = yield _this76.getAccountInfoAndContext(accountKey, config);\n      let value = null;\n      if (accountInfo !== null) {\n        value = new AddressLookupTableAccount({\n          key: accountKey,\n          state: AddressLookupTableAccount.deserialize(accountInfo.data)\n        });\n      }\n      return {\n        context,\n        value\n      };\n    })();\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    var _this77 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        context,\n        value: accountInfo\n      } = yield _this77.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n      let value = null;\n      if (accountInfo !== null) {\n        value = NonceAccount.fromAccountData(accountInfo.data);\n      }\n      return {\n        context,\n        value\n      };\n    })();\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  getNonce(nonceAccount, commitmentOrConfig) {\n    var _this78 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this78.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n        throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n      });\n    })();\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  requestAirdrop(to, lamports) {\n    var _this79 = this;\n    return _asyncToGenerator(function* () {\n      const unsafeRes = yield _this79._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n      const res = create(unsafeRes, RequestAirdropRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _blockhashWithExpiryBlockHeight(disableCache) {\n    var _this80 = this;\n    return _asyncToGenerator(function* () {\n      if (!disableCache) {\n        // Wait for polling to finish\n        while (_this80._pollingBlockhash) {\n          yield sleep(100);\n        }\n        const timeSinceFetch = Date.now() - _this80._blockhashInfo.lastFetch;\n        const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n        if (_this80._blockhashInfo.latestBlockhash !== null && !expired) {\n          return _this80._blockhashInfo.latestBlockhash;\n        }\n      }\n      return yield _this80._pollNewBlockhash();\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _pollNewBlockhash() {\n    var _this81 = this;\n    return _asyncToGenerator(function* () {\n      _this81._pollingBlockhash = true;\n      try {\n        const startTime = Date.now();\n        const cachedLatestBlockhash = _this81._blockhashInfo.latestBlockhash;\n        const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n        for (let i = 0; i < 50; i++) {\n          const latestBlockhash = yield _this81.getLatestBlockhash('finalized');\n          if (cachedBlockhash !== latestBlockhash.blockhash) {\n            _this81._blockhashInfo = {\n              latestBlockhash,\n              lastFetch: Date.now(),\n              transactionSignatures: [],\n              simulatedSignatures: []\n            };\n            return latestBlockhash;\n          }\n\n          // Sleep for approximately half a slot\n          yield sleep(MS_PER_SLOT / 2);\n        }\n        throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n      } finally {\n        _this81._pollingBlockhash = false;\n      }\n    })();\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  getStakeMinimumDelegation(config) {\n    var _this82 = this;\n    return _asyncToGenerator(function* () {\n      const {\n        commitment,\n        config: configArg\n      } = extractCommitmentFromConfig(config);\n      const args = _this82._buildArgs([], commitment, 'base64', configArg);\n      const unsafeRes = yield _this82._rpcRequest('getStakeMinimumDelegation', args);\n      const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    var _this83 = this;\n    return _asyncToGenerator(function* () {\n      if ('message' in transactionOrMessage) {\n        const versionedTx = transactionOrMessage;\n        const wireTransaction = versionedTx.serialize();\n        const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n        if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n          throw new Error('Invalid arguments');\n        }\n        const config = configOrSigners || {};\n        config.encoding = 'base64';\n        if (!('commitment' in config)) {\n          config.commitment = _this83.commitment;\n        }\n        if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n          config.innerInstructions = configOrSigners.innerInstructions;\n        }\n        const args = [encodedTransaction, config];\n        const unsafeRes = yield _this83._rpcRequest('simulateTransaction', args);\n        const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n        if ('error' in res) {\n          throw new Error('failed to simulate transaction: ' + res.error.message);\n        }\n        return res.result;\n      }\n      let transaction;\n      if (transactionOrMessage instanceof Transaction) {\n        let originalTx = transactionOrMessage;\n        transaction = new Transaction();\n        transaction.feePayer = originalTx.feePayer;\n        transaction.instructions = transactionOrMessage.instructions;\n        transaction.nonceInfo = originalTx.nonceInfo;\n        transaction.signatures = originalTx.signatures;\n      } else {\n        transaction = Transaction.populate(transactionOrMessage);\n        // HACK: this function relies on mutating the populated transaction\n        transaction._message = transaction._json = undefined;\n      }\n      if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n        throw new Error('Invalid arguments');\n      }\n      const signers = configOrSigners;\n      if (transaction.nonceInfo && signers) {\n        transaction.sign(...signers);\n      } else {\n        let disableCache = _this83._disableBlockhashCaching;\n        for (;;) {\n          const latestBlockhash = yield _this83._blockhashWithExpiryBlockHeight(disableCache);\n          transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n          transaction.recentBlockhash = latestBlockhash.blockhash;\n          if (!signers) break;\n          transaction.sign(...signers);\n          if (!transaction.signature) {\n            throw new Error('!signature'); // should never happen\n          }\n          const signature = transaction.signature.toString('base64');\n          if (!_this83._blockhashInfo.simulatedSignatures.includes(signature) && !_this83._blockhashInfo.transactionSignatures.includes(signature)) {\n            // The signature of this transaction has not been seen before with the\n            // current recentBlockhash, all done. Let's break\n            _this83._blockhashInfo.simulatedSignatures.push(signature);\n            break;\n          } else {\n            // This transaction would be treated as duplicate (its derived signature\n            // matched to one of already recorded signatures).\n            // So, we must fetch a new blockhash for a different signature by disabling\n            // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n            disableCache = true;\n          }\n        }\n      }\n      const message = transaction._compile();\n      const signData = message.serialize();\n      const wireTransaction = transaction._serialize(signData);\n      const encodedTransaction = wireTransaction.toString('base64');\n      const config = {\n        encoding: 'base64',\n        commitment: _this83.commitment\n      };\n      if (includeAccounts) {\n        const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n        config['accounts'] = {\n          encoding: 'base64',\n          addresses\n        };\n      }\n      if (signers) {\n        config.sigVerify = true;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = yield _this83._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        let logs;\n        if ('data' in res.error) {\n          logs = res.error.data.logs;\n          if (logs && Array.isArray(logs)) {\n            const traceIndent = '\\n    ';\n            const logTrace = traceIndent + logs.join(traceIndent);\n            console.error(res.error.message, logTrace);\n          }\n        }\n        throw new SendTransactionError({\n          action: 'simulate',\n          signature: '',\n          transactionMessage: res.error.message,\n          logs: logs\n        });\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(transaction, signersOrOptions, options) {\n    var _this84 = this;\n    return _asyncToGenerator(function* () {\n      if ('version' in transaction) {\n        if (signersOrOptions && Array.isArray(signersOrOptions)) {\n          throw new Error('Invalid arguments');\n        }\n        const wireTransaction = transaction.serialize();\n        return yield _this84.sendRawTransaction(wireTransaction, signersOrOptions);\n      }\n      if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const signers = signersOrOptions;\n      if (transaction.nonceInfo) {\n        transaction.sign(...signers);\n      } else {\n        let disableCache = _this84._disableBlockhashCaching;\n        for (;;) {\n          const latestBlockhash = yield _this84._blockhashWithExpiryBlockHeight(disableCache);\n          transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n          transaction.recentBlockhash = latestBlockhash.blockhash;\n          transaction.sign(...signers);\n          if (!transaction.signature) {\n            throw new Error('!signature'); // should never happen\n          }\n          const signature = transaction.signature.toString('base64');\n          if (!_this84._blockhashInfo.transactionSignatures.includes(signature)) {\n            // The signature of this transaction has not been seen before with the\n            // current recentBlockhash, all done. Let's break\n            _this84._blockhashInfo.transactionSignatures.push(signature);\n            break;\n          } else {\n            // This transaction would be treated as duplicate (its derived signature\n            // matched to one of already recorded signatures).\n            // So, we must fetch a new blockhash for a different signature by disabling\n            // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n            disableCache = true;\n          }\n        }\n      }\n      const wireTransaction = transaction.serialize();\n      return yield _this84.sendRawTransaction(wireTransaction, options);\n    })();\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  sendRawTransaction(rawTransaction, options) {\n    var _this85 = this;\n    return _asyncToGenerator(function* () {\n      const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n      const result = yield _this85.sendEncodedTransaction(encodedTransaction, options);\n      return result;\n    })();\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  sendEncodedTransaction(encodedTransaction, options) {\n    var _this86 = this;\n    return _asyncToGenerator(function* () {\n      const config = {\n        encoding: 'base64'\n      };\n      const skipPreflight = options && options.skipPreflight;\n      const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n      : options && options.preflightCommitment || _this86.commitment;\n      if (options && options.maxRetries != null) {\n        config.maxRetries = options.maxRetries;\n      }\n      if (options && options.minContextSlot != null) {\n        config.minContextSlot = options.minContextSlot;\n      }\n      if (skipPreflight) {\n        config.skipPreflight = skipPreflight;\n      }\n      if (preflightCommitment) {\n        config.preflightCommitment = preflightCommitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = yield _this86._rpcRequest('sendTransaction', args);\n      const res = create(unsafeRes, SendTransactionRpcResult);\n      if ('error' in res) {\n        let logs = undefined;\n        if ('data' in res.error) {\n          logs = res.error.data.logs;\n        }\n        throw new SendTransactionError({\n          action: skipPreflight ? 'send' : 'simulate',\n          signature: '',\n          transactionMessage: res.error.message,\n          logs: logs\n        });\n      }\n      return res.result;\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    var _this87 = this;\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      _asyncToGenerator(function* () {\n        try {\n          yield _this87._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    var _this88 = this;\n    return _asyncToGenerator(function* () {\n      if (Object.keys(_this88._subscriptionsByHash).length === 0) {\n        if (_this88._rpcWebSocketConnected) {\n          _this88._rpcWebSocketConnected = false;\n          _this88._rpcWebSocketIdleTimeout = setTimeout(() => {\n            _this88._rpcWebSocketIdleTimeout = null;\n            try {\n              _this88._rpcWebSocket.close();\n            } catch (err) {\n              // swallow error if socket has already been closed.\n              if (err instanceof Error) {\n                console.log(`Error when closing socket connection: ${err.message}`);\n              }\n            }\n          }, 500);\n        }\n        return;\n      }\n      if (_this88._rpcWebSocketIdleTimeout !== null) {\n        clearTimeout(_this88._rpcWebSocketIdleTimeout);\n        _this88._rpcWebSocketIdleTimeout = null;\n        _this88._rpcWebSocketConnected = true;\n      }\n      if (!_this88._rpcWebSocketConnected) {\n        _this88._rpcWebSocket.connect();\n        return;\n      }\n      const activeWebSocketGeneration = _this88._rpcWebSocketGeneration;\n      const isCurrentConnectionStillActive = () => {\n        return activeWebSocketGeneration === _this88._rpcWebSocketGeneration;\n      };\n      yield Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(_this88._subscriptionsByHash).map(/*#__PURE__*/function () {\n        var _ref11 = _asyncToGenerator(function* (hash) {\n          const subscription = _this88._subscriptionsByHash[hash];\n          if (subscription === undefined) {\n            // This entry has since been deleted. Skip.\n            return;\n          }\n          switch (subscription.state) {\n            case 'pending':\n            case 'unsubscribed':\n              if (subscription.callbacks.size === 0) {\n                /**\n                 * You can end up here when:\n                 *\n                 * - a subscription has recently unsubscribed\n                 *   without having new callbacks added to it\n                 *   while the unsubscribe was in flight, or\n                 * - when a pending subscription has its\n                 *   listeners removed before a request was\n                 *   sent to the server.\n                 *\n                 * Being that nobody is interested in this\n                 * subscription any longer, delete it.\n                 */\n                delete _this88._subscriptionsByHash[hash];\n                if (subscription.state === 'unsubscribed') {\n                  delete _this88._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                }\n                yield _this88._updateSubscriptions();\n                return;\n              }\n              yield _asyncToGenerator(function* () {\n                const {\n                  args,\n                  method\n                } = subscription;\n                try {\n                  _this88._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribing'\n                  });\n                  const serverSubscriptionId = yield _this88._rpcWebSocket.call(method, args);\n                  _this88._setSubscription(hash, {\n                    ...subscription,\n                    serverSubscriptionId,\n                    state: 'subscribed'\n                  });\n                  _this88._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n                  yield _this88._updateSubscriptions();\n                } catch (e) {\n                  console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                    args,\n                    error: e\n                  });\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  _this88._setSubscription(hash, {\n                    ...subscription,\n                    state: 'pending'\n                  });\n                  yield _this88._updateSubscriptions();\n                }\n              })();\n              break;\n            case 'subscribed':\n              if (subscription.callbacks.size === 0) {\n                // By the time we successfully set up a subscription\n                // with the server, the client stopped caring about it.\n                // Tear it down now.\n                yield _asyncToGenerator(function* () {\n                  const {\n                    serverSubscriptionId,\n                    unsubscribeMethod\n                  } = subscription;\n                  if (_this88._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                    /**\n                     * Special case.\n                     * If we're dealing with a subscription that has been auto-\n                     * disposed by the RPC, then we can skip the RPC call to\n                     * tear down the subscription here.\n                     *\n                     * NOTE: There is a proposal to eliminate this special case, here:\n                     * https://github.com/solana-labs/solana/issues/18892\n                     */\n                    _this88._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n                  } else {\n                    _this88._setSubscription(hash, {\n                      ...subscription,\n                      state: 'unsubscribing'\n                    });\n                    _this88._setSubscription(hash, {\n                      ...subscription,\n                      state: 'unsubscribing'\n                    });\n                    try {\n                      yield _this88._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                    } catch (e) {\n                      if (e instanceof Error) {\n                        console.error(`${unsubscribeMethod} error:`, e.message);\n                      }\n                      if (!isCurrentConnectionStillActive()) {\n                        return;\n                      }\n                      // TODO: Maybe add an 'errored' state or a retry limit?\n                      _this88._setSubscription(hash, {\n                        ...subscription,\n                        state: 'subscribed'\n                      });\n                      yield _this88._updateSubscriptions();\n                      return;\n                    }\n                  }\n                  _this88._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribed'\n                  });\n                  yield _this88._updateSubscriptions();\n                })();\n              }\n              break;\n          }\n        });\n        return function (_x10) {\n          return _ref11.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    var _this89 = this;\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator(function* () {\n      delete _this89._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete _this89._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = _this89._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      yield _this89._updateSubscriptions();\n    });\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeAccountChangeListener(clientSubscriptionId) {\n    var _this90 = this;\n    return _asyncToGenerator(function* () {\n      yield _this90._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeProgramAccountChangeListener(clientSubscriptionId) {\n    var _this91 = this;\n    return _asyncToGenerator(function* () {\n      yield _this91._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n    })();\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  removeOnLogsListener(clientSubscriptionId) {\n    var _this92 = this;\n    return _asyncToGenerator(function* () {\n      yield _this92._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeSlotChangeListener(clientSubscriptionId) {\n    var _this93 = this;\n    return _asyncToGenerator(function* () {\n      yield _this93._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeSlotUpdateListener(clientSubscriptionId) {\n    var _this94 = this;\n    return _asyncToGenerator(function* () {\n      yield _this94._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n    })();\n  }\n\n  /**\n   * @internal\n   */\n\n  _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    var _this95 = this;\n    return _asyncToGenerator(function* () {\n      const dispose = _this95._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      if (dispose) {\n        yield dispose();\n      } else {\n        console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n      }\n    })();\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeSignatureListener(clientSubscriptionId) {\n    var _this96 = this;\n    return _asyncToGenerator(function* () {\n      yield _this96._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n    })();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  removeRootChangeListener(clientSubscriptionId) {\n    var _this97 = this;\n    return _asyncToGenerator(function* () {\n      yield _this97._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n    })();\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), getU64Encoder().encode(params.recentSlot)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nfunction sendAndConfirmRawTransaction(_x11, _x12, _x13, _x14) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n/**\n * There are 1-billion lamports in one SOL\n */\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator(function* (connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    let confirmationStrategy;\n    let options;\n    if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n      confirmationStrategy = confirmationStrategyOrConfirmOptions;\n      options = maybeConfirmOptions;\n    } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n      confirmationStrategy = confirmationStrategyOrConfirmOptions;\n      options = maybeConfirmOptions;\n    } else {\n      options = confirmationStrategyOrConfirmOptions;\n    }\n    const sendOptions = options && {\n      skipPreflight: options.skipPreflight,\n      preflightCommitment: options.preflightCommitment || options.commitment,\n      minContextSlot: options.minContextSlot\n    };\n    const signature = yield connection.sendRawTransaction(rawTransaction, sendOptions);\n    const commitment = options && options.commitment;\n    const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n    const status = (yield confirmationPromise).value;\n    if (status.err) {\n      if (signature != null) {\n        throw new SendTransactionError({\n          action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n          signature: signature,\n          transactionMessage: `Status: (${JSON.stringify(status)})`\n        });\n      }\n      throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n    }\n    return signature;\n  });\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["Buffer","ed25519","BN","bs58","sha256","serialize","deserialize","deserializeUnchecked","BufferLayout","blob","getU64Codec","getU64Encoder","coerce","instance","string","tuple","literal","unknown","type","number","array","nullable","optional","boolean","record","union","create","any","assert","assert$1","RpcClient","CommonClient","WebSocket","keccak_256","secp256k1","generatePrivateKey","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","SOLANA_SCHEMA","decode","data","decodeUnchecked","Enum","enum","keys","length","Error","map","key","Map","_PublicKey","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","_asyncToGenerator","concat","publicKeyBytes","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","_this","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","_this2","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","_this3","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","a","transactionLogs","transactionError","cachedLogs","getLogs","_this4","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","sendAndConfirmTransaction","_x","_x2","_x3","_x4","_sendAndConfirmTransaction","apply","arguments","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","bigIntLayout","codec","src","bigInt","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","getDefaultExportFromCjs","__esModule","fastStableStringify$1","hasRequiredFastStableStringify","requireFastStableStringify","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","returnVal","fastStableStringifyExports","fastStableStringify","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","generate_request_id","webSocketFactory","url","rpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","notify","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","result","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","_ref","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","_x5","_x6","clientBrowser","_ref2","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","statusText","text","ok","_x7","_x8","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","_this5","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_ref3","_buildArgs","requestHash","unsafeRes","_x9","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_this6","getBalance","_this7","e","getBlockTime","_this8","getMinimumLedgerSlot","_this9","getFirstAvailableBlock","_this10","getSupply","_this11","configArg","getTokenSupply","tokenMintAddress","_this12","getTokenAccountBalance","tokenAddress","_this13","getTokenAccountsByOwner","ownerAddress","_this14","_args","getParsedTokenAccountsByOwner","_this15","getLargestAccounts","_this16","arg","getTokenLargestAccounts","mintAddress","_this17","getAccountInfoAndContext","_this18","getParsedAccountInfo","_this19","_this20","getMultipleParsedAccounts","publicKeys","rawConfig","_this21","getMultipleAccountsInfoAndContext","_this22","getMultipleAccountsInfo","_this23","getStakeActivation","_this24","getProgramAccounts","configOrCommitment","_this25","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","_this26","strategy","_this27","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_this28","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","_this29","expiryPromise","checkBlockHeight","_ref6","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_this30","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref8","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","_this31","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","_this32","getVoteAccounts","_this33","_this34","getSlotLeader","_this35","getSlotLeaders","startSlot","limit","_this36","_this37","getSignatureStatuses","_this38","getTransactionCount","_this39","getTotalSupply","_this40","excludeNonCirculatingAccountsList","getInflationGovernor","_this41","getInflationReward","_this42","getInflationRate","_this43","getEpochInfo","_this44","getEpochSchedule","_this45","epochSchedule","getLeaderSchedule","_this46","_this47","getRecentBlockhashAndContext","_this48","getLatestBlockhashAndContext","getRecentPerformanceSamples","_this49","getFeeCalculatorForBlockhash","_this50","_this51","wireMessage","getRecentPrioritizationFees","_this52","lockedWritableAccounts","getRecentBlockhash","_this53","getLatestBlockhash","_this54","_this55","isBlockhashValid","_this56","getVersion","_this57","getGenesisHash","_this58","getBlock","_this59","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","_this60","getBlockProduction","_this61","extra","c","_this62","getParsedTransaction","_this63","getParsedTransactions","_this64","getTransactions","_this65","getConfirmedBlock","_this66","block","getBlocks","endSlot","_this67","getBlockSignatures","_this68","getConfirmedBlockSignatures","_this69","getConfirmedTransaction","_this70","getParsedConfirmedTransaction","_this71","getParsedConfirmedTransactions","_this72","getConfirmedSignaturesForAddress","_this73","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","_this74","getSignaturesForAddress","_this75","getAddressLookupTable","_this76","accountInfo","_this77","getNonce","_this78","requestAirdrop","to","_this79","_blockhashWithExpiryBlockHeight","disableCache","_this80","timeSinceFetch","Date","now","expired","_pollNewBlockhash","_this81","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","_this82","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","_this83","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","_this84","sendRawTransaction","rawTransaction","_this85","sendEncodedTransaction","_this86","_this87","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this88","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","_ref11","callbacks","serverSubscriptionId","unsubscribeMethod","_x10","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","_this89","existingSubscription","onAccountChange","removeAccountChangeListener","_this90","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","_this91","onLogs","mentions","removeOnLogsListener","_this92","onSlotChange","removeSlotChangeListener","_this93","onSlotUpdate","removeSlotUpdateListener","_this94","subscriptionName","_this95","dispose","override","_err","onSignatureWithOptions","_this96","onRootChange","removeRootChangeListener","_this97","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","_Lockup","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","_x11","_x12","_x13","_x14","_sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@solana/web3.js/lib/index.browser.esm.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { getU64Codec, getU64Encoder } from '@solana/codecs-numbers';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nfunction u64(property) {\n  const layout = blob(8 /* bytes */, property);\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  const bigIntLayout = layout;\n  const codec = getU64Codec();\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return codec.decode(src);\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = codec.encode(bigInt);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\n\nfunction requireFastStableStringify () {\n\tif (hasRequiredFastStableStringify) return fastStableStringify$1;\n\thasRequiredFastStableStringify = 1;\n\tvar objToString = Object.prototype.toString;\n\tvar objKeys = Object.keys || function(obj) {\n\t\t\tvar keys = [];\n\t\t\tfor (var name in obj) {\n\t\t\t\tkeys.push(name);\n\t\t\t}\n\t\t\treturn keys;\n\t\t};\n\n\tfunction stringify(val, isArrayProp) {\n\t\tvar i, max, str, keys, key, propVal, toStr;\n\t\tif (val === true) {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (val === false) {\n\t\t\treturn \"false\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t\t} else {\n\t\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\t\tstr = '[';\n\t\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + ']';\n\t\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t\t// only object is left\n\t\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\t\tmax = keys.length;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"function\":\n\t\t\tcase \"undefined\":\n\t\t\t\treturn isArrayProp ? null : undefined;\n\t\t\tcase \"string\":\n\t\t\t\treturn JSON.stringify(val);\n\t\t\tdefault:\n\t\t\t\treturn isFinite(val) ? val : null;\n\t\t}\n\t}\n\n\tfastStableStringify$1 = function(val) {\n\t\tvar returnVal = stringify(val, false);\n\t\tif (returnVal !== undefined) {\n\t\t\treturn ''+ returnVal;\n\t\t}\n\t};\n\treturn fastStableStringify$1;\n}\n\nvar fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.0.0-maintenance\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const {\n      context,\n      value: {\n        blockhash\n      }\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature() {\n        throw new Error('The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' + 'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' + 'for a given message.');\n      },\n      toJSON() {\n        return {};\n      }\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator\n      }\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                args,\n                error: e\n              });\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), getU64Encoder().encode(params.recentSlot)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,OAAOC,EAAE,MAAM,OAAO;AACtB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,SAAS,EAAEC,WAAW,EAAEC,oBAAoB,QAAQ,OAAO;AACpE,OAAO,KAAKC,YAAY,MAAM,uBAAuB;AACrD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,WAAW,EAAEC,aAAa,QAAQ,wBAAwB;AACnE,SAASC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,IAAIC,QAAQ,QAAQ,aAAa;AACjL,OAAOC,SAAS,MAAM,2BAA2B;AACjD,SAASC,YAAY,EAAEC,SAAS,QAAQ,gBAAgB;AACxD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,SAAS,QAAQ,yBAAyB;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAGlC,OAAO,CAACmC,KAAK,CAACC,gBAAgB;AACzD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,aAAa,GAAGtC,OAAO,CAACmC,KAAK,CAACC,gBAAgB,CAAC,CAAC;EACtD,MAAMG,SAAS,GAAGC,YAAY,CAACF,aAAa,CAAC;EAC7C,MAAMG,SAAS,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;EACpCD,SAAS,CAACE,GAAG,CAACL,aAAa,CAAC;EAC5BG,SAAS,CAACE,GAAG,CAACJ,SAAS,EAAE,EAAE,CAAC;EAC5B,OAAO;IACLA,SAAS;IACTE;EACF,CAAC;AACH,CAAC;AACD,MAAMD,YAAY,GAAGxC,OAAO,CAACwC,YAAY;AACzC,SAASI,SAASA,CAACL,SAAS,EAAE;EAC5B,IAAI;IACFvC,OAAO,CAAC6C,aAAa,CAACC,OAAO,CAACP,SAAS,CAAC;IACxC,OAAO,IAAI;EACb,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF;AACA,MAAMQ,IAAI,GAAGA,CAACC,OAAO,EAAEP,SAAS,KAAKzC,OAAO,CAAC+C,IAAI,CAACC,OAAO,EAAEP,SAAS,CAACQ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAClF,MAAMC,MAAM,GAAGlD,OAAO,CAACkD,MAAM;AAE7B,MAAMC,QAAQ,GAAGC,GAAG,IAAI;EACtB,IAAIrD,MAAM,CAACsD,QAAQ,CAACD,GAAG,CAAC,EAAE;IACxB,OAAOA,GAAG;EACZ,CAAC,MAAM,IAAIA,GAAG,YAAYV,UAAU,EAAE;IACpC,OAAO3C,MAAM,CAACuD,IAAI,CAACF,GAAG,CAACG,MAAM,EAAEH,GAAG,CAACI,UAAU,EAAEJ,GAAG,CAACK,UAAU,CAAC;EAChE,CAAC,MAAM;IACL,OAAO1D,MAAM,CAACuD,IAAI,CAACF,GAAG,CAAC;EACzB;AACF,CAAC;;AAED;AACA,MAAMM,MAAM,CAAC;EACXC,WAAWA,CAACC,UAAU,EAAE;IACtBC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,UAAU,CAAC;EACjC;EACAG,MAAMA,CAAA,EAAG;IACP,OAAOhE,MAAM,CAACuD,IAAI,CAAClD,SAAS,CAAC4D,aAAa,EAAE,IAAI,CAAC,CAAC;EACpD;EACA,OAAOC,MAAMA,CAACC,IAAI,EAAE;IAClB,OAAO7D,WAAW,CAAC2D,aAAa,EAAE,IAAI,EAAEE,IAAI,CAAC;EAC/C;EACA,OAAOC,eAAeA,CAACD,IAAI,EAAE;IAC3B,OAAO5D,oBAAoB,CAAC0D,aAAa,EAAE,IAAI,EAAEE,IAAI,CAAC;EACxD;AACF;;AAEA;AACA;AACA,MAAME,IAAI,SAASV,MAAM,CAAC;EACxBC,WAAWA,CAACC,UAAU,EAAE;IACtB,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACS,IAAI,GAAG,EAAE;IACd,IAAIR,MAAM,CAACS,IAAI,CAACV,UAAU,CAAC,CAACW,MAAM,KAAK,CAAC,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IACAX,MAAM,CAACS,IAAI,CAACV,UAAU,CAAC,CAACa,GAAG,CAACC,GAAG,IAAI;MACjC,IAAI,CAACL,IAAI,GAAGK,GAAG;IACjB,CAAC,CAAC;EACJ;AACF;AACA,MAAMV,aAAa,GAAG,IAAIW,GAAG,CAAC,CAAC;AAE/B,IAAIC,UAAU;;AAEd;AACA;AACA;AACA,MAAMC,eAAe,GAAG,EAAE;;AAE1B;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,EAAE;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC9B,OAAOA,KAAK,CAACC,GAAG,KAAKC,SAAS;AAChC;;AAEA;AACA,IAAIC,sBAAsB,GAAG,CAAC;;AAE9B;AACA;AACA;AACA,MAAMC,SAAS,SAAS1B,MAAM,CAAC;EAC7B;AACF;AACA;AACA;EACEC,WAAWA,CAACqB,KAAK,EAAE;IACjB,KAAK,CAAC,CAAC,CAAC,CAAC;IACT;IACA,IAAI,CAACC,GAAG,GAAG,KAAK,CAAC;IACjB,IAAIF,eAAe,CAACC,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACC,GAAG,GAAGD,KAAK,CAACC,GAAG;IACtB,CAAC,MAAM;MACL,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC7B;QACA,MAAMK,OAAO,GAAGnF,IAAI,CAAC+D,MAAM,CAACe,KAAK,CAAC;QAClC,IAAIK,OAAO,CAACd,MAAM,IAAIO,iBAAiB,EAAE;UACvC,MAAM,IAAIN,KAAK,CAAC,0BAA0B,CAAC;QAC7C;QACA,IAAI,CAACS,GAAG,GAAG,IAAIhF,EAAE,CAACoF,OAAO,CAAC;MAC5B,CAAC,MAAM;QACL,IAAI,CAACJ,GAAG,GAAG,IAAIhF,EAAE,CAAC+E,KAAK,CAAC;MAC1B;MACA,IAAI,IAAI,CAACC,GAAG,CAACxB,UAAU,CAAC,CAAC,GAAGqB,iBAAiB,EAAE;QAC7C,MAAM,IAAIN,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF;EACF;;EAEA;AACF;AACA;EACE,OAAOc,MAAMA,CAAA,EAAG;IACd,MAAMZ,GAAG,GAAG,IAAIU,SAAS,CAACD,sBAAsB,CAAC;IACjDA,sBAAsB,IAAI,CAAC;IAC3B,OAAO,IAAIC,SAAS,CAACV,GAAG,CAACvB,QAAQ,CAAC,CAAC,CAAC;EACtC;;EAEA;AACF;AACA;AACA;;EAEE;AACF;AACA;EACEoC,MAAMA,CAAChD,SAAS,EAAE;IAChB,OAAO,IAAI,CAAC0C,GAAG,CAACO,EAAE,CAACjD,SAAS,CAAC0C,GAAG,CAAC;EACnC;;EAEA;AACF;AACA;EACEQ,QAAQA,CAAA,EAAG;IACT,OAAOvF,IAAI,CAAC6D,MAAM,CAAC,IAAI,CAAC2B,OAAO,CAAC,CAAC,CAAC;EACpC;EACAC,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACF,QAAQ,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,MAAME,GAAG,GAAG,IAAI,CAACzC,QAAQ,CAAC,CAAC;IAC3B,OAAO,IAAIT,UAAU,CAACkD,GAAG,CAACrC,MAAM,EAAEqC,GAAG,CAACpC,UAAU,EAAEoC,GAAG,CAACnC,UAAU,CAAC;EACnE;;EAEA;AACF;AACA;EACEN,QAAQA,CAAA,EAAG;IACT,MAAM0C,CAAC,GAAG,IAAI,CAACZ,GAAG,CAACa,WAAW,CAAC/F,MAAM,CAAC;IACtC,IAAI8F,CAAC,CAACtB,MAAM,KAAKO,iBAAiB,EAAE;MAClC,OAAOe,CAAC;IACV;IACA,MAAME,OAAO,GAAGhG,MAAM,CAACiG,KAAK,CAAC,EAAE,CAAC;IAChCH,CAAC,CAACI,IAAI,CAACF,OAAO,EAAE,EAAE,GAAGF,CAAC,CAACtB,MAAM,CAAC;IAC9B,OAAOwB,OAAO;EAChB;EACA,KAAKG,MAAM,CAACC,WAAW,IAAI;IACzB,OAAO,aAAa,IAAI,CAACC,QAAQ,CAAC,CAAC,GAAG;EACxC;;EAEA;AACF;AACA;EACEA,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACX,QAAQ,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACE;EACA,OAAaY,cAAcA,CAACC,aAAa,EAAEC,IAAI,EAAEC,SAAS,EAAE;IAAA,OAAAC,iBAAA;MAC1D,MAAMlD,MAAM,GAAGxD,MAAM,CAAC2G,MAAM,CAAC,CAACJ,aAAa,CAACnD,QAAQ,CAAC,CAAC,EAAEpD,MAAM,CAACuD,IAAI,CAACiD,IAAI,CAAC,EAAEC,SAAS,CAACrD,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjG,MAAMwD,cAAc,GAAGxG,MAAM,CAACoD,MAAM,CAAC;MACrC,OAAO,IAAI6B,SAAS,CAACuB,cAAc,CAAC;IAAC;EACvC;;EAEA;AACF;AACA;EACE;EACA,OAAOC,wBAAwBA,CAACC,KAAK,EAAEL,SAAS,EAAE;IAChD,IAAIjD,MAAM,GAAGxD,MAAM,CAACiG,KAAK,CAAC,CAAC,CAAC;IAC5Ba,KAAK,CAACC,OAAO,CAAC,UAAUP,IAAI,EAAE;MAC5B,IAAIA,IAAI,CAAChC,MAAM,GAAGM,eAAe,EAAE;QACjC,MAAM,IAAIkC,SAAS,CAAC,0BAA0B,CAAC;MACjD;MACAxD,MAAM,GAAGxD,MAAM,CAAC2G,MAAM,CAAC,CAACnD,MAAM,EAAEJ,QAAQ,CAACoD,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;IACFhD,MAAM,GAAGxD,MAAM,CAAC2G,MAAM,CAAC,CAACnD,MAAM,EAAEiD,SAAS,CAACrD,QAAQ,CAAC,CAAC,EAAEpD,MAAM,CAACuD,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAC5F,MAAMqD,cAAc,GAAGxG,MAAM,CAACoD,MAAM,CAAC;IACrC,IAAIX,SAAS,CAAC+D,cAAc,CAAC,EAAE;MAC7B,MAAM,IAAInC,KAAK,CAAC,gDAAgD,CAAC;IACnE;IACA,OAAO,IAAIY,SAAS,CAACuB,cAAc,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE;EACA,OAAaK,oBAAoBA,CAACH,KAAK,EAAEL,SAAS,EAAE;IAAA,IAAAS,KAAA;IAAA,OAAAR,iBAAA;MAClD,OAAOQ,KAAI,CAACL,wBAAwB,CAACC,KAAK,EAAEL,SAAS,CAAC;IAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOU,sBAAsBA,CAACL,KAAK,EAAEL,SAAS,EAAE;IAC9C,IAAIW,KAAK,GAAG,GAAG;IACf,IAAIC,OAAO;IACX,OAAOD,KAAK,IAAI,CAAC,EAAE;MACjB,IAAI;QACF,MAAME,cAAc,GAAGR,KAAK,CAACH,MAAM,CAAC3G,MAAM,CAACuD,IAAI,CAAC,CAAC6D,KAAK,CAAC,CAAC,CAAC;QACzDC,OAAO,GAAG,IAAI,CAACR,wBAAwB,CAACS,cAAc,EAAEb,SAAS,CAAC;MACpE,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZ,IAAIA,GAAG,YAAYP,SAAS,EAAE;UAC5B,MAAMO,GAAG;QACX;QACAH,KAAK,EAAE;QACP;MACF;MACA,OAAO,CAACC,OAAO,EAAED,KAAK,CAAC;IACzB;IACA,MAAM,IAAI3C,KAAK,CAAC,+CAA+C,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAa+C,kBAAkBA,CAACV,KAAK,EAAEL,SAAS,EAAE;IAAA,IAAAgB,MAAA;IAAA,OAAAf,iBAAA;MAChD,OAAOe,MAAI,CAACN,sBAAsB,CAACL,KAAK,EAAEL,SAAS,CAAC;IAAC;EACvD;;EAEA;AACF;AACA;EACE,OAAO5D,SAASA,CAAC6E,UAAU,EAAE;IAC3B,MAAMC,MAAM,GAAG,IAAItC,SAAS,CAACqC,UAAU,CAAC;IACxC,OAAO7E,SAAS,CAAC8E,MAAM,CAAChC,OAAO,CAAC,CAAC,CAAC;EACpC;AACF;AACAd,UAAU,GAAGQ,SAAS;AACtBA,SAAS,CAACuC,OAAO,GAAG,IAAI/C,UAAU,CAAC,kCAAkC,CAAC;AACtEZ,aAAa,CAACrB,GAAG,CAACyC,SAAS,EAAE;EAC3BwC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEnE,WAAWA,CAAClB,SAAS,EAAE;IACrB;IACA,IAAI,CAACsF,UAAU,GAAG,KAAK,CAAC;IACxB;IACA,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAIvF,SAAS,EAAE;MACb,MAAMwF,eAAe,GAAG9E,QAAQ,CAACV,SAAS,CAAC;MAC3C,IAAIA,SAAS,CAAC8B,MAAM,KAAK,EAAE,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,IAAI,CAACuD,UAAU,GAAGE,eAAe,CAAChF,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;MAC/C,IAAI,CAAC+E,UAAU,GAAGC,eAAe,CAAChF,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAChD,CAAC,MAAM;MACL,IAAI,CAAC+E,UAAU,GAAG7E,QAAQ,CAACjB,kBAAkB,CAAC,CAAC,CAAC;MAChD,IAAI,CAAC6F,UAAU,GAAG5E,QAAQ,CAACX,YAAY,CAAC,IAAI,CAACwF,UAAU,CAAC,CAAC;IAC3D;EACF;;EAEA;AACF;AACA;EACE,IAAIzF,SAASA,CAAA,EAAG;IACd,OAAO,IAAI6C,SAAS,CAAC,IAAI,CAAC2C,UAAU,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAItF,SAASA,CAAA,EAAG;IACd,OAAO1C,MAAM,CAAC2G,MAAM,CAAC,CAAC,IAAI,CAACsB,UAAU,EAAE,IAAI,CAACD,UAAU,CAAC,EAAE,EAAE,CAAC;EAC9D;AACF;AAEA,MAAMG,gCAAgC,GAAG,IAAI9C,SAAS,CAAC,6CAA6C,CAAC;;AAErG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+C,gBAAgB,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC;AACtC,MAAMC,mBAAmB,GAAG,IAAI;AAChC,MAAMC,yBAAyB,GAAG,EAAE;AAEpC,MAAMC,0CAA0C,SAAS9D,KAAK,CAAC;EAC7Db,WAAWA,CAAC4E,SAAS,EAAE;IACrB,KAAK,CAAC,aAAaA,SAAS,sCAAsC,CAAC;IACnE,IAAI,CAACA,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;AACF;AACA1E,MAAM,CAAC2E,cAAc,CAACF,0CAA0C,CAACG,SAAS,EAAE,MAAM,EAAE;EAClFzD,KAAK,EAAE;AACT,CAAC,CAAC;AACF,MAAM0D,8BAA8B,SAASlE,KAAK,CAAC;EACjDb,WAAWA,CAAC4E,SAAS,EAAEI,cAAc,EAAE;IACrC,KAAK,CAAC,oCAAoCA,cAAc,CAACC,OAAO,CAAC,CAAC,CAAC,kBAAkB,GAAG,qDAAqD,GAAG,GAAGL,SAAS,0CAA0C,CAAC;IACvM,IAAI,CAACA,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;AACF;AACA1E,MAAM,CAAC2E,cAAc,CAACE,8BAA8B,CAACD,SAAS,EAAE,MAAM,EAAE;EACtEzD,KAAK,EAAE;AACT,CAAC,CAAC;AACF,MAAM6D,mCAAmC,SAASrE,KAAK,CAAC;EACtDb,WAAWA,CAAC4E,SAAS,EAAE;IACrB,KAAK,CAAC,aAAaA,SAAS,6CAA6C,CAAC;IAC1E,IAAI,CAACA,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;AACF;AACA1E,MAAM,CAAC2E,cAAc,CAACK,mCAAmC,CAACJ,SAAS,EAAE,MAAM,EAAE;EAC3EzD,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAM8D,kBAAkB,CAAC;EACvBnF,WAAWA,CAACoF,iBAAiB,EAAEC,sBAAsB,EAAE;IACrD,IAAI,CAACD,iBAAiB,GAAG,KAAK,CAAC;IAC/B,IAAI,CAACC,sBAAsB,GAAG,KAAK,CAAC;IACpC,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;EACtD;EACAC,WAAWA,CAAA,EAAG;IACZ,MAAMA,WAAW,GAAG,CAAC,IAAI,CAACF,iBAAiB,CAAC;IAC5C,IAAI,IAAI,CAACC,sBAAsB,EAAE;MAC/BC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACF,sBAAsB,CAACG,QAAQ,CAAC;MACtDF,WAAW,CAACC,IAAI,CAAC,IAAI,CAACF,sBAAsB,CAACI,QAAQ,CAAC;IACxD;IACA,OAAOH,WAAW;EACpB;EACAI,GAAGA,CAACC,KAAK,EAAE;IACT,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACN,WAAW,CAAC,CAAC,EAAE;MAC3C,IAAIK,KAAK,GAAGC,UAAU,CAAChF,MAAM,EAAE;QAC7B,OAAOgF,UAAU,CAACD,KAAK,CAAC;MAC1B,CAAC,MAAM;QACLA,KAAK,IAAIC,UAAU,CAAChF,MAAM;MAC5B;IACF;IACA;EACF;EACA,IAAIA,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC0E,WAAW,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC,CAACjF,MAAM;EACzC;EACAkF,mBAAmBA,CAACC,YAAY,EAAE;IAChC;IACA,MAAMC,MAAM,GAAG,GAAG;IAClB,IAAI,IAAI,CAACpF,MAAM,GAAGoF,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAM,IAAInF,KAAK,CAAC,uDAAuD,CAAC;IAC1E;IACA,MAAMoF,WAAW,GAAG,IAAIjF,GAAG,CAAC,CAAC;IAC7B,IAAI,CAACsE,WAAW,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC1C,OAAO,CAAC,CAACpC,GAAG,EAAE4E,KAAK,KAAK;MAChDM,WAAW,CAACjH,GAAG,CAAC+B,GAAG,CAACe,QAAQ,CAAC,CAAC,EAAE6D,KAAK,CAAC;IACxC,CAAC,CAAC;IACF,MAAMO,YAAY,GAAGnF,GAAG,IAAI;MAC1B,MAAMoF,QAAQ,GAAGF,WAAW,CAACP,GAAG,CAAC3E,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;MAChD,IAAIqE,QAAQ,KAAK5E,SAAS,EAAE,MAAM,IAAIV,KAAK,CAAC,mEAAmE,CAAC;MAChH,OAAOsF,QAAQ;IACjB,CAAC;IACD,OAAOJ,YAAY,CAACjF,GAAG,CAACsF,WAAW,IAAI;MACrC,OAAO;QACLC,cAAc,EAAEH,YAAY,CAACE,WAAW,CAACvD,SAAS,CAAC;QACnDyD,iBAAiB,EAAEF,WAAW,CAACzF,IAAI,CAACG,GAAG,CAACyF,IAAI,IAAIL,YAAY,CAACK,IAAI,CAACxC,MAAM,CAAC,CAAC;QAC1ExD,IAAI,EAAE6F,WAAW,CAAC7F;MACpB,CAAC;IACH,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA,MAAM3B,SAAS,GAAGA,CAAC4H,QAAQ,GAAG,WAAW,KAAK;EAC5C,OAAO5J,YAAY,CAACC,IAAI,CAAC,EAAE,EAAE2J,QAAQ,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,MAAM5B,SAAS,GAAGA,CAAC4B,QAAQ,GAAG,WAAW,KAAK;EAC5C,OAAO5J,YAAY,CAACC,IAAI,CAAC,EAAE,EAAE2J,QAAQ,CAAC;AACxC,CAAC;AACD;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAACD,QAAQ,GAAG,QAAQ,KAAK;EAC1C,MAAME,GAAG,GAAG9J,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,QAAQ,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,eAAe,CAAC,EAAEhK,YAAY,CAACC,IAAI,CAACD,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAEJ,QAAQ,CAAC;EACnL,MAAMM,OAAO,GAAGJ,GAAG,CAACpG,MAAM,CAACyG,IAAI,CAACL,GAAG,CAAC;EACpC,MAAMM,OAAO,GAAGN,GAAG,CAACtG,MAAM,CAAC2G,IAAI,CAACL,GAAG,CAAC;EACpC,MAAMO,OAAO,GAAGP,GAAG;EACnBO,OAAO,CAAC3G,MAAM,GAAG,CAAC4B,CAAC,EAAE2E,MAAM,KAAK;IAC9B,MAAMtG,IAAI,GAAGuG,OAAO,CAAC5E,CAAC,EAAE2E,MAAM,CAAC;IAC/B,OAAOtG,IAAI,CAAC,OAAO,CAAC,CAACkC,QAAQ,CAAC,CAAC;EACjC,CAAC;EACDwE,OAAO,CAAC7G,MAAM,GAAG,CAAC8G,GAAG,EAAEhF,CAAC,EAAE2E,MAAM,KAAK;IACnC,MAAMtG,IAAI,GAAG;MACX4G,KAAK,EAAE/K,MAAM,CAACuD,IAAI,CAACuH,GAAG,EAAE,MAAM;IAChC,CAAC;IACD,OAAOF,OAAO,CAACzG,IAAI,EAAE2B,CAAC,EAAE2E,MAAM,CAAC;EACjC,CAAC;EACDI,OAAO,CAAC5E,KAAK,GAAG6E,GAAG,IAAI;IACrB,OAAOtK,YAAY,CAACgK,GAAG,CAAC,CAAC,CAACQ,IAAI,GAAGxK,YAAY,CAACgK,GAAG,CAAC,CAAC,CAACQ,IAAI,GAAGhL,MAAM,CAACuD,IAAI,CAACuH,GAAG,EAAE,MAAM,CAAC,CAACtG,MAAM;EAC5F,CAAC;EACD,OAAOqG,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA,MAAMI,UAAU,GAAGA,CAACb,QAAQ,GAAG,YAAY,KAAK;EAC9C,OAAO5J,YAAY,CAAC+J,MAAM,CAAC,CAAC/H,SAAS,CAAC,QAAQ,CAAC,EAAEA,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE4H,QAAQ,CAAC;AACtF,CAAC;;AAED;AACA;AACA;AACA,MAAMc,MAAM,GAAGA,CAACd,QAAQ,GAAG,QAAQ,KAAK;EACtC,OAAO5J,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC2K,IAAI,CAAC,eAAe,CAAC,EAAE3K,YAAY,CAAC2K,IAAI,CAAC,OAAO,CAAC,EAAE3I,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE4H,QAAQ,CAAC;AAChI,CAAC;;AAED;AACA;AACA;AACA,MAAMgB,QAAQ,GAAGA,CAAChB,QAAQ,GAAG,UAAU,KAAK;EAC1C,OAAO5J,YAAY,CAAC+J,MAAM,CAAC,CAAC/H,SAAS,CAAC,YAAY,CAAC,EAAEA,SAAS,CAAC,iBAAiB,CAAC,EAAEA,SAAS,CAAC,sBAAsB,CAAC,EAAEhC,YAAY,CAAC6K,EAAE,CAAC,YAAY,CAAC,CAAC,EAAEjB,QAAQ,CAAC;AACjK,CAAC;;AAED;AACA;AACA;AACA,MAAMkB,yBAAyB,GAAGA,CAAClB,QAAQ,GAAG,2BAA2B,KAAK;EAC5E,OAAO5J,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,uBAAuB,CAAC,EAAEhI,SAAS,CAAC,uCAAuC,CAAC,EAAE6H,UAAU,CAAC,gCAAgC,CAAC,EAAE7H,SAAS,CAAC,eAAe,CAAC,CAAC,EAAE4H,QAAQ,CAAC;AACjN,CAAC;AACD,SAASmB,QAAQA,CAACrK,IAAI,EAAE4G,MAAM,EAAE;EAC9B,MAAM0D,YAAY,GAAGC,IAAI,IAAI;IAC3B,IAAIA,IAAI,CAACT,IAAI,IAAI,CAAC,EAAE;MAClB,OAAOS,IAAI,CAACT,IAAI;IAClB,CAAC,MAAM,IAAI,OAAOS,IAAI,CAACxF,KAAK,KAAK,UAAU,EAAE;MAC3C,OAAOwF,IAAI,CAACxF,KAAK,CAAC6B,MAAM,CAAC2D,IAAI,CAACrB,QAAQ,CAAC,CAAC;IAC1C,CAAC,MAAM,IAAI,OAAO,IAAIqB,IAAI,IAAI,eAAe,IAAIA,IAAI,EAAE;MACrD,MAAMC,KAAK,GAAG5D,MAAM,CAAC2D,IAAI,CAACrB,QAAQ,CAAC;MACnC,IAAIuB,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QACxB,OAAOA,KAAK,CAAClH,MAAM,GAAGgH,YAAY,CAACC,IAAI,CAACI,aAAa,CAAC;MACxD;IACF,CAAC,MAAM,IAAI,QAAQ,IAAIJ,IAAI,EAAE;MAC3B;MACA,OAAOF,QAAQ,CAAC;QACdO,MAAM,EAAEL;MACV,CAAC,EAAE3D,MAAM,CAAC2D,IAAI,CAACrB,QAAQ,CAAC,CAAC;IAC3B;IACA;IACA,OAAO,CAAC;EACV,CAAC;EACD,IAAInE,KAAK,GAAG,CAAC;EACb/E,IAAI,CAAC4K,MAAM,CAAChE,MAAM,CAACf,OAAO,CAAC0E,IAAI,IAAI;IACjCxF,KAAK,IAAIuF,YAAY,CAACC,IAAI,CAAC;EAC7B,CAAC,CAAC;EACF,OAAOxF,KAAK;AACd;AAEA,SAAS8F,YAAYA,CAACC,KAAK,EAAE;EAC3B,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI,GAAG,CAAC;EACZ,SAAS;IACP,IAAIC,IAAI,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC;IACxBH,GAAG,IAAI,CAACE,IAAI,GAAG,IAAI,KAAKD,IAAI,GAAG,CAAC;IAChCA,IAAI,IAAI,CAAC;IACT,IAAI,CAACC,IAAI,GAAG,IAAI,MAAM,CAAC,EAAE;MACvB;IACF;EACF;EACA,OAAOF,GAAG;AACZ;AACA,SAASI,YAAYA,CAACL,KAAK,EAAEC,GAAG,EAAE;EAChC,IAAIK,OAAO,GAAGL,GAAG;EACjB,SAAS;IACP,IAAIE,IAAI,GAAGG,OAAO,GAAG,IAAI;IACzBA,OAAO,KAAK,CAAC;IACb,IAAIA,OAAO,IAAI,CAAC,EAAE;MAChBN,KAAK,CAAC7C,IAAI,CAACgD,IAAI,CAAC;MAChB;IACF,CAAC,MAAM;MACLA,IAAI,IAAI,IAAI;MACZH,KAAK,CAAC7C,IAAI,CAACgD,IAAI,CAAC;IAClB;EACF;AACF;AAEA,SAASvK,MAAMA,CAAE2K,SAAS,EAAEtJ,OAAO,EAAE;EACnC,IAAI,CAACsJ,SAAS,EAAE;IACd,MAAM,IAAI9H,KAAK,CAACxB,OAAO,IAAI,kBAAkB,CAAC;EAChD;AACF;AAEA,MAAMuJ,YAAY,CAAC;EACjB5I,WAAWA,CAAC6I,KAAK,EAAEC,UAAU,EAAE;IAC7B,IAAI,CAACD,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EACA,OAAOC,OAAOA,CAAChD,YAAY,EAAE8C,KAAK,EAAE;IAClC,MAAMC,UAAU,GAAG,IAAI9H,GAAG,CAAC,CAAC;IAC5B,MAAMgI,kBAAkB,GAAGjF,MAAM,IAAI;MACnC,MAAMN,OAAO,GAAGM,MAAM,CAACjC,QAAQ,CAAC,CAAC;MACjC,IAAImH,OAAO,GAAGH,UAAU,CAACpD,GAAG,CAACjC,OAAO,CAAC;MACrC,IAAIwF,OAAO,KAAK1H,SAAS,EAAE;QACzB0H,OAAO,GAAG;UACRC,QAAQ,EAAE,KAAK;UACfC,UAAU,EAAE,KAAK;UACjBC,SAAS,EAAE;QACb,CAAC;QACDN,UAAU,CAAC9J,GAAG,CAACyE,OAAO,EAAEwF,OAAO,CAAC;MAClC;MACA,OAAOA,OAAO;IAChB,CAAC;IACD,MAAMI,YAAY,GAAGL,kBAAkB,CAACH,KAAK,CAAC;IAC9CQ,YAAY,CAACH,QAAQ,GAAG,IAAI;IAC5BG,YAAY,CAACF,UAAU,GAAG,IAAI;IAC9B,KAAK,MAAMG,EAAE,IAAIvD,YAAY,EAAE;MAC7BiD,kBAAkB,CAACM,EAAE,CAACzG,SAAS,CAAC,CAACuG,SAAS,GAAG,IAAI;MACjD,KAAK,MAAMG,WAAW,IAAID,EAAE,CAAC3I,IAAI,EAAE;QACjC,MAAMsI,OAAO,GAAGD,kBAAkB,CAACO,WAAW,CAACxF,MAAM,CAAC;QACtDkF,OAAO,CAACC,QAAQ,KAAKK,WAAW,CAACL,QAAQ;QACzCD,OAAO,CAACE,UAAU,KAAKI,WAAW,CAACJ,UAAU;MAC/C;IACF;IACA,OAAO,IAAIP,YAAY,CAACC,KAAK,EAAEC,UAAU,CAAC;EAC5C;EACAU,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,UAAU,GAAG,CAAC,GAAG,IAAI,CAACX,UAAU,CAACY,OAAO,CAAC,CAAC,CAAC;IACjD1L,MAAM,CAACyL,UAAU,CAAC7I,MAAM,IAAI,GAAG,EAAE,yCAAyC,CAAC;IAC3E,MAAM+I,eAAe,GAAGF,UAAU,CAACG,MAAM,CAAC,CAAC,GAAGrD,IAAI,CAAC,KAAKA,IAAI,CAAC2C,QAAQ,IAAI3C,IAAI,CAAC4C,UAAU,CAAC;IACzF,MAAMU,eAAe,GAAGJ,UAAU,CAACG,MAAM,CAAC,CAAC,GAAGrD,IAAI,CAAC,KAAKA,IAAI,CAAC2C,QAAQ,IAAI,CAAC3C,IAAI,CAAC4C,UAAU,CAAC;IAC1F,MAAMW,kBAAkB,GAAGL,UAAU,CAACG,MAAM,CAAC,CAAC,GAAGrD,IAAI,CAAC,KAAK,CAACA,IAAI,CAAC2C,QAAQ,IAAI3C,IAAI,CAAC4C,UAAU,CAAC;IAC7F,MAAMY,kBAAkB,GAAGN,UAAU,CAACG,MAAM,CAAC,CAAC,GAAGrD,IAAI,CAAC,KAAK,CAACA,IAAI,CAAC2C,QAAQ,IAAI,CAAC3C,IAAI,CAAC4C,UAAU,CAAC;IAC9F,MAAMa,MAAM,GAAG;MACbC,qBAAqB,EAAEN,eAAe,CAAC/I,MAAM,GAAGiJ,eAAe,CAACjJ,MAAM;MACtEsJ,yBAAyB,EAAEL,eAAe,CAACjJ,MAAM;MACjDuJ,2BAA2B,EAAEJ,kBAAkB,CAACnJ;IAClD,CAAC;;IAED;IACA;MACE5C,MAAM,CAAC2L,eAAe,CAAC/I,MAAM,GAAG,CAAC,EAAE,2CAA2C,CAAC;MAC/E,MAAM,CAACwJ,YAAY,CAAC,GAAGT,eAAe,CAAC,CAAC,CAAC;MACzC3L,MAAM,CAACoM,YAAY,KAAK,IAAI,CAACvB,KAAK,CAAC/G,QAAQ,CAAC,CAAC,EAAE,wDAAwD,CAAC;IAC1G;IACA,MAAMsD,iBAAiB,GAAG,CAAC,GAAGuE,eAAe,CAAC7I,GAAG,CAAC,CAAC,CAAC2C,OAAO,CAAC,KAAK,IAAIhC,SAAS,CAACgC,OAAO,CAAC,CAAC,EAAE,GAAGoG,eAAe,CAAC/I,GAAG,CAAC,CAAC,CAAC2C,OAAO,CAAC,KAAK,IAAIhC,SAAS,CAACgC,OAAO,CAAC,CAAC,EAAE,GAAGqG,kBAAkB,CAAChJ,GAAG,CAAC,CAAC,CAAC2C,OAAO,CAAC,KAAK,IAAIhC,SAAS,CAACgC,OAAO,CAAC,CAAC,EAAE,GAAGsG,kBAAkB,CAACjJ,GAAG,CAAC,CAAC,CAAC2C,OAAO,CAAC,KAAK,IAAIhC,SAAS,CAACgC,OAAO,CAAC,CAAC,CAAC;IAC5R,OAAO,CAACuG,MAAM,EAAE5E,iBAAiB,CAAC;EACpC;EACAiF,kBAAkBA,CAACC,WAAW,EAAE;IAC9B,MAAM,CAACC,eAAe,EAAEC,mBAAmB,CAAC,GAAG,IAAI,CAACC,2BAA2B,CAACH,WAAW,CAACI,KAAK,CAACC,SAAS,EAAE1B,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACG,SAAS,IAAIH,OAAO,CAACE,UAAU,CAAC;IACtL,MAAM,CAACyB,eAAe,EAAEC,mBAAmB,CAAC,GAAG,IAAI,CAACJ,2BAA2B,CAACH,WAAW,CAACI,KAAK,CAACC,SAAS,EAAE1B,OAAO,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACG,SAAS,IAAI,CAACH,OAAO,CAACE,UAAU,CAAC;;IAEvL;IACA,IAAIoB,eAAe,CAAC3J,MAAM,KAAK,CAAC,IAAIgK,eAAe,CAAChK,MAAM,KAAK,CAAC,EAAE;MAChE;IACF;IACA,OAAO,CAAC;MACNkK,UAAU,EAAER,WAAW,CAACvJ,GAAG;MAC3BwJ,eAAe;MACfK;IACF,CAAC,EAAE;MACDpF,QAAQ,EAAEgF,mBAAmB;MAC7B/E,QAAQ,EAAEoF;IACZ,CAAC,CAAC;EACJ;;EAEA;EACAJ,2BAA2BA,CAACM,kBAAkB,EAAEC,aAAa,EAAE;IAC7D,MAAMC,kBAAkB,GAAG,IAAIlD,KAAK,CAAC,CAAC;IACtC,MAAMmD,WAAW,GAAG,IAAInD,KAAK,CAAC,CAAC;IAC/B,KAAK,MAAM,CAACtE,OAAO,EAAEwF,OAAO,CAAC,IAAI,IAAI,CAACH,UAAU,CAACY,OAAO,CAAC,CAAC,EAAE;MAC1D,IAAIsB,aAAa,CAAC/B,OAAO,CAAC,EAAE;QAC1B,MAAMlI,GAAG,GAAG,IAAIU,SAAS,CAACgC,OAAO,CAAC;QAClC,MAAM0H,gBAAgB,GAAGJ,kBAAkB,CAACK,SAAS,CAACC,KAAK,IAAIA,KAAK,CAACzJ,MAAM,CAACb,GAAG,CAAC,CAAC;QACjF,IAAIoK,gBAAgB,IAAI,CAAC,EAAE;UACzBnN,MAAM,CAACmN,gBAAgB,GAAG,GAAG,EAAE,iCAAiC,CAAC;UACjEF,kBAAkB,CAAC1F,IAAI,CAAC4F,gBAAgB,CAAC;UACzCD,WAAW,CAAC3F,IAAI,CAACxE,GAAG,CAAC;UACrB,IAAI,CAAC+H,UAAU,CAACwC,MAAM,CAAC7H,OAAO,CAAC;QACjC;MACF;IACF;IACA,OAAO,CAACwH,kBAAkB,EAAEC,WAAW,CAAC;EAC1C;AACF;AAEA,MAAMK,2BAA2B,GAAG,oCAAoC;;AAExE;AACA;AACA;AACA,SAASC,YAAYA,CAACC,SAAS,EAAE;EAC/B,IAAIA,SAAS,CAAC7K,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC0K,2BAA2B,CAAC;EAC9C;EACA,OAAOE,SAAS,CAACjD,KAAK,CAAC,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAASkD,aAAaA,CAACD,SAAS,EAAE,GAAGE,IAAI,EAAE;EACzC,MAAM,CAACC,KAAK,CAAC,GAAGD,IAAI;EACpB,IAAIA,IAAI,CAAC/K,MAAM,KAAK,CAAC,CAAC;EAAA,EACpBgL,KAAK,IAAID,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGF,SAAS,CAAC7K,MAAM,GAAGgL,KAAK,IAAIH,SAAS,CAAC7K,MAAM,EAAE;IACvE,MAAM,IAAIC,KAAK,CAAC0K,2BAA2B,CAAC;EAC9C;EACA,OAAOE,SAAS,CAACI,MAAM,CAAC,GAAGF,IAAI,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMG,OAAO,CAAC;EACZ9L,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAAC3B,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAAC+B,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACjG,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACkG,iBAAiB,GAAG,IAAIjL,GAAG,CAAC,CAAC;IAClC,IAAI,CAACgJ,MAAM,GAAG2B,IAAI,CAAC3B,MAAM;IACzB,IAAI,CAAC+B,WAAW,GAAGJ,IAAI,CAACI,WAAW,CAACjL,GAAG,CAACoL,OAAO,IAAI,IAAIzK,SAAS,CAACyK,OAAO,CAAC,CAAC;IAC1E,IAAI,CAACF,eAAe,GAAGL,IAAI,CAACK,eAAe;IAC3C,IAAI,CAACjG,YAAY,GAAG4F,IAAI,CAAC5F,YAAY;IACrC,IAAI,CAACA,YAAY,CAAC5C,OAAO,CAACmG,EAAE,IAAI,IAAI,CAAC2C,iBAAiB,CAACjN,GAAG,CAACsK,EAAE,CAACjD,cAAc,EAAE,IAAI,CAAC0F,WAAW,CAACzC,EAAE,CAACjD,cAAc,CAAC,CAAC,CAAC;EACrH;EACA,IAAI8F,OAAOA,CAAA,EAAG;IACZ,OAAO,QAAQ;EACjB;EACA,IAAI/G,iBAAiBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAC2G,WAAW;EACzB;EACA,IAAIK,oBAAoBA,CAAA,EAAG;IACzB,OAAO,IAAI,CAACrG,YAAY,CAACjF,GAAG,CAACwI,EAAE,KAAK;MAClCjD,cAAc,EAAEiD,EAAE,CAACjD,cAAc;MACjCC,iBAAiB,EAAEgD,EAAE,CAAC+C,QAAQ;MAC9B9L,IAAI,EAAEhE,IAAI,CAAC+D,MAAM,CAACgJ,EAAE,CAAC/I,IAAI;IAC3B,CAAC,CAAC,CAAC;EACL;EACA,IAAI+L,mBAAmBA,CAAA,EAAG;IACxB,OAAO,EAAE;EACX;EACAC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIpH,kBAAkB,CAAC,IAAI,CAACC,iBAAiB,CAAC;EACvD;EACA,OAAO2D,OAAOA,CAAC4C,IAAI,EAAE;IACnB,MAAMa,YAAY,GAAG5D,YAAY,CAACG,OAAO,CAAC4C,IAAI,CAAC5F,YAAY,EAAE4F,IAAI,CAACc,QAAQ,CAAC;IAC3E,MAAM,CAACzC,MAAM,EAAE5E,iBAAiB,CAAC,GAAGoH,YAAY,CAAChD,oBAAoB,CAAC,CAAC;IACvE,MAAMuC,WAAW,GAAG,IAAI5G,kBAAkB,CAACC,iBAAiB,CAAC;IAC7D,MAAMW,YAAY,GAAGgG,WAAW,CAACjG,mBAAmB,CAAC6F,IAAI,CAAC5F,YAAY,CAAC,CAACjF,GAAG,CAACwI,EAAE,KAAK;MACjFjD,cAAc,EAAEiD,EAAE,CAACjD,cAAc;MACjCgG,QAAQ,EAAE/C,EAAE,CAAChD,iBAAiB;MAC9B/F,IAAI,EAAEhE,IAAI,CAAC6D,MAAM,CAACkJ,EAAE,CAAC/I,IAAI;IAC3B,CAAC,CAAC,CAAC;IACH,OAAO,IAAIuL,OAAO,CAAC;MACjB9B,MAAM;MACN+B,WAAW,EAAE3G,iBAAiB;MAC9B4G,eAAe,EAAEL,IAAI,CAACK,eAAe;MACrCjG;IACF,CAAC,CAAC;EACJ;EACA2G,eAAeA,CAAC/G,KAAK,EAAE;IACrB,OAAOA,KAAK,GAAG,IAAI,CAACqE,MAAM,CAACC,qBAAqB;EAClD;EACA0C,iBAAiBA,CAAChH,KAAK,EAAE;IACvB,MAAMiH,iBAAiB,GAAG,IAAI,CAAC5C,MAAM,CAACC,qBAAqB;IAC3D,IAAItE,KAAK,IAAI,IAAI,CAACqE,MAAM,CAACC,qBAAqB,EAAE;MAC9C,MAAM4C,oBAAoB,GAAGlH,KAAK,GAAGiH,iBAAiB;MACtD,MAAME,mBAAmB,GAAG,IAAI,CAACf,WAAW,CAACnL,MAAM,GAAGgM,iBAAiB;MACvE,MAAMG,2BAA2B,GAAGD,mBAAmB,GAAG,IAAI,CAAC9C,MAAM,CAACG,2BAA2B;MACjG,OAAO0C,oBAAoB,GAAGE,2BAA2B;IAC3D,CAAC,MAAM;MACL,MAAMC,yBAAyB,GAAGJ,iBAAiB,GAAG,IAAI,CAAC5C,MAAM,CAACE,yBAAyB;MAC3F,OAAOvE,KAAK,GAAGqH,yBAAyB;IAC1C;EACF;EACAC,WAAWA,CAACtH,KAAK,EAAE;IACjB,OAAO,IAAI,CAACsG,iBAAiB,CAACiB,GAAG,CAACvH,KAAK,CAAC;EAC1C;EACAwH,UAAUA,CAAA,EAAG;IACX,OAAO,CAAC,GAAG,IAAI,CAAClB,iBAAiB,CAACmB,MAAM,CAAC,CAAC,CAAC;EAC7C;EACAC,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACtB,WAAW,CAACnC,MAAM,CAAC,CAAC0D,CAAC,EAAE3H,KAAK,KAAK,CAAC,IAAI,CAACsH,WAAW,CAACtH,KAAK,CAAC,CAAC;EACxE;EACAlJ,SAASA,CAAA,EAAG;IACV,MAAM8Q,OAAO,GAAG,IAAI,CAACxB,WAAW,CAACnL,MAAM;IACvC,IAAI4M,QAAQ,GAAG,EAAE;IACjB/E,YAAY,CAAC+E,QAAQ,EAAED,OAAO,CAAC;IAC/B,MAAMxH,YAAY,GAAG,IAAI,CAACA,YAAY,CAACjF,GAAG,CAACsF,WAAW,IAAI;MACxD,MAAM;QACJiG,QAAQ;QACRhG;MACF,CAAC,GAAGD,WAAW;MACf,MAAM7F,IAAI,GAAGwH,KAAK,CAACpI,IAAI,CAACpD,IAAI,CAAC+D,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC,CAAC;MACtD,IAAIkN,eAAe,GAAG,EAAE;MACxBhF,YAAY,CAACgF,eAAe,EAAEpB,QAAQ,CAACzL,MAAM,CAAC;MAC9C,IAAI8M,SAAS,GAAG,EAAE;MAClBjF,YAAY,CAACiF,SAAS,EAAEnN,IAAI,CAACK,MAAM,CAAC;MACpC,OAAO;QACLyF,cAAc;QACdoH,eAAe,EAAErR,MAAM,CAACuD,IAAI,CAAC8N,eAAe,CAAC;QAC7CE,UAAU,EAAEtB,QAAQ;QACpBuB,UAAU,EAAExR,MAAM,CAACuD,IAAI,CAAC+N,SAAS,CAAC;QAClCnN;MACF,CAAC;IACH,CAAC,CAAC;IACF,IAAIsN,gBAAgB,GAAG,EAAE;IACzBpF,YAAY,CAACoF,gBAAgB,EAAE9H,YAAY,CAACnF,MAAM,CAAC;IACnD,IAAIkN,iBAAiB,GAAG1R,MAAM,CAACiG,KAAK,CAACmC,gBAAgB,CAAC;IACtDpI,MAAM,CAACuD,IAAI,CAACkO,gBAAgB,CAAC,CAACvL,IAAI,CAACwL,iBAAiB,CAAC;IACrD,IAAIC,uBAAuB,GAAGF,gBAAgB,CAACjN,MAAM;IACrDmF,YAAY,CAAC5C,OAAO,CAACiD,WAAW,IAAI;MAClC,MAAM4H,iBAAiB,GAAGpR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,gBAAgB,CAAC,EAAE7K,YAAY,CAACC,IAAI,CAACuJ,WAAW,CAACqH,eAAe,CAAC7M,MAAM,EAAE,iBAAiB,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,UAAU,CAAC,EAAErB,WAAW,CAACuH,UAAU,CAAC/M,MAAM,EAAE,YAAY,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAACuJ,WAAW,CAACwH,UAAU,CAAChN,MAAM,EAAE,YAAY,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,WAAW,CAAC,EAAErB,WAAW,CAAC7F,IAAI,CAACK,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;MACzY,MAAMA,MAAM,GAAGoN,iBAAiB,CAAC5N,MAAM,CAACgG,WAAW,EAAE0H,iBAAiB,EAAEC,uBAAuB,CAAC;MAChGA,uBAAuB,IAAInN,MAAM;IACnC,CAAC,CAAC;IACFkN,iBAAiB,GAAGA,iBAAiB,CAACxO,KAAK,CAAC,CAAC,EAAEyO,uBAAuB,CAAC;IACvE,MAAMG,cAAc,GAAGtR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACC,IAAI,CAAC,CAAC,EAAE,uBAAuB,CAAC,EAAED,YAAY,CAACC,IAAI,CAAC,CAAC,EAAE,2BAA2B,CAAC,EAAED,YAAY,CAACC,IAAI,CAAC,CAAC,EAAE,6BAA6B,CAAC,EAAED,YAAY,CAACC,IAAI,CAAC2Q,QAAQ,CAAC5M,MAAM,EAAE,UAAU,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrP,SAAS,CAAC,KAAK,CAAC,EAAE2O,OAAO,EAAE,MAAM,CAAC,EAAE3O,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtU,MAAMuP,WAAW,GAAG;MAClBlE,qBAAqB,EAAE7N,MAAM,CAACuD,IAAI,CAAC,CAAC,IAAI,CAACqK,MAAM,CAACC,qBAAqB,CAAC,CAAC;MACvEC,yBAAyB,EAAE9N,MAAM,CAACuD,IAAI,CAAC,CAAC,IAAI,CAACqK,MAAM,CAACE,yBAAyB,CAAC,CAAC;MAC/EC,2BAA2B,EAAE/N,MAAM,CAACuD,IAAI,CAAC,CAAC,IAAI,CAACqK,MAAM,CAACG,2BAA2B,CAAC,CAAC;MACnFqD,QAAQ,EAAEpR,MAAM,CAACuD,IAAI,CAAC6N,QAAQ,CAAC;MAC/B7M,IAAI,EAAE,IAAI,CAACoL,WAAW,CAACjL,GAAG,CAACC,GAAG,IAAIvB,QAAQ,CAACuB,GAAG,CAACgB,OAAO,CAAC,CAAC,CAAC,CAAC;MAC1DiK,eAAe,EAAEzP,IAAI,CAAC+D,MAAM,CAAC,IAAI,CAAC0L,eAAe;IACnD,CAAC;IACD,IAAIoC,QAAQ,GAAGhS,MAAM,CAACiG,KAAK,CAAC,IAAI,CAAC;IACjC,MAAMzB,MAAM,GAAGsN,cAAc,CAAC9N,MAAM,CAAC+N,WAAW,EAAEC,QAAQ,CAAC;IAC3DN,iBAAiB,CAACxL,IAAI,CAAC8L,QAAQ,EAAExN,MAAM,CAAC;IACxC,OAAOwN,QAAQ,CAAC9O,KAAK,CAAC,CAAC,EAAEsB,MAAM,GAAGkN,iBAAiB,CAAClN,MAAM,CAAC;EAC7D;;EAEA;AACF;AACA;EACE,OAAOjB,IAAIA,CAACC,MAAM,EAAE;IAClB;IACA,IAAI6L,SAAS,GAAG,CAAC,GAAG7L,MAAM,CAAC;IAC3B,MAAMqK,qBAAqB,GAAGuB,YAAY,CAACC,SAAS,CAAC;IACrD,IAAIxB,qBAAqB,MAAMA,qBAAqB,GAAGxF,mBAAmB,CAAC,EAAE;MAC3E,MAAM,IAAI5D,KAAK,CAAC,6EAA6E,CAAC;IAChG;IACA,MAAMqJ,yBAAyB,GAAGsB,YAAY,CAACC,SAAS,CAAC;IACzD,MAAMtB,2BAA2B,GAAGqB,YAAY,CAACC,SAAS,CAAC;IAC3D,MAAM4C,YAAY,GAAGlG,YAAY,CAACsD,SAAS,CAAC;IAC5C,IAAIM,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,YAAY,EAAEC,CAAC,EAAE,EAAE;MACrC,MAAMpC,OAAO,GAAGR,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC;MAC9D4K,WAAW,CAACxG,IAAI,CAAC,IAAI9D,SAAS,CAACrF,MAAM,CAACuD,IAAI,CAACuM,OAAO,CAAC,CAAC,CAAC;IACvD;IACA,MAAMF,eAAe,GAAGN,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC;IACtE,MAAM0M,gBAAgB,GAAG1F,YAAY,CAACsD,SAAS,CAAC;IAChD,IAAI1F,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIuI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,gBAAgB,EAAES,CAAC,EAAE,EAAE;MACzC,MAAMjI,cAAc,GAAGmF,YAAY,CAACC,SAAS,CAAC;MAC9C,MAAM4C,YAAY,GAAGlG,YAAY,CAACsD,SAAS,CAAC;MAC5C,MAAMY,QAAQ,GAAGX,aAAa,CAACD,SAAS,EAAE,CAAC,EAAE4C,YAAY,CAAC;MAC1D,MAAMT,UAAU,GAAGzF,YAAY,CAACsD,SAAS,CAAC;MAC1C,MAAM8C,SAAS,GAAG7C,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEmC,UAAU,CAAC;MACzD,MAAMrN,IAAI,GAAGhE,IAAI,CAAC6D,MAAM,CAAChE,MAAM,CAACuD,IAAI,CAAC4O,SAAS,CAAC,CAAC;MAChDxI,YAAY,CAACR,IAAI,CAAC;QAChBc,cAAc;QACdgG,QAAQ;QACR9L;MACF,CAAC,CAAC;IACJ;IACA,MAAMiO,WAAW,GAAG;MAClBxE,MAAM,EAAE;QACNC,qBAAqB;QACrBC,yBAAyB;QACzBC;MACF,CAAC;MACD6B,eAAe,EAAEzP,IAAI,CAAC6D,MAAM,CAAChE,MAAM,CAACuD,IAAI,CAACqM,eAAe,CAAC,CAAC;MAC1DD,WAAW;MACXhG;IACF,CAAC;IACD,OAAO,IAAI+F,OAAO,CAAC0C,WAAW,CAAC;EACjC;AACF;;AAEA;AACA;AACA;;AAEA,MAAMC,SAAS,CAAC;EACdzO,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAAC3B,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAAC5E,iBAAiB,GAAG,KAAK,CAAC;IAC/B,IAAI,CAAC4G,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACI,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAACE,mBAAmB,GAAG,KAAK,CAAC;IACjC,IAAI,CAACtC,MAAM,GAAG2B,IAAI,CAAC3B,MAAM;IACzB,IAAI,CAAC5E,iBAAiB,GAAGuG,IAAI,CAACvG,iBAAiB;IAC/C,IAAI,CAAC4G,eAAe,GAAGL,IAAI,CAACK,eAAe;IAC3C,IAAI,CAACI,oBAAoB,GAAGT,IAAI,CAACS,oBAAoB;IACrD,IAAI,CAACE,mBAAmB,GAAGX,IAAI,CAACW,mBAAmB;EACrD;EACA,IAAIH,OAAOA,CAAA,EAAG;IACZ,OAAO,CAAC;EACV;EACA,IAAIuC,yBAAyBA,CAAA,EAAG;IAC9B,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,MAAMC,MAAM,IAAI,IAAI,CAACtC,mBAAmB,EAAE;MAC7CqC,KAAK,IAAIC,MAAM,CAAChE,eAAe,CAAChK,MAAM,GAAGgO,MAAM,CAACrE,eAAe,CAAC3J,MAAM;IACxE;IACA,OAAO+N,KAAK;EACd;EACApC,cAAcA,CAACZ,IAAI,EAAE;IACnB,IAAItG,sBAAsB;IAC1B,IAAIsG,IAAI,IAAI,wBAAwB,IAAIA,IAAI,IAAIA,IAAI,CAACtG,sBAAsB,EAAE;MAC3E,IAAI,IAAI,CAACqJ,yBAAyB,IAAI/C,IAAI,CAACtG,sBAAsB,CAACG,QAAQ,CAAC5E,MAAM,GAAG+K,IAAI,CAACtG,sBAAsB,CAACI,QAAQ,CAAC7E,MAAM,EAAE;QAC/H,MAAM,IAAIC,KAAK,CAAC,6FAA6F,CAAC;MAChH;MACAwE,sBAAsB,GAAGsG,IAAI,CAACtG,sBAAsB;IACtD,CAAC,MAAM,IAAIsG,IAAI,IAAI,4BAA4B,IAAIA,IAAI,IAAIA,IAAI,CAACkD,0BAA0B,EAAE;MAC1FxJ,sBAAsB,GAAG,IAAI,CAACyJ,0BAA0B,CAACnD,IAAI,CAACkD,0BAA0B,CAAC;IAC3F,CAAC,MAAM,IAAI,IAAI,CAACvC,mBAAmB,CAAC1L,MAAM,GAAG,CAAC,EAAE;MAC9C,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;IAC/F;IACA,OAAO,IAAIsE,kBAAkB,CAAC,IAAI,CAACC,iBAAiB,EAAEC,sBAAsB,CAAC;EAC/E;EACAqH,eAAeA,CAAC/G,KAAK,EAAE;IACrB,OAAOA,KAAK,GAAG,IAAI,CAACqE,MAAM,CAACC,qBAAqB;EAClD;EACA0C,iBAAiBA,CAAChH,KAAK,EAAE;IACvB,MAAMiH,iBAAiB,GAAG,IAAI,CAAC5C,MAAM,CAACC,qBAAqB;IAC3D,MAAM8E,oBAAoB,GAAG,IAAI,CAAC3J,iBAAiB,CAACxE,MAAM;IAC1D,IAAI+E,KAAK,IAAIoJ,oBAAoB,EAAE;MACjC,MAAMC,sBAAsB,GAAGrJ,KAAK,GAAGoJ,oBAAoB;MAC3D,MAAME,4BAA4B,GAAG,IAAI,CAAC3C,mBAAmB,CAAC4C,MAAM,CAAC,CAACP,KAAK,EAAEC,MAAM,KAAKD,KAAK,GAAGC,MAAM,CAACrE,eAAe,CAAC3J,MAAM,EAAE,CAAC,CAAC;MACjI,OAAOoO,sBAAsB,GAAGC,4BAA4B;IAC9D,CAAC,MAAM,IAAItJ,KAAK,IAAI,IAAI,CAACqE,MAAM,CAACC,qBAAqB,EAAE;MACrD,MAAM4C,oBAAoB,GAAGlH,KAAK,GAAGiH,iBAAiB;MACtD,MAAME,mBAAmB,GAAGiC,oBAAoB,GAAGnC,iBAAiB;MACpE,MAAMG,2BAA2B,GAAGD,mBAAmB,GAAG,IAAI,CAAC9C,MAAM,CAACG,2BAA2B;MACjG,OAAO0C,oBAAoB,GAAGE,2BAA2B;IAC3D,CAAC,MAAM;MACL,MAAMC,yBAAyB,GAAGJ,iBAAiB,GAAG,IAAI,CAAC5C,MAAM,CAACE,yBAAyB;MAC3F,OAAOvE,KAAK,GAAGqH,yBAAyB;IAC1C;EACF;EACA8B,0BAA0BA,CAACD,0BAA0B,EAAE;IACrD,MAAMxJ,sBAAsB,GAAG;MAC7BG,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IACD,KAAK,MAAM0J,WAAW,IAAI,IAAI,CAAC7C,mBAAmB,EAAE;MAClD,MAAM8C,YAAY,GAAGP,0BAA0B,CAACQ,IAAI,CAACnD,OAAO,IAAIA,OAAO,CAACnL,GAAG,CAACa,MAAM,CAACuN,WAAW,CAACrE,UAAU,CAAC,CAAC;MAC3G,IAAI,CAACsE,YAAY,EAAE;QACjB,MAAM,IAAIvO,KAAK,CAAC,6DAA6DsO,WAAW,CAACrE,UAAU,CAAChJ,QAAQ,CAAC,CAAC,EAAE,CAAC;MACnH;MACA,KAAK,MAAM6D,KAAK,IAAIwJ,WAAW,CAAC5E,eAAe,EAAE;QAC/C,IAAI5E,KAAK,GAAGyJ,YAAY,CAAC1E,KAAK,CAACC,SAAS,CAAC/J,MAAM,EAAE;UAC/CyE,sBAAsB,CAACG,QAAQ,CAACD,IAAI,CAAC6J,YAAY,CAAC1E,KAAK,CAACC,SAAS,CAAChF,KAAK,CAAC,CAAC;QAC3E,CAAC,MAAM;UACL,MAAM,IAAI9E,KAAK,CAAC,oCAAoC8E,KAAK,4BAA4BwJ,WAAW,CAACrE,UAAU,CAAChJ,QAAQ,CAAC,CAAC,EAAE,CAAC;QAC3H;MACF;MACA,KAAK,MAAM6D,KAAK,IAAIwJ,WAAW,CAACvE,eAAe,EAAE;QAC/C,IAAIjF,KAAK,GAAGyJ,YAAY,CAAC1E,KAAK,CAACC,SAAS,CAAC/J,MAAM,EAAE;UAC/CyE,sBAAsB,CAACI,QAAQ,CAACF,IAAI,CAAC6J,YAAY,CAAC1E,KAAK,CAACC,SAAS,CAAChF,KAAK,CAAC,CAAC;QAC3E,CAAC,MAAM;UACL,MAAM,IAAI9E,KAAK,CAAC,oCAAoC8E,KAAK,4BAA4BwJ,WAAW,CAACrE,UAAU,CAAChJ,QAAQ,CAAC,CAAC,EAAE,CAAC;QAC3H;MACF;IACF;IACA,OAAOuD,sBAAsB;EAC/B;EACA,OAAO0D,OAAOA,CAAC4C,IAAI,EAAE;IACnB,MAAMa,YAAY,GAAG5D,YAAY,CAACG,OAAO,CAAC4C,IAAI,CAAC5F,YAAY,EAAE4F,IAAI,CAACc,QAAQ,CAAC;IAC3E,MAAMH,mBAAmB,GAAG,IAAIvE,KAAK,CAAC,CAAC;IACvC,MAAM1C,sBAAsB,GAAG;MAC7BG,QAAQ,EAAE,IAAIuC,KAAK,CAAC,CAAC;MACrBtC,QAAQ,EAAE,IAAIsC,KAAK,CAAC;IACtB,CAAC;IACD,MAAMuH,mBAAmB,GAAG3D,IAAI,CAACkD,0BAA0B,IAAI,EAAE;IACjE,KAAK,MAAMvE,WAAW,IAAIgF,mBAAmB,EAAE;MAC7C,MAAMC,aAAa,GAAG/C,YAAY,CAACnC,kBAAkB,CAACC,WAAW,CAAC;MAClE,IAAIiF,aAAa,KAAKhO,SAAS,EAAE;QAC/B,MAAM,CAACiO,kBAAkB,EAAE;UACzBhK,QAAQ;UACRC;QACF,CAAC,CAAC,GAAG8J,aAAa;QAClBjD,mBAAmB,CAAC/G,IAAI,CAACiK,kBAAkB,CAAC;QAC5CnK,sBAAsB,CAACG,QAAQ,CAACD,IAAI,CAAC,GAAGC,QAAQ,CAAC;QACjDH,sBAAsB,CAACI,QAAQ,CAACF,IAAI,CAAC,GAAGE,QAAQ,CAAC;MACnD;IACF;IACA,MAAM,CAACuE,MAAM,EAAE5E,iBAAiB,CAAC,GAAGoH,YAAY,CAAChD,oBAAoB,CAAC,CAAC;IACvE,MAAMuC,WAAW,GAAG,IAAI5G,kBAAkB,CAACC,iBAAiB,EAAEC,sBAAsB,CAAC;IACrF,MAAM+G,oBAAoB,GAAGL,WAAW,CAACjG,mBAAmB,CAAC6F,IAAI,CAAC5F,YAAY,CAAC;IAC/E,OAAO,IAAI0I,SAAS,CAAC;MACnBzE,MAAM;MACN5E,iBAAiB;MACjB4G,eAAe,EAAEL,IAAI,CAACK,eAAe;MACrCI,oBAAoB;MACpBE;IACF,CAAC,CAAC;EACJ;EACA7P,SAASA,CAAA,EAAG;IACV,MAAMgT,8BAA8B,GAAG1H,KAAK,CAAC,CAAC;IAC9CU,YAAY,CAACgH,8BAA8B,EAAE,IAAI,CAACrK,iBAAiB,CAACxE,MAAM,CAAC;IAC3E,MAAM8O,sBAAsB,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC3D,MAAMC,yBAAyB,GAAG7H,KAAK,CAAC,CAAC;IACzCU,YAAY,CAACmH,yBAAyB,EAAE,IAAI,CAACxD,oBAAoB,CAACxL,MAAM,CAAC;IACzE,MAAMiP,6BAA6B,GAAG,IAAI,CAACC,4BAA4B,CAAC,CAAC;IACzE,MAAMC,gCAAgC,GAAGhI,KAAK,CAAC,CAAC;IAChDU,YAAY,CAACsH,gCAAgC,EAAE,IAAI,CAACzD,mBAAmB,CAAC1L,MAAM,CAAC;IAC/E,MAAMoP,aAAa,GAAGpT,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,QAAQ,CAAC,EAAE7K,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,uBAAuB,CAAC,EAAE7K,YAAY,CAAC6K,EAAE,CAAC,2BAA2B,CAAC,EAAE7K,YAAY,CAAC6K,EAAE,CAAC,6BAA6B,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE7K,YAAY,CAACC,IAAI,CAAC4S,8BAA8B,CAAC7O,MAAM,EAAE,yBAAyB,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrP,SAAS,CAAC,CAAC,EAAE,IAAI,CAACwG,iBAAiB,CAACxE,MAAM,EAAE,mBAAmB,CAAC,EAAEhC,SAAS,CAAC,iBAAiB,CAAC,EAAEhC,YAAY,CAACC,IAAI,CAAC+S,yBAAyB,CAAChP,MAAM,EAAE,oBAAoB,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAAC6S,sBAAsB,CAAC9O,MAAM,EAAE,wBAAwB,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAACkT,gCAAgC,CAACnP,MAAM,EAAE,2BAA2B,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAACgT,6BAA6B,CAACjP,MAAM,EAAE,+BAA+B,CAAC,CAAC,CAAC;IAC/vB,MAAMqP,iBAAiB,GAAG,IAAIlR,UAAU,CAACyF,gBAAgB,CAAC;IAC1D,MAAM0L,wBAAwB,GAAG,CAAC,IAAI,CAAC;IACvC,MAAMC,uBAAuB,GAAGH,aAAa,CAAC5P,MAAM,CAAC;MACnDgQ,MAAM,EAAEF,wBAAwB;MAChClG,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBqG,uBAAuB,EAAE,IAAItR,UAAU,CAAC0Q,8BAA8B,CAAC;MACvErK,iBAAiB,EAAE,IAAI,CAACA,iBAAiB,CAACtE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACgB,OAAO,CAAC,CAAC,CAAC;MACnEiK,eAAe,EAAEzP,IAAI,CAAC+D,MAAM,CAAC,IAAI,CAAC0L,eAAe,CAAC;MAClDsE,kBAAkB,EAAE,IAAIvR,UAAU,CAAC6Q,yBAAyB,CAAC;MAC7DF,sBAAsB;MACtBa,yBAAyB,EAAE,IAAIxR,UAAU,CAACgR,gCAAgC,CAAC;MAC3EF;IACF,CAAC,EAAEI,iBAAiB,CAAC;IACrB,OAAOA,iBAAiB,CAAC3Q,KAAK,CAAC,CAAC,EAAE6Q,uBAAuB,CAAC;EAC5D;EACAR,qBAAqBA,CAAA,EAAG;IACtB,IAAIa,gBAAgB,GAAG,CAAC;IACxB,MAAMd,sBAAsB,GAAG,IAAI3Q,UAAU,CAACyF,gBAAgB,CAAC;IAC/D,KAAK,MAAM4B,WAAW,IAAI,IAAI,CAACgG,oBAAoB,EAAE;MACnD,MAAMqE,8BAA8B,GAAG1I,KAAK,CAAC,CAAC;MAC9CU,YAAY,CAACgI,8BAA8B,EAAErK,WAAW,CAACE,iBAAiB,CAAC1F,MAAM,CAAC;MAClF,MAAM8P,iBAAiB,GAAG3I,KAAK,CAAC,CAAC;MACjCU,YAAY,CAACiI,iBAAiB,EAAEtK,WAAW,CAAC7F,IAAI,CAACK,MAAM,CAAC;MACxD,MAAMoN,iBAAiB,GAAGpR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,gBAAgB,CAAC,EAAE7K,YAAY,CAACC,IAAI,CAAC4T,8BAA8B,CAAC7P,MAAM,EAAE,gCAAgC,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,CAAC,EAAErB,WAAW,CAACE,iBAAiB,CAAC1F,MAAM,EAAE,mBAAmB,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAAC6T,iBAAiB,CAAC9P,MAAM,EAAE,mBAAmB,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAACuJ,WAAW,CAAC7F,IAAI,CAACK,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;MACpY4P,gBAAgB,IAAIxC,iBAAiB,CAAC5N,MAAM,CAAC;QAC3CiG,cAAc,EAAED,WAAW,CAACC,cAAc;QAC1CoK,8BAA8B,EAAE,IAAI1R,UAAU,CAAC0R,8BAA8B,CAAC;QAC9EnK,iBAAiB,EAAEF,WAAW,CAACE,iBAAiB;QAChDoK,iBAAiB,EAAE,IAAI3R,UAAU,CAAC2R,iBAAiB,CAAC;QACpDnQ,IAAI,EAAE6F,WAAW,CAAC7F;MACpB,CAAC,EAAEmP,sBAAsB,EAAEc,gBAAgB,CAAC;IAC9C;IACA,OAAOd,sBAAsB,CAACpQ,KAAK,CAAC,CAAC,EAAEkR,gBAAgB,CAAC;EAC1D;EACAV,4BAA4BA,CAAA,EAAG;IAC7B,IAAIU,gBAAgB,GAAG,CAAC;IACxB,MAAMX,6BAA6B,GAAG,IAAI9Q,UAAU,CAACyF,gBAAgB,CAAC;IACtE,KAAK,MAAMoK,MAAM,IAAI,IAAI,CAACtC,mBAAmB,EAAE;MAC7C,MAAMqE,4BAA4B,GAAG5I,KAAK,CAAC,CAAC;MAC5CU,YAAY,CAACkI,4BAA4B,EAAE/B,MAAM,CAACrE,eAAe,CAAC3J,MAAM,CAAC;MACzE,MAAMgQ,4BAA4B,GAAG7I,KAAK,CAAC,CAAC;MAC5CU,YAAY,CAACmI,4BAA4B,EAAEhC,MAAM,CAAChE,eAAe,CAAChK,MAAM,CAAC;MACzE,MAAMiQ,wBAAwB,GAAGjU,YAAY,CAAC+J,MAAM,CAAC,CAAC/H,SAAS,CAAC,YAAY,CAAC,EAAEhC,YAAY,CAACC,IAAI,CAAC8T,4BAA4B,CAAC/P,MAAM,EAAE,8BAA8B,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,CAAC,EAAEmH,MAAM,CAACrE,eAAe,CAAC3J,MAAM,EAAE,iBAAiB,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAAC+T,4BAA4B,CAAChQ,MAAM,EAAE,8BAA8B,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,CAAC,EAAEmH,MAAM,CAAChE,eAAe,CAAChK,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC;MAC7a4P,gBAAgB,IAAIK,wBAAwB,CAACzQ,MAAM,CAAC;QAClD0K,UAAU,EAAE8D,MAAM,CAAC9D,UAAU,CAAC/I,OAAO,CAAC,CAAC;QACvC4O,4BAA4B,EAAE,IAAI5R,UAAU,CAAC4R,4BAA4B,CAAC;QAC1EpG,eAAe,EAAEqE,MAAM,CAACrE,eAAe;QACvCqG,4BAA4B,EAAE,IAAI7R,UAAU,CAAC6R,4BAA4B,CAAC;QAC1EhG,eAAe,EAAEgE,MAAM,CAAChE;MAC1B,CAAC,EAAEiF,6BAA6B,EAAEW,gBAAgB,CAAC;IACrD;IACA,OAAOX,6BAA6B,CAACvQ,KAAK,CAAC,CAAC,EAAEkR,gBAAgB,CAAC;EACjE;EACA,OAAO9T,WAAWA,CAACuT,iBAAiB,EAAE;IACpC,IAAIxE,SAAS,GAAG,CAAC,GAAGwE,iBAAiB,CAAC;IACtC,MAAMG,MAAM,GAAG5E,YAAY,CAACC,SAAS,CAAC;IACtC,MAAMqF,YAAY,GAAGV,MAAM,GAAG3L,mBAAmB;IACjDzG,MAAM,CAACoS,MAAM,KAAKU,YAAY,EAAE,wDAAwD,CAAC;IACzF,MAAM3E,OAAO,GAAG2E,YAAY;IAC5B9S,MAAM,CAACmO,OAAO,KAAK,CAAC,EAAE,+DAA+DA,OAAO,EAAE,CAAC;IAC/F,MAAMnC,MAAM,GAAG;MACbC,qBAAqB,EAAEuB,YAAY,CAACC,SAAS,CAAC;MAC9CvB,yBAAyB,EAAEsB,YAAY,CAACC,SAAS,CAAC;MAClDtB,2BAA2B,EAAEqB,YAAY,CAACC,SAAS;IACrD,CAAC;IACD,MAAMrG,iBAAiB,GAAG,EAAE;IAC5B,MAAMiL,uBAAuB,GAAGlI,YAAY,CAACsD,SAAS,CAAC;IACvD,KAAK,IAAI6C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,uBAAuB,EAAE/B,CAAC,EAAE,EAAE;MAChDlJ,iBAAiB,CAACG,IAAI,CAAC,IAAI9D,SAAS,CAACiK,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC,CAAC,CAAC;IACvF;IACA,MAAM6K,eAAe,GAAGzP,IAAI,CAAC6D,MAAM,CAACsL,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC,CAAC;IACnF,MAAM0M,gBAAgB,GAAG1F,YAAY,CAACsD,SAAS,CAAC;IAChD,MAAMW,oBAAoB,GAAG,EAAE;IAC/B,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,gBAAgB,EAAES,CAAC,EAAE,EAAE;MACzC,MAAMjI,cAAc,GAAGmF,YAAY,CAACC,SAAS,CAAC;MAC9C,MAAMsF,uBAAuB,GAAG5I,YAAY,CAACsD,SAAS,CAAC;MACvD,MAAMnF,iBAAiB,GAAGoF,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEsF,uBAAuB,CAAC;MAC9E,MAAMnD,UAAU,GAAGzF,YAAY,CAACsD,SAAS,CAAC;MAC1C,MAAMlL,IAAI,GAAG,IAAIxB,UAAU,CAAC2M,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEmC,UAAU,CAAC,CAAC;MACpExB,oBAAoB,CAAC7G,IAAI,CAAC;QACxBc,cAAc;QACdC,iBAAiB;QACjB/F;MACF,CAAC,CAAC;IACJ;IACA,MAAMyQ,wBAAwB,GAAG7I,YAAY,CAACsD,SAAS,CAAC;IACxD,MAAMa,mBAAmB,GAAG,EAAE;IAC9B,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,wBAAwB,EAAE1C,CAAC,EAAE,EAAE;MACjD,MAAMxD,UAAU,GAAG,IAAIrJ,SAAS,CAACiK,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC,CAAC;MAChF,MAAM8P,qBAAqB,GAAG9I,YAAY,CAACsD,SAAS,CAAC;MACrD,MAAMlB,eAAe,GAAGmB,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEwF,qBAAqB,CAAC;MAC1E,MAAMC,qBAAqB,GAAG/I,YAAY,CAACsD,SAAS,CAAC;MACrD,MAAMb,eAAe,GAAGc,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEyF,qBAAqB,CAAC;MAC1E5E,mBAAmB,CAAC/G,IAAI,CAAC;QACvBuF,UAAU;QACVP,eAAe;QACfK;MACF,CAAC,CAAC;IACJ;IACA,OAAO,IAAI6D,SAAS,CAAC;MACnBzE,MAAM;MACN5E,iBAAiB;MACjB4G,eAAe;MACfI,oBAAoB;MACpBE;IACF,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,MAAM6E,gBAAgB,GAAG;EACvBC,yBAAyBA,CAACnB,iBAAiB,EAAE;IAC3C,MAAMG,MAAM,GAAGH,iBAAiB,CAAC,CAAC,CAAC;IACnC,MAAMa,YAAY,GAAGV,MAAM,GAAG3L,mBAAmB;;IAEjD;IACA,IAAIqM,YAAY,KAAKV,MAAM,EAAE;MAC3B,OAAO,QAAQ;IACjB;;IAEA;IACA,OAAOU,YAAY;EACrB,CAAC;EACDpU,WAAW,EAAEuT,iBAAiB,IAAI;IAChC,MAAM9D,OAAO,GAAGgF,gBAAgB,CAACC,yBAAyB,CAACnB,iBAAiB,CAAC;IAC7E,IAAI9D,OAAO,KAAK,QAAQ,EAAE;MACxB,OAAOL,OAAO,CAACnM,IAAI,CAACsQ,iBAAiB,CAAC;IACxC;IACA,IAAI9D,OAAO,KAAK,CAAC,EAAE;MACjB,OAAOsC,SAAS,CAAC/R,WAAW,CAACuT,iBAAiB,CAAC;IACjD,CAAC,MAAM;MACL,MAAM,IAAIpP,KAAK,CAAC,+BAA+BsL,OAAO,mCAAmC,CAAC;IAC5F;EACF;AACF,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA,IAAIkF,iBAAiB,GAAG,aAAa,UAAUA,iBAAiB,EAAE;EAChEA,iBAAiB,CAACA,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,GAAG,sBAAsB;EACzFA,iBAAiB,CAACA,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACnEA,iBAAiB,CAACA,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACnEA,iBAAiB,CAACA,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;EAC3E,OAAOA,iBAAiB;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEL;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGlV,MAAM,CAACiG,KAAK,CAACqC,yBAAyB,CAAC,CAAC6M,IAAI,CAAC,CAAC,CAAC;;AAEzE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,sBAAsB,CAAC;EAC3BxR,WAAWA,CAACyR,IAAI,EAAE;IAChB;AACJ;AACA;AACA;IACI,IAAI,CAAC9Q,IAAI,GAAG,KAAK,CAAC;IAClB;AACJ;AACA;IACI,IAAI,CAACkC,SAAS,GAAG,KAAK,CAAC;IACvB;AACJ;AACA;IACI,IAAI,CAACtC,IAAI,GAAGnE,MAAM,CAACiG,KAAK,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACQ,SAAS,GAAG4O,IAAI,CAAC5O,SAAS;IAC/B,IAAI,CAAClC,IAAI,GAAG8Q,IAAI,CAAC9Q,IAAI;IACrB,IAAI8Q,IAAI,CAAClR,IAAI,EAAE;MACb,IAAI,CAACA,IAAI,GAAGkR,IAAI,CAAClR,IAAI;IACvB;EACF;;EAEA;AACF;AACA;EACEyB,MAAMA,CAAA,EAAG;IACP,OAAO;MACLrB,IAAI,EAAE,IAAI,CAACA,IAAI,CAACG,GAAG,CAAC,CAAC;QACnBiD,MAAM;QACNmF,QAAQ;QACRC;MACF,CAAC,MAAM;QACLpF,MAAM,EAAEA,MAAM,CAAC/B,MAAM,CAAC,CAAC;QACvBkH,QAAQ;QACRC;MACF,CAAC,CAAC,CAAC;MACHtG,SAAS,EAAE,IAAI,CAACA,SAAS,CAACb,MAAM,CAAC,CAAC;MAClCzB,IAAI,EAAE,CAAC,GAAG,IAAI,CAACA,IAAI;IACrB,CAAC;EACH;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMmR,WAAW,CAAC;EAChB;AACF;AACA;AACA;AACA;EACE,IAAI9M,SAASA,CAAA,EAAG;IACd,IAAI,IAAI,CAAC+M,UAAU,CAAC/Q,MAAM,GAAG,CAAC,EAAE;MAC9B,OAAO,IAAI,CAAC+Q,UAAU,CAAC,CAAC,CAAC,CAAC/M,SAAS;IACrC;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;;EAEE;;EAEA;;EAEA;AACF;AACA;AACA;;EAEE;AACF;AACA;EACE5E,WAAWA,CAACyR,IAAI,EAAE;IAChB;AACJ;AACA;AACA;IACI,IAAI,CAACE,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB;AACJ;AACA;IACI,IAAI,CAAC7L,YAAY,GAAG,EAAE;IACtB;AACJ;AACA;IACI,IAAI,CAACiG,eAAe,GAAG,KAAK,CAAC;IAC7B;AACJ;AACA;IACI,IAAI,CAAC6F,oBAAoB,GAAG,KAAK,CAAC;IAClC;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;IACvB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAG,KAAK,CAAC;IACjC;AACJ;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB;AACJ;AACA;IACI,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACR,IAAI,EAAE;MACT;IACF;IACA,IAAIA,IAAI,CAACG,QAAQ,EAAE;MACjB,IAAI,CAACA,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC/B;IACA,IAAIH,IAAI,CAACE,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,GAAGF,IAAI,CAACE,UAAU;IACnC;IACA,IAAIzR,MAAM,CAAC4E,SAAS,CAACoN,cAAc,CAACC,IAAI,CAACV,IAAI,EAAE,WAAW,CAAC,EAAE;MAC3D,MAAM;QACJW,cAAc;QACdN;MACF,CAAC,GAAGL,IAAI;MACR,IAAI,CAACM,mBAAmB,GAAGK,cAAc;MACzC,IAAI,CAACN,SAAS,GAAGA,SAAS;IAC5B,CAAC,MAAM,IAAI5R,MAAM,CAAC4E,SAAS,CAACoN,cAAc,CAACC,IAAI,CAACV,IAAI,EAAE,sBAAsB,CAAC,EAAE;MAC7E,MAAM;QACJY,SAAS;QACTR;MACF,CAAC,GAAGJ,IAAI;MACR,IAAI,CAACzF,eAAe,GAAGqG,SAAS;MAChC,IAAI,CAACR,oBAAoB,GAAGA,oBAAoB;IAClD,CAAC,MAAM;MACL,MAAM;QACJ7F,eAAe;QACf8F;MACF,CAAC,GAAGL,IAAI;MACR,IAAIK,SAAS,EAAE;QACb,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC5B;MACA,IAAI,CAAC9F,eAAe,GAAGA,eAAe;IACxC;EACF;;EAEA;AACF;AACA;EACEhK,MAAMA,CAAA,EAAG;IACP,OAAO;MACLgK,eAAe,EAAE,IAAI,CAACA,eAAe,IAAI,IAAI;MAC7C4F,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC5P,MAAM,CAAC,CAAC,GAAG,IAAI;MACvD8P,SAAS,EAAE,IAAI,CAACA,SAAS,GAAG;QAC1BtO,KAAK,EAAE,IAAI,CAACsO,SAAS,CAACtO,KAAK;QAC3B8O,gBAAgB,EAAE,IAAI,CAACR,SAAS,CAACQ,gBAAgB,CAACtQ,MAAM,CAAC;MAC3D,CAAC,GAAG,IAAI;MACR+D,YAAY,EAAE,IAAI,CAACA,YAAY,CAACjF,GAAG,CAACsF,WAAW,IAAIA,WAAW,CAACpE,MAAM,CAAC,CAAC,CAAC;MACxEuQ,OAAO,EAAE,IAAI,CAACZ,UAAU,CAAC7Q,GAAG,CAAC,CAAC;QAC5BlC;MACF,CAAC,KAAK;QACJ,OAAOA,SAAS,CAACoD,MAAM,CAAC,CAAC;MAC3B,CAAC;IACH,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEwQ,GAAGA,CAAC,GAAGC,KAAK,EAAE;IACZ,IAAIA,KAAK,CAAC7R,MAAM,KAAK,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;IACpC;IACA4R,KAAK,CAACtP,OAAO,CAAC0E,IAAI,IAAI;MACpB,IAAI,cAAc,IAAIA,IAAI,EAAE;QAC1B,IAAI,CAAC9B,YAAY,GAAG,IAAI,CAACA,YAAY,CAAChD,MAAM,CAAC8E,IAAI,CAAC9B,YAAY,CAAC;MACjE,CAAC,MAAM,IAAI,MAAM,IAAI8B,IAAI,IAAI,WAAW,IAAIA,IAAI,IAAI,MAAM,IAAIA,IAAI,EAAE;QAClE,IAAI,CAAC9B,YAAY,CAACR,IAAI,CAACsC,IAAI,CAAC;MAC9B,CAAC,MAAM;QACL,IAAI,CAAC9B,YAAY,CAACR,IAAI,CAAC,IAAIiM,sBAAsB,CAAC3J,IAAI,CAAC,CAAC;MAC1D;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACE6K,cAAcA,CAAA,EAAG;IACf,IAAI,IAAI,CAACV,QAAQ,IAAIW,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC5Q,MAAM,CAAC,CAAC,CAAC,KAAK2Q,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,KAAK,CAAC,EAAE;MACjF,OAAO,IAAI,CAACD,QAAQ;IACtB;IACA,IAAIhG,eAAe;IACnB,IAAIjG,YAAY;IAChB,IAAI,IAAI,CAAC+L,SAAS,EAAE;MAClB9F,eAAe,GAAG,IAAI,CAAC8F,SAAS,CAACtO,KAAK;MACtC,IAAI,IAAI,CAACuC,YAAY,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC+L,SAAS,CAACQ,gBAAgB,EAAE;QAC3DvM,YAAY,GAAG,CAAC,IAAI,CAAC+L,SAAS,CAACQ,gBAAgB,EAAE,GAAG,IAAI,CAACvM,YAAY,CAAC;MACxE,CAAC,MAAM;QACLA,YAAY,GAAG,IAAI,CAACA,YAAY;MAClC;IACF,CAAC,MAAM;MACLiG,eAAe,GAAG,IAAI,CAACA,eAAe;MACtCjG,YAAY,GAAG,IAAI,CAACA,YAAY;IAClC;IACA,IAAI,CAACiG,eAAe,EAAE;MACpB,MAAM,IAAInL,KAAK,CAAC,sCAAsC,CAAC;IACzD;IACA,IAAIkF,YAAY,CAACnF,MAAM,GAAG,CAAC,EAAE;MAC3BiS,OAAO,CAACC,IAAI,CAAC,0BAA0B,CAAC;IAC1C;IACA,IAAIlB,QAAQ;IACZ,IAAI,IAAI,CAACA,QAAQ,EAAE;MACjBA,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC1B,CAAC,MAAM,IAAI,IAAI,CAACD,UAAU,CAAC/Q,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC+Q,UAAU,CAAC,CAAC,CAAC,CAAC/S,SAAS,EAAE;MACrE;MACAgT,QAAQ,GAAG,IAAI,CAACD,UAAU,CAAC,CAAC,CAAC,CAAC/S,SAAS;IACzC,CAAC,MAAM;MACL,MAAM,IAAIiC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,KAAK,IAAIyN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvI,YAAY,CAACnF,MAAM,EAAE0N,CAAC,EAAE,EAAE;MAC5C,IAAIvI,YAAY,CAACuI,CAAC,CAAC,CAACzL,SAAS,KAAKtB,SAAS,EAAE;QAC3C,MAAM,IAAIV,KAAK,CAAC,iCAAiCyN,CAAC,2BAA2B,CAAC;MAChF;IACF;IACA,MAAMnB,UAAU,GAAG,EAAE;IACrB,MAAM4F,YAAY,GAAG,EAAE;IACvBhN,YAAY,CAAC5C,OAAO,CAACiD,WAAW,IAAI;MAClCA,WAAW,CAACzF,IAAI,CAACwC,OAAO,CAACoG,WAAW,IAAI;QACtCwJ,YAAY,CAACxN,IAAI,CAAC;UAChB,GAAGgE;QACL,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,MAAM1G,SAAS,GAAGuD,WAAW,CAACvD,SAAS,CAACJ,QAAQ,CAAC,CAAC;MAClD,IAAI,CAAC0K,UAAU,CAAC6F,QAAQ,CAACnQ,SAAS,CAAC,EAAE;QACnCsK,UAAU,CAAC5H,IAAI,CAAC1C,SAAS,CAAC;MAC5B;IACF,CAAC,CAAC;;IAEF;IACAsK,UAAU,CAAChK,OAAO,CAACN,SAAS,IAAI;MAC9BkQ,YAAY,CAACxN,IAAI,CAAC;QAChBxB,MAAM,EAAE,IAAItC,SAAS,CAACoB,SAAS,CAAC;QAChCqG,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAM8J,WAAW,GAAG,EAAE;IACtBF,YAAY,CAAC5P,OAAO,CAACoG,WAAW,IAAI;MAClC,MAAM2J,YAAY,GAAG3J,WAAW,CAACxF,MAAM,CAACtB,QAAQ,CAAC,CAAC;MAClD,MAAM0Q,WAAW,GAAGF,WAAW,CAAC7H,SAAS,CAACgI,CAAC,IAAI;QAC7C,OAAOA,CAAC,CAACrP,MAAM,CAACtB,QAAQ,CAAC,CAAC,KAAKyQ,YAAY;MAC7C,CAAC,CAAC;MACF,IAAIC,WAAW,GAAG,CAAC,CAAC,EAAE;QACpBF,WAAW,CAACE,WAAW,CAAC,CAAChK,UAAU,GAAG8J,WAAW,CAACE,WAAW,CAAC,CAAChK,UAAU,IAAII,WAAW,CAACJ,UAAU;QACnG8J,WAAW,CAACE,WAAW,CAAC,CAACjK,QAAQ,GAAG+J,WAAW,CAACE,WAAW,CAAC,CAACjK,QAAQ,IAAIK,WAAW,CAACL,QAAQ;MAC/F,CAAC,MAAM;QACL+J,WAAW,CAAC1N,IAAI,CAACgE,WAAW,CAAC;MAC/B;IACF,CAAC,CAAC;;IAEF;IACA0J,WAAW,CAACI,IAAI,CAAC,UAAUD,CAAC,EAAEE,CAAC,EAAE;MAC/B,IAAIF,CAAC,CAAClK,QAAQ,KAAKoK,CAAC,CAACpK,QAAQ,EAAE;QAC7B;QACA,OAAOkK,CAAC,CAAClK,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5B;MACA,IAAIkK,CAAC,CAACjK,UAAU,KAAKmK,CAAC,CAACnK,UAAU,EAAE;QACjC;QACA,OAAOiK,CAAC,CAACjK,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;MAC9B;MACA;MACA,MAAMoK,OAAO,GAAG;QACdC,aAAa,EAAE,UAAU;QACzBC,KAAK,EAAE,MAAM;QACbC,WAAW,EAAE,SAAS;QACtBC,iBAAiB,EAAE,KAAK;QACxBC,OAAO,EAAE,KAAK;QACdC,SAAS,EAAE;MACb,CAAC;MACD,OAAOT,CAAC,CAACrP,MAAM,CAACjC,QAAQ,CAAC,CAAC,CAACgS,aAAa,CAACR,CAAC,CAACvP,MAAM,CAACjC,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAEyR,OAAO,CAAC;IAC9E,CAAC,CAAC;;IAEF;IACA,MAAMQ,aAAa,GAAGd,WAAW,CAAC7H,SAAS,CAACgI,CAAC,IAAI;MAC/C,OAAOA,CAAC,CAACrP,MAAM,CAACnC,MAAM,CAACgQ,QAAQ,CAAC;IAClC,CAAC,CAAC;IACF,IAAImC,aAAa,GAAG,CAAC,CAAC,EAAE;MACtB,MAAM,CAACC,SAAS,CAAC,GAAGf,WAAW,CAACpH,MAAM,CAACkI,aAAa,EAAE,CAAC,CAAC;MACxDC,SAAS,CAAC9K,QAAQ,GAAG,IAAI;MACzB8K,SAAS,CAAC7K,UAAU,GAAG,IAAI;MAC3B8J,WAAW,CAACgB,OAAO,CAACD,SAAS,CAAC;IAChC,CAAC,MAAM;MACLf,WAAW,CAACgB,OAAO,CAAC;QAClBlQ,MAAM,EAAE6N,QAAQ;QAChB1I,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;;IAEA;IACA,KAAK,MAAMvE,SAAS,IAAI,IAAI,CAAC+M,UAAU,EAAE;MACvC,MAAMwB,WAAW,GAAGF,WAAW,CAAC7H,SAAS,CAACgI,CAAC,IAAI;QAC7C,OAAOA,CAAC,CAACrP,MAAM,CAACnC,MAAM,CAACgD,SAAS,CAAChG,SAAS,CAAC;MAC7C,CAAC,CAAC;MACF,IAAIuU,WAAW,GAAG,CAAC,CAAC,EAAE;QACpB,IAAI,CAACF,WAAW,CAACE,WAAW,CAAC,CAACjK,QAAQ,EAAE;UACtC+J,WAAW,CAACE,WAAW,CAAC,CAACjK,QAAQ,GAAG,IAAI;UACxC2J,OAAO,CAACC,IAAI,CAAC,0DAA0D,GAAG,gFAAgF,GAAG,wFAAwF,CAAC;QACxP;MACF,CAAC,MAAM;QACL,MAAM,IAAIjS,KAAK,CAAC,mBAAmB+D,SAAS,CAAChG,SAAS,CAAC6D,QAAQ,CAAC,CAAC,EAAE,CAAC;MACtE;IACF;IACA,IAAIwH,qBAAqB,GAAG,CAAC;IAC7B,IAAIC,yBAAyB,GAAG,CAAC;IACjC,IAAIC,2BAA2B,GAAG,CAAC;;IAEnC;IACA,MAAM+J,UAAU,GAAG,EAAE;IACrB,MAAMC,YAAY,GAAG,EAAE;IACvBlB,WAAW,CAAC9P,OAAO,CAAC,CAAC;MACnBY,MAAM;MACNmF,QAAQ;MACRC;IACF,CAAC,KAAK;MACJ,IAAID,QAAQ,EAAE;QACZgL,UAAU,CAAC3O,IAAI,CAACxB,MAAM,CAACtB,QAAQ,CAAC,CAAC,CAAC;QAClCwH,qBAAqB,IAAI,CAAC;QAC1B,IAAI,CAACd,UAAU,EAAE;UACfe,yBAAyB,IAAI,CAAC;QAChC;MACF,CAAC,MAAM;QACLiK,YAAY,CAAC5O,IAAI,CAACxB,MAAM,CAACtB,QAAQ,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC0G,UAAU,EAAE;UACfgB,2BAA2B,IAAI,CAAC;QAClC;MACF;IACF,CAAC,CAAC;IACF,MAAM4B,WAAW,GAAGmI,UAAU,CAACnR,MAAM,CAACoR,YAAY,CAAC;IACnD,MAAM/H,oBAAoB,GAAGrG,YAAY,CAACjF,GAAG,CAACsF,WAAW,IAAI;MAC3D,MAAM;QACJ7F,IAAI;QACJsC;MACF,CAAC,GAAGuD,WAAW;MACf,OAAO;QACLC,cAAc,EAAE0F,WAAW,CAACqI,OAAO,CAACvR,SAAS,CAACJ,QAAQ,CAAC,CAAC,CAAC;QACzD4J,QAAQ,EAAEjG,WAAW,CAACzF,IAAI,CAACG,GAAG,CAACyF,IAAI,IAAIwF,WAAW,CAACqI,OAAO,CAAC7N,IAAI,CAACxC,MAAM,CAACtB,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnFlC,IAAI,EAAEhE,IAAI,CAAC6D,MAAM,CAACG,IAAI;MACxB,CAAC;IACH,CAAC,CAAC;IACF6L,oBAAoB,CAACjJ,OAAO,CAACiD,WAAW,IAAI;MAC1CpI,MAAM,CAACoI,WAAW,CAACC,cAAc,IAAI,CAAC,CAAC;MACvCD,WAAW,CAACiG,QAAQ,CAAClJ,OAAO,CAACgD,QAAQ,IAAInI,MAAM,CAACmI,QAAQ,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;IACF,OAAO,IAAI2F,OAAO,CAAC;MACjB9B,MAAM,EAAE;QACNC,qBAAqB;QACrBC,yBAAyB;QACzBC;MACF,CAAC;MACD4B,WAAW;MACXC,eAAe;MACfjG,YAAY,EAAEqG;IAChB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEiI,QAAQA,CAAA,EAAG;IACT,MAAMhV,OAAO,GAAG,IAAI,CAACqT,cAAc,CAAC,CAAC;IACrC,MAAMwB,UAAU,GAAG7U,OAAO,CAAC0M,WAAW,CAACzM,KAAK,CAAC,CAAC,EAAED,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,CAAC;IACrF,IAAI,IAAI,CAAC0H,UAAU,CAAC/Q,MAAM,KAAKsT,UAAU,CAACtT,MAAM,EAAE;MAChD,MAAM0T,KAAK,GAAG,IAAI,CAAC3C,UAAU,CAAC4C,KAAK,CAAC,CAACC,IAAI,EAAE7O,KAAK,KAAK;QACnD,OAAOuO,UAAU,CAACvO,KAAK,CAAC,CAAC/D,MAAM,CAAC4S,IAAI,CAAC5V,SAAS,CAAC;MACjD,CAAC,CAAC;MACF,IAAI0V,KAAK,EAAE,OAAOjV,OAAO;IAC3B;IACA,IAAI,CAACsS,UAAU,GAAGuC,UAAU,CAACpT,GAAG,CAAClC,SAAS,KAAK;MAC7CgG,SAAS,EAAE,IAAI;MACfhG;IACF,CAAC,CAAC,CAAC;IACH,OAAOS,OAAO;EAChB;;EAEA;AACF;AACA;EACEoV,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC5X,SAAS,CAAC,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACQiY,eAAeA,CAACC,UAAU,EAAE;IAAA,IAAAC,MAAA;IAAA,OAAA9R,iBAAA;MAChC,OAAO,OAAO6R,UAAU,CAACE,gBAAgB,CAACD,MAAI,CAAClC,cAAc,CAAC,CAAC,CAAC,EAAErR,KAAK;IAAC;EAC1E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEyT,UAAUA,CAAC,GAAGvC,OAAO,EAAE;IACrB,IAAIA,OAAO,CAAC3R,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;IAC/B;IACA,MAAMkU,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACrD,UAAU,GAAGY,OAAO,CAAC3I,MAAM,CAAChL,SAAS,IAAI;MAC5C,MAAMmC,GAAG,GAAGnC,SAAS,CAAC6D,QAAQ,CAAC,CAAC;MAChC,IAAIsS,IAAI,CAAC7H,GAAG,CAACnM,GAAG,CAAC,EAAE;QACjB,OAAO,KAAK;MACd,CAAC,MAAM;QACLgU,IAAI,CAACvC,GAAG,CAACzR,GAAG,CAAC;QACb,OAAO,IAAI;MACb;IACF,CAAC,CAAC,CAACD,GAAG,CAAClC,SAAS,KAAK;MACnBgG,SAAS,EAAE,IAAI;MACfhG;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,IAAIA,CAAC,GAAGmT,OAAO,EAAE;IACf,IAAIA,OAAO,CAAC3R,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;IAC/B;;IAEA;IACA,MAAMkU,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,MAAMC,aAAa,GAAG,EAAE;IACxB,KAAK,MAAMC,MAAM,IAAI3C,OAAO,EAAE;MAC5B,MAAMxR,GAAG,GAAGmU,MAAM,CAACtW,SAAS,CAAC6D,QAAQ,CAAC,CAAC;MACvC,IAAIsS,IAAI,CAAC7H,GAAG,CAACnM,GAAG,CAAC,EAAE;QACjB;MACF,CAAC,MAAM;QACLgU,IAAI,CAACvC,GAAG,CAACzR,GAAG,CAAC;QACbkU,aAAa,CAAC1P,IAAI,CAAC2P,MAAM,CAAC;MAC5B;IACF;IACA,IAAI,CAACvD,UAAU,GAAGsD,aAAa,CAACnU,GAAG,CAACoU,MAAM,KAAK;MAC7CtQ,SAAS,EAAE,IAAI;MACfhG,SAAS,EAAEsW,MAAM,CAACtW;IACpB,CAAC,CAAC,CAAC;IACH,MAAMS,OAAO,GAAG,IAAI,CAACgV,QAAQ,CAAC,CAAC;IAC/B,IAAI,CAACc,YAAY,CAAC9V,OAAO,EAAE,GAAG4V,aAAa,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAAC,GAAG7C,OAAO,EAAE;IACtB,IAAIA,OAAO,CAAC3R,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;IAC/B;;IAEA;IACA,MAAMkU,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,MAAMC,aAAa,GAAG,EAAE;IACxB,KAAK,MAAMC,MAAM,IAAI3C,OAAO,EAAE;MAC5B,MAAMxR,GAAG,GAAGmU,MAAM,CAACtW,SAAS,CAAC6D,QAAQ,CAAC,CAAC;MACvC,IAAIsS,IAAI,CAAC7H,GAAG,CAACnM,GAAG,CAAC,EAAE;QACjB;MACF,CAAC,MAAM;QACLgU,IAAI,CAACvC,GAAG,CAACzR,GAAG,CAAC;QACbkU,aAAa,CAAC1P,IAAI,CAAC2P,MAAM,CAAC;MAC5B;IACF;IACA,MAAM7V,OAAO,GAAG,IAAI,CAACgV,QAAQ,CAAC,CAAC;IAC/B,IAAI,CAACc,YAAY,CAAC9V,OAAO,EAAE,GAAG4V,aAAa,CAAC;EAC9C;;EAEA;AACF;AACA;EACEE,YAAYA,CAAC9V,OAAO,EAAE,GAAGkT,OAAO,EAAE;IAChC,MAAMnE,QAAQ,GAAG/O,OAAO,CAAC5C,SAAS,CAAC,CAAC;IACpC8V,OAAO,CAACpP,OAAO,CAAC+R,MAAM,IAAI;MACxB,MAAMtQ,SAAS,GAAGxF,IAAI,CAACgP,QAAQ,EAAE8G,MAAM,CAACpW,SAAS,CAAC;MAClD,IAAI,CAACuW,aAAa,CAACH,MAAM,CAACtW,SAAS,EAAEY,QAAQ,CAACoF,SAAS,CAAC,CAAC;IAC3D,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE0Q,YAAYA,CAACvR,MAAM,EAAEa,SAAS,EAAE;IAC9B,IAAI,CAACyP,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjB,IAAI,CAACgB,aAAa,CAACtR,MAAM,EAAEa,SAAS,CAAC;EACvC;;EAEA;AACF;AACA;EACEyQ,aAAaA,CAACtR,MAAM,EAAEa,SAAS,EAAE;IAC/B5G,MAAM,CAAC4G,SAAS,CAAChE,MAAM,KAAK,EAAE,CAAC;IAC/B,MAAM+E,KAAK,GAAG,IAAI,CAACgM,UAAU,CAACvG,SAAS,CAACmK,OAAO,IAAIxR,MAAM,CAACnC,MAAM,CAAC2T,OAAO,CAAC3W,SAAS,CAAC,CAAC;IACpF,IAAI+G,KAAK,GAAG,CAAC,EAAE;MACb,MAAM,IAAI9E,KAAK,CAAC,mBAAmBkD,MAAM,CAACtB,QAAQ,CAAC,CAAC,EAAE,CAAC;IACzD;IACA,IAAI,CAACkP,UAAU,CAAChM,KAAK,CAAC,CAACf,SAAS,GAAGxI,MAAM,CAACuD,IAAI,CAACiF,SAAS,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE4Q,gBAAgBA,CAACC,oBAAoB,GAAG,IAAI,EAAE;IAC5C,MAAMC,eAAe,GAAG,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAAClB,gBAAgB,CAAC,CAAC,EAAEgB,oBAAoB,CAAC;IACvG,OAAO,CAACC,eAAe;EACzB;;EAEA;AACF;AACA;EACEC,2BAA2BA,CAACtW,OAAO,EAAEoW,oBAAoB,EAAE;IACzD,MAAMG,MAAM,GAAG,CAAC,CAAC;IACjB,KAAK,MAAM;MACThR,SAAS;MACThG;IACF,CAAC,IAAI,IAAI,CAAC+S,UAAU,EAAE;MACpB,IAAI/M,SAAS,KAAK,IAAI,EAAE;QACtB,IAAI6Q,oBAAoB,EAAE;UACxB,CAACG,MAAM,CAACC,OAAO,KAAK,EAAE,EAAEtQ,IAAI,CAAC3G,SAAS,CAAC;QACzC;MACF,CAAC,MAAM;QACL,IAAI,CAACW,MAAM,CAACqF,SAAS,EAAEvF,OAAO,EAAET,SAAS,CAACmD,OAAO,CAAC,CAAC,CAAC,EAAE;UACpD,CAAC6T,MAAM,CAACE,OAAO,KAAK,EAAE,EAAEvQ,IAAI,CAAC3G,SAAS,CAAC;QACzC;MACF;IACF;IACA,OAAOgX,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACC,OAAO,GAAGD,MAAM,GAAGrU,SAAS;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE9E,SAASA,CAACsZ,MAAM,EAAE;IAChB,MAAM;MACJN,oBAAoB;MACpBD;IACF,CAAC,GAAGtV,MAAM,CAACC,MAAM,CAAC;MAChBsV,oBAAoB,EAAE,IAAI;MAC1BD,gBAAgB,EAAE;IACpB,CAAC,EAAEO,MAAM,CAAC;IACV,MAAM3H,QAAQ,GAAG,IAAI,CAACqG,gBAAgB,CAAC,CAAC;IACxC,IAAIe,gBAAgB,EAAE;MACpB,MAAMQ,SAAS,GAAG,IAAI,CAACL,2BAA2B,CAACvH,QAAQ,EAAEqH,oBAAoB,CAAC;MAClF,IAAIO,SAAS,EAAE;QACb,IAAIC,YAAY,GAAG,gCAAgC;QACnD,IAAID,SAAS,CAACF,OAAO,EAAE;UACrBG,YAAY,IAAI,qCAAqCD,SAAS,CAACF,OAAO,CAAClV,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,OAAOoV,SAAS,CAACF,OAAO,CAAChV,GAAG,CAACoV,CAAC,IAAIA,CAAC,CAACpU,QAAQ,CAAC,CAAC,CAAC,CAACqU,IAAI,CAAC,MAAM,CAAC,MAAM;QACpK;QACA,IAAIH,SAAS,CAACH,OAAO,EAAE;UACrBI,YAAY,IAAI,qCAAqCD,SAAS,CAACH,OAAO,CAACjV,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,OAAOoV,SAAS,CAACH,OAAO,CAAC/U,GAAG,CAACoV,CAAC,IAAIA,CAAC,CAACpU,QAAQ,CAAC,CAAC,CAAC,CAACqU,IAAI,CAAC,MAAM,CAAC,MAAM;QACpK;QACA,MAAM,IAAItV,KAAK,CAACoV,YAAY,CAAC;MAC/B;IACF;IACA,OAAO,IAAI,CAACG,UAAU,CAAChI,QAAQ,CAAC;EAClC;;EAEA;AACF;AACA;EACEgI,UAAUA,CAAChI,QAAQ,EAAE;IACnB,MAAM;MACJuD;IACF,CAAC,GAAG,IAAI;IACR,MAAM0E,cAAc,GAAG,EAAE;IACzB5N,YAAY,CAAC4N,cAAc,EAAE1E,UAAU,CAAC/Q,MAAM,CAAC;IAC/C,MAAM0V,iBAAiB,GAAGD,cAAc,CAACzV,MAAM,GAAG+Q,UAAU,CAAC/Q,MAAM,GAAG,EAAE,GAAGwN,QAAQ,CAACxN,MAAM;IAC1F,MAAM2V,eAAe,GAAGna,MAAM,CAACiG,KAAK,CAACiU,iBAAiB,CAAC;IACvDtY,MAAM,CAAC2T,UAAU,CAAC/Q,MAAM,GAAG,GAAG,CAAC;IAC/BxE,MAAM,CAACuD,IAAI,CAAC0W,cAAc,CAAC,CAAC/T,IAAI,CAACiU,eAAe,EAAE,CAAC,CAAC;IACpD5E,UAAU,CAACxO,OAAO,CAAC,CAAC;MAClByB;IACF,CAAC,EAAEe,KAAK,KAAK;MACX,IAAIf,SAAS,KAAK,IAAI,EAAE;QACtB5G,MAAM,CAAC4G,SAAS,CAAChE,MAAM,KAAK,EAAE,EAAE,8BAA8B,CAAC;QAC/DxE,MAAM,CAACuD,IAAI,CAACiF,SAAS,CAAC,CAACtC,IAAI,CAACiU,eAAe,EAAEF,cAAc,CAACzV,MAAM,GAAG+E,KAAK,GAAG,EAAE,CAAC;MAClF;IACF,CAAC,CAAC;IACFyI,QAAQ,CAAC9L,IAAI,CAACiU,eAAe,EAAEF,cAAc,CAACzV,MAAM,GAAG+Q,UAAU,CAAC/Q,MAAM,GAAG,EAAE,CAAC;IAC9E5C,MAAM,CAACuY,eAAe,CAAC3V,MAAM,IAAI4D,gBAAgB,EAAE,0BAA0B+R,eAAe,CAAC3V,MAAM,MAAM4D,gBAAgB,EAAE,CAAC;IAC5H,OAAO+R,eAAe;EACxB;;EAEA;AACF;AACA;AACA;EACE,IAAI5V,IAAIA,CAAA,EAAG;IACT3C,MAAM,CAAC,IAAI,CAAC+H,YAAY,CAACnF,MAAM,KAAK,CAAC,CAAC;IACtC,OAAO,IAAI,CAACmF,YAAY,CAAC,CAAC,CAAC,CAACpF,IAAI,CAACG,GAAG,CAAC0V,MAAM,IAAIA,MAAM,CAACzS,MAAM,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;EACE,IAAIlB,SAASA,CAAA,EAAG;IACd7E,MAAM,CAAC,IAAI,CAAC+H,YAAY,CAACnF,MAAM,KAAK,CAAC,CAAC;IACtC,OAAO,IAAI,CAACmF,YAAY,CAAC,CAAC,CAAC,CAAClD,SAAS;EACvC;;EAEA;AACF;AACA;AACA;EACE,IAAItC,IAAIA,CAAA,EAAG;IACTvC,MAAM,CAAC,IAAI,CAAC+H,YAAY,CAACnF,MAAM,KAAK,CAAC,CAAC;IACtC,OAAO,IAAI,CAACmF,YAAY,CAAC,CAAC,CAAC,CAACxF,IAAI;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAOZ,IAAIA,CAACC,MAAM,EAAE;IAClB;IACA,IAAI6L,SAAS,GAAG,CAAC,GAAG7L,MAAM,CAAC;IAC3B,MAAMyW,cAAc,GAAGlO,YAAY,CAACsD,SAAS,CAAC;IAC9C,IAAIkG,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+H,cAAc,EAAE/H,CAAC,EAAE,EAAE;MACvC,MAAM1J,SAAS,GAAG8G,aAAa,CAACD,SAAS,EAAE,CAAC,EAAE/G,yBAAyB,CAAC;MACxEiN,UAAU,CAACpM,IAAI,CAAChJ,IAAI,CAAC6D,MAAM,CAAChE,MAAM,CAACuD,IAAI,CAACiF,SAAS,CAAC,CAAC,CAAC;IACtD;IACA,OAAO8M,WAAW,CAAC+E,QAAQ,CAAC3K,OAAO,CAACnM,IAAI,CAAC8L,SAAS,CAAC,EAAEkG,UAAU,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO8E,QAAQA,CAACpX,OAAO,EAAEsS,UAAU,GAAG,EAAE,EAAE;IACxC,MAAMxD,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACnC,eAAe,GAAG3M,OAAO,CAAC2M,eAAe;IACrD,IAAI3M,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,GAAG,CAAC,EAAE;MAC5CkE,WAAW,CAACyD,QAAQ,GAAGvS,OAAO,CAAC0M,WAAW,CAAC,CAAC,CAAC;IAC/C;IACA4F,UAAU,CAACxO,OAAO,CAAC,CAACyB,SAAS,EAAEe,KAAK,KAAK;MACvC,MAAM+Q,aAAa,GAAG;QACpB9R,SAAS,EAAEA,SAAS,IAAIrI,IAAI,CAAC6D,MAAM,CAACkR,iBAAiB,CAAC,GAAG,IAAI,GAAG/U,IAAI,CAAC+D,MAAM,CAACsE,SAAS,CAAC;QACtFhG,SAAS,EAAES,OAAO,CAAC0M,WAAW,CAACpG,KAAK;MACtC,CAAC;MACDwI,WAAW,CAACwD,UAAU,CAACpM,IAAI,CAACmR,aAAa,CAAC;IAC5C,CAAC,CAAC;IACFrX,OAAO,CAAC0G,YAAY,CAAC5C,OAAO,CAACiD,WAAW,IAAI;MAC1C,MAAMzF,IAAI,GAAGyF,WAAW,CAACiG,QAAQ,CAACvL,GAAG,CAACoL,OAAO,IAAI;QAC/C,MAAMnI,MAAM,GAAG1E,OAAO,CAAC0M,WAAW,CAACG,OAAO,CAAC;QAC3C,OAAO;UACLnI,MAAM;UACNmF,QAAQ,EAAEiF,WAAW,CAACwD,UAAU,CAACgF,IAAI,CAACH,MAAM,IAAIA,MAAM,CAAC5X,SAAS,CAAC6D,QAAQ,CAAC,CAAC,KAAKsB,MAAM,CAACtB,QAAQ,CAAC,CAAC,CAAC,IAAIpD,OAAO,CAACqN,eAAe,CAACR,OAAO,CAAC;UACtI/C,UAAU,EAAE9J,OAAO,CAACsN,iBAAiB,CAACT,OAAO;QAC/C,CAAC;MACH,CAAC,CAAC;MACFiC,WAAW,CAACpI,YAAY,CAACR,IAAI,CAAC,IAAIiM,sBAAsB,CAAC;QACvD7Q,IAAI;QACJkC,SAAS,EAAExD,OAAO,CAAC0M,WAAW,CAAC3F,WAAW,CAACC,cAAc,CAAC;QAC1D9F,IAAI,EAAEhE,IAAI,CAAC+D,MAAM,CAAC8F,WAAW,CAAC7F,IAAI;MACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IACF4N,WAAW,CAAC6D,QAAQ,GAAG3S,OAAO;IAC9B8O,WAAW,CAAC8D,KAAK,GAAG9D,WAAW,CAACnM,MAAM,CAAC,CAAC;IACxC,OAAOmM,WAAW;EACpB;AACF;AAEA,MAAMyI,kBAAkB,CAAC;EACvB5W,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAACc,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC1G,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACiG,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACS,QAAQ,GAAGd,IAAI,CAACc,QAAQ;IAC7B,IAAI,CAAC1G,YAAY,GAAG4F,IAAI,CAAC5F,YAAY;IACrC,IAAI,CAACiG,eAAe,GAAGL,IAAI,CAACK,eAAe;EAC7C;EACA,OAAO6K,SAASA,CAACxX,OAAO,EAAEsM,IAAI,EAAE;IAC9B,MAAM;MACJ3B,MAAM;MACNoC,oBAAoB;MACpBJ;IACF,CAAC,GAAG3M,OAAO;IACX,MAAM;MACJ4K,qBAAqB;MACrBC,yBAAyB;MACzBC;IACF,CAAC,GAAGH,MAAM;IACV,MAAMgD,yBAAyB,GAAG/C,qBAAqB,GAAGC,yBAAyB;IACnFlM,MAAM,CAACgP,yBAAyB,GAAG,CAAC,EAAE,2BAA2B,CAAC;IAClE,MAAMD,2BAA2B,GAAG1N,OAAO,CAAC+F,iBAAiB,CAACxE,MAAM,GAAGqJ,qBAAqB,GAAGE,2BAA2B;IAC1HnM,MAAM,CAAC+O,2BAA2B,IAAI,CAAC,EAAE,2BAA2B,CAAC;IACrE,MAAMhB,WAAW,GAAG1M,OAAO,CAACkN,cAAc,CAACZ,IAAI,CAAC;IAChD,MAAMc,QAAQ,GAAGV,WAAW,CAACrG,GAAG,CAAC,CAAC,CAAC;IACnC,IAAI+G,QAAQ,KAAKlL,SAAS,EAAE;MAC1B,MAAM,IAAIV,KAAK,CAAC,gEAAgE,CAAC;IACnF;IACA,MAAMkF,YAAY,GAAG,EAAE;IACvB,KAAK,MAAM+Q,UAAU,IAAI1K,oBAAoB,EAAE;MAC7C,MAAMzL,IAAI,GAAG,EAAE;MACf,KAAK,MAAMwF,QAAQ,IAAI2Q,UAAU,CAACxQ,iBAAiB,EAAE;QACnD,MAAMvC,MAAM,GAAGgI,WAAW,CAACrG,GAAG,CAACS,QAAQ,CAAC;QACxC,IAAIpC,MAAM,KAAKxC,SAAS,EAAE;UACxB,MAAM,IAAIV,KAAK,CAAC,4CAA4CsF,QAAQ,EAAE,CAAC;QACzE;QACA,MAAM+C,QAAQ,GAAG/C,QAAQ,GAAG8D,qBAAqB;QACjD,IAAId,UAAU;QACd,IAAID,QAAQ,EAAE;UACZC,UAAU,GAAGhD,QAAQ,GAAG6G,yBAAyB;QACnD,CAAC,MAAM,IAAI7G,QAAQ,GAAG4F,WAAW,CAAC3G,iBAAiB,CAACxE,MAAM,EAAE;UAC1DuI,UAAU,GAAGhD,QAAQ,GAAG8D,qBAAqB,GAAG8C,2BAA2B;QAC7E,CAAC,MAAM;UACL5D,UAAU,GAAGhD,QAAQ,GAAG4F,WAAW,CAAC3G,iBAAiB,CAACxE,MAAM;UAC5D;UACAmL,WAAW,CAAC1G,sBAAsB,CAACG,QAAQ,CAAC5E,MAAM;QACpD;QACAD,IAAI,CAAC4E,IAAI,CAAC;UACRxB,MAAM;UACNmF,QAAQ,EAAE/C,QAAQ,GAAG6D,MAAM,CAACC,qBAAqB;UACjDd;QACF,CAAC,CAAC;MACJ;MACA,MAAMtG,SAAS,GAAGkJ,WAAW,CAACrG,GAAG,CAACoR,UAAU,CAACzQ,cAAc,CAAC;MAC5D,IAAIxD,SAAS,KAAKtB,SAAS,EAAE;QAC3B,MAAM,IAAIV,KAAK,CAAC,kDAAkDiW,UAAU,CAACzQ,cAAc,EAAE,CAAC;MAChG;MACAN,YAAY,CAACR,IAAI,CAAC,IAAIiM,sBAAsB,CAAC;QAC3C3O,SAAS;QACTtC,IAAI,EAAEf,QAAQ,CAACsX,UAAU,CAACvW,IAAI,CAAC;QAC/BI;MACF,CAAC,CAAC,CAAC;IACL;IACA,OAAO,IAAIiW,kBAAkB,CAAC;MAC5BnK,QAAQ;MACR1G,YAAY;MACZiG;IACF,CAAC,CAAC;EACJ;EACA+K,sBAAsBA,CAAA,EAAG;IACvB,OAAOjL,OAAO,CAAC/C,OAAO,CAAC;MACrB0D,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBT,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCjG,YAAY,EAAE,IAAI,CAACA;IACrB,CAAC,CAAC;EACJ;EACAiR,kBAAkBA,CAACnI,0BAA0B,EAAE;IAC7C,OAAOJ,SAAS,CAAC1F,OAAO,CAAC;MACvB0D,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBT,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCjG,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/B8I;IACF,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA,MAAMoI,oBAAoB,CAAC;EACzB,IAAI9K,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC9M,OAAO,CAAC8M,OAAO;EAC7B;EACAnM,WAAWA,CAACX,OAAO,EAAEsS,UAAU,EAAE;IAC/B,IAAI,CAACA,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACtS,OAAO,GAAG,KAAK,CAAC;IACrB,IAAIsS,UAAU,KAAKpQ,SAAS,EAAE;MAC5BvD,MAAM,CAAC2T,UAAU,CAAC/Q,MAAM,KAAKvB,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,EAAE,6EAA6E,CAAC;MACjJ,IAAI,CAAC0H,UAAU,GAAGA,UAAU;IAC9B,CAAC,MAAM;MACL,MAAMuF,iBAAiB,GAAG,EAAE;MAC5B,KAAK,IAAI5I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjP,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,EAAEqE,CAAC,EAAE,EAAE;QAC7D4I,iBAAiB,CAAC3R,IAAI,CAAC,IAAIxG,UAAU,CAAC2F,yBAAyB,CAAC,CAAC;MACnE;MACA,IAAI,CAACiN,UAAU,GAAGuF,iBAAiB;IACrC;IACA,IAAI,CAAC7X,OAAO,GAAGA,OAAO;EACxB;EACA5C,SAASA,CAAA,EAAG;IACV,MAAMwT,iBAAiB,GAAG,IAAI,CAAC5Q,OAAO,CAAC5C,SAAS,CAAC,CAAC;IAClD,MAAM0a,uBAAuB,GAAGpP,KAAK,CAAC,CAAC;IACvCU,YAAY,CAAC0O,uBAAuB,EAAE,IAAI,CAACxF,UAAU,CAAC/Q,MAAM,CAAC;IAC7D,MAAMwW,iBAAiB,GAAGxa,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACC,IAAI,CAACsa,uBAAuB,CAACvW,MAAM,EAAE,yBAAyB,CAAC,EAAEhE,YAAY,CAACqR,GAAG,CAACrJ,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC+M,UAAU,CAAC/Q,MAAM,EAAE,YAAY,CAAC,EAAEhE,YAAY,CAACC,IAAI,CAACoT,iBAAiB,CAACrP,MAAM,EAAE,mBAAmB,CAAC,CAAC,CAAC;IACpQ,MAAMyW,qBAAqB,GAAG,IAAItY,UAAU,CAAC,IAAI,CAAC;IAClD,MAAMuY,2BAA2B,GAAGF,iBAAiB,CAAChX,MAAM,CAAC;MAC3D+W,uBAAuB,EAAE,IAAIpY,UAAU,CAACoY,uBAAuB,CAAC;MAChExF,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3B1B;IACF,CAAC,EAAEoH,qBAAqB,CAAC;IACzB,OAAOA,qBAAqB,CAAC/X,KAAK,CAAC,CAAC,EAAEgY,2BAA2B,CAAC;EACpE;EACA,OAAO5a,WAAWA,CAAC2a,qBAAqB,EAAE;IACxC,IAAI5L,SAAS,GAAG,CAAC,GAAG4L,qBAAqB,CAAC;IAC1C,MAAM1F,UAAU,GAAG,EAAE;IACrB,MAAM4F,gBAAgB,GAAGpP,YAAY,CAACsD,SAAS,CAAC;IAChD,KAAK,IAAI6C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiJ,gBAAgB,EAAEjJ,CAAC,EAAE,EAAE;MACzCqD,UAAU,CAACpM,IAAI,CAAC,IAAIxG,UAAU,CAAC2M,aAAa,CAACD,SAAS,EAAE,CAAC,EAAE/G,yBAAyB,CAAC,CAAC,CAAC;IACzF;IACA,MAAMrF,OAAO,GAAG8R,gBAAgB,CAACzU,WAAW,CAAC,IAAIqC,UAAU,CAAC0M,SAAS,CAAC,CAAC;IACvE,OAAO,IAAIwL,oBAAoB,CAAC5X,OAAO,EAAEsS,UAAU,CAAC;EACtD;EACAvS,IAAIA,CAACmT,OAAO,EAAE;IACZ,MAAMiF,WAAW,GAAG,IAAI,CAACnY,OAAO,CAAC5C,SAAS,CAAC,CAAC;IAC5C,MAAMgb,aAAa,GAAG,IAAI,CAACpY,OAAO,CAAC+F,iBAAiB,CAAC9F,KAAK,CAAC,CAAC,EAAE,IAAI,CAACD,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,CAAC;IACxG,KAAK,MAAMiL,MAAM,IAAI3C,OAAO,EAAE;MAC5B,MAAMmF,WAAW,GAAGD,aAAa,CAACrM,SAAS,CAACrH,MAAM,IAAIA,MAAM,CAACnC,MAAM,CAACsT,MAAM,CAACtW,SAAS,CAAC,CAAC;MACtFZ,MAAM,CAAC0Z,WAAW,IAAI,CAAC,EAAE,mCAAmCxC,MAAM,CAACtW,SAAS,CAACkD,QAAQ,CAAC,CAAC,EAAE,CAAC;MAC1F,IAAI,CAAC6P,UAAU,CAAC+F,WAAW,CAAC,GAAGtY,IAAI,CAACoY,WAAW,EAAEtC,MAAM,CAACpW,SAAS,CAAC;IACpE;EACF;EACAwW,YAAYA,CAAC1W,SAAS,EAAEgG,SAAS,EAAE;IACjC5G,MAAM,CAAC4G,SAAS,CAAC9E,UAAU,KAAK,EAAE,EAAE,iCAAiC,CAAC;IACtE,MAAM2X,aAAa,GAAG,IAAI,CAACpY,OAAO,CAAC+F,iBAAiB,CAAC9F,KAAK,CAAC,CAAC,EAAE,IAAI,CAACD,OAAO,CAAC2K,MAAM,CAACC,qBAAqB,CAAC;IACxG,MAAMyN,WAAW,GAAGD,aAAa,CAACrM,SAAS,CAACrH,MAAM,IAAIA,MAAM,CAACnC,MAAM,CAAChD,SAAS,CAAC,CAAC;IAC/EZ,MAAM,CAAC0Z,WAAW,IAAI,CAAC,EAAE,4BAA4B9Y,SAAS,CAACkD,QAAQ,CAAC,CAAC,6CAA6C,CAAC;IACvH,IAAI,CAAC6P,UAAU,CAAC+F,WAAW,CAAC,GAAG9S,SAAS;EAC1C;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM+S,oBAAoB,GAAG,GAAG;;AAEhC;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,EAAE;;AAEjC;AACA;AACA;AACA,MAAMC,oBAAoB,GAAGF,oBAAoB,GAAGC,sBAAsB;;AAE1E;AACA;AACA;AACA,MAAME,WAAW,GAAG,IAAI,GAAGD,oBAAoB;AAE/C,MAAME,mBAAmB,GAAG,IAAItW,SAAS,CAAC,6CAA6C,CAAC;AACxF,MAAMuW,4BAA4B,GAAG,IAAIvW,SAAS,CAAC,6CAA6C,CAAC;AACjG,MAAMwW,0BAA0B,GAAG,IAAIxW,SAAS,CAAC,6CAA6C,CAAC;AAC/F,MAAMyW,gCAAgC,GAAG,IAAIzW,SAAS,CAAC,6CAA6C,CAAC;AACrG,MAAM0W,kBAAkB,GAAG,IAAI1W,SAAS,CAAC,6CAA6C,CAAC;AACvF,MAAM2W,qBAAqB,GAAG,IAAI3W,SAAS,CAAC,6CAA6C,CAAC;AAC1F,MAAM4W,yBAAyB,GAAG,IAAI5W,SAAS,CAAC,6CAA6C,CAAC;AAC9F,MAAM6W,0BAA0B,GAAG,IAAI7W,SAAS,CAAC,6CAA6C,CAAC;AAC/F,MAAM8W,2BAA2B,GAAG,IAAI9W,SAAS,CAAC,6CAA6C,CAAC;AAEhG,MAAM+W,oBAAoB,SAAS3X,KAAK,CAAC;EACvCb,WAAWA,CAAC;IACVyY,MAAM;IACN7T,SAAS;IACT8T,kBAAkB;IAClBC;EACF,CAAC,EAAE;IACD,MAAMC,eAAe,GAAGD,IAAI,GAAG,WAAWhG,IAAI,CAACC,SAAS,CAAC+F,IAAI,CAACrZ,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,GAAG,EAAE;IAC3F,MAAMuZ,SAAS,GAAG,iFAAiF;IACnG,IAAIxZ,OAAO;IACX,QAAQoZ,MAAM;MACZ,KAAK,MAAM;QACTpZ,OAAO,GAAG,eAAeuF,SAAS,2BAA2B,GAAG,GAAG8T,kBAAkB,IAAI,GAAGE,eAAe,GAAGC,SAAS;QACvH;MACF,KAAK,UAAU;QACbxZ,OAAO,GAAG,iCAAiCqZ,kBAAkB,MAAM,GAAGE,eAAe,GAAGC,SAAS;QACjG;MACF;QACE;UACExZ,OAAO,GAAG,mBAAmB,CAACyZ,CAAC,IAAIA,CAAC,EAAEL,MAAM,CAAC,GAAG;QAClD;IACJ;IACA,KAAK,CAACpZ,OAAO,CAAC;IACd,IAAI,CAACuF,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAAC8T,kBAAkB,GAAG,KAAK,CAAC;IAChC,IAAI,CAACK,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACnU,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC8T,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACK,eAAe,GAAGJ,IAAI,GAAGA,IAAI,GAAGpX,SAAS;EAChD;EACA,IAAIyX,gBAAgBA,CAAA,EAAG;IACrB,OAAO;MACL3Z,OAAO,EAAE,IAAI,CAACqZ,kBAAkB;MAChCC,IAAI,EAAE5Q,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC+Q,eAAe,CAAC,GAAG,IAAI,CAACA,eAAe,GAAGxX;IACrE,CAAC;EACH;;EAEA;EACA,IAAIoX,IAAIA,CAAA,EAAG;IACT,MAAMM,UAAU,GAAG,IAAI,CAACF,eAAe;IACvC,IAAIE,UAAU,IAAI,IAAI,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAI,MAAM,IAAIA,UAAU,EAAE;MAChF,OAAO1X,SAAS;IAClB;IACA,OAAO0X,UAAU;EACnB;EACMC,OAAOA,CAACvE,UAAU,EAAE;IAAA,IAAAwE,MAAA;IAAA,OAAArW,iBAAA;MACxB,IAAI,CAACiF,KAAK,CAACC,OAAO,CAACmR,MAAI,CAACJ,eAAe,CAAC,EAAE;QACxCI,MAAI,CAACJ,eAAe,GAAG,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACtD3E,UAAU,CAAC4E,cAAc,CAACJ,MAAI,CAACvU,SAAS,CAAC,CAAC4U,IAAI,CAACC,EAAE,IAAI;YACnD,IAAIA,EAAE,IAAIA,EAAE,CAAClT,IAAI,IAAIkT,EAAE,CAAClT,IAAI,CAACmT,WAAW,EAAE;cACxC,MAAMf,IAAI,GAAGc,EAAE,CAAClT,IAAI,CAACmT,WAAW;cAChCP,MAAI,CAACJ,eAAe,GAAGJ,IAAI;cAC3BU,OAAO,CAACV,IAAI,CAAC;YACf,CAAC,MAAM;cACLW,MAAM,CAAC,IAAIzY,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC7C;UACF,CAAC,CAAC,CAAC8Y,KAAK,CAACL,MAAM,CAAC;QAClB,CAAC,CAAC;MACJ;MACA,aAAaH,MAAI,CAACJ,eAAe;IAAC;EACpC;AACF;;AAEA;AACA;AACA,MAAMa,sBAAsB,GAAG;EAC7BC,sCAAsC,EAAE,CAAC,KAAK;EAC9CC,wDAAwD,EAAE,CAAC,KAAK;EAChEC,gEAAgE,EAAE,CAAC,KAAK;EACxEC,yCAAyC,EAAE,CAAC,KAAK;EACjDC,oCAAoC,EAAE,CAAC,KAAK;EAC5CC,iEAAiE,EAAE,CAAC,KAAK;EACzEC,kCAAkC,EAAE,CAAC,KAAK;EAC1CC,iCAAiC,EAAE,CAAC,KAAK;EACzCC,oDAAoD,EAAE,CAAC,KAAK;EAC5DC,uDAAuD,EAAE,CAAC,KAAK;EAC/DC,uDAAuD,EAAE,CAAC,KAAK;EAC/DC,mBAAmB,EAAE,CAAC,KAAK;EAC3BC,wDAAwD,EAAE,CAAC,KAAK;EAChEC,oDAAoD,EAAE,CAAC,KAAK;EAC5DC,qDAAqD,EAAE,CAAC,KAAK;EAC7DC,kDAAkD,EAAE,CAAC;AACvD,CAAC;AACD,MAAMC,kBAAkB,SAASha,KAAK,CAAC;EACrCb,WAAWA,CAAC;IACV8a,IAAI;IACJzb,OAAO;IACPkB;EACF,CAAC,EAAEwa,aAAa,EAAE;IAChB,KAAK,CAACA,aAAa,IAAI,IAAI,GAAG,GAAGA,aAAa,KAAK1b,OAAO,EAAE,GAAGA,OAAO,CAAC;IACvE,IAAI,CAACyb,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACva,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACua,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACva,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACya,IAAI,GAAG,oBAAoB;EAClC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAWeC,yBAAyBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA,EA+CxC;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAxY,iBAAA,CA/CA,WAAyC6R,UAAU,EAAExG,WAAW,EAAEoE,OAAO,EAAEgB,OAAO,EAAE;IAClF,MAAMkI,WAAW,GAAGlI,OAAO,IAAI;MAC7BmI,aAAa,EAAEnI,OAAO,CAACmI,aAAa;MACpCC,mBAAmB,EAAEpI,OAAO,CAACoI,mBAAmB,IAAIpI,OAAO,CAACqI,UAAU;MACtEC,UAAU,EAAEtI,OAAO,CAACsI,UAAU;MAC9BzJ,cAAc,EAAEmB,OAAO,CAACnB;IAC1B,CAAC;IACD,MAAMxN,SAAS,SAAS+P,UAAU,CAACmH,eAAe,CAAC3N,WAAW,EAAEoE,OAAO,EAAEkJ,WAAW,CAAC;IACrF,IAAIM,MAAM;IACV,IAAI5N,WAAW,CAACnC,eAAe,IAAI,IAAI,IAAImC,WAAW,CAAC0D,oBAAoB,IAAI,IAAI,EAAE;MACnFkK,MAAM,GAAG,OAAOpH,UAAU,CAACqH,kBAAkB,CAAC;QAC5CC,WAAW,EAAE1I,OAAO,EAAE0I,WAAW;QACjCrX,SAAS,EAAEA,SAAS;QACpByN,SAAS,EAAElE,WAAW,CAACnC,eAAe;QACtC6F,oBAAoB,EAAE1D,WAAW,CAAC0D;MACpC,CAAC,EAAE0B,OAAO,IAAIA,OAAO,CAACqI,UAAU,CAAC,EAAEva,KAAK;IAC1C,CAAC,MAAM,IAAI8M,WAAW,CAAC4D,mBAAmB,IAAI,IAAI,IAAI5D,WAAW,CAAC2D,SAAS,IAAI,IAAI,EAAE;MACnF,MAAM;QACJQ;MACF,CAAC,GAAGnE,WAAW,CAAC2D,SAAS;MACzB,MAAMoK,kBAAkB,GAAG5J,gBAAgB,CAAC3R,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC1DgY,MAAM,GAAG,OAAOpH,UAAU,CAACqH,kBAAkB,CAAC;QAC5CC,WAAW,EAAE1I,OAAO,EAAE0I,WAAW;QACjC7J,cAAc,EAAEjE,WAAW,CAAC4D,mBAAmB;QAC/CmK,kBAAkB;QAClBC,UAAU,EAAEhO,WAAW,CAAC2D,SAAS,CAACtO,KAAK;QACvCoB;MACF,CAAC,EAAE2O,OAAO,IAAIA,OAAO,CAACqI,UAAU,CAAC,EAAEva,KAAK;IAC1C,CAAC,MAAM;MACL,IAAIkS,OAAO,EAAE0I,WAAW,IAAI,IAAI,EAAE;QAChCpJ,OAAO,CAACC,IAAI,CAAC,yFAAyF,GAAG,wFAAwF,GAAG,0EAA0E,CAAC;MACjR;MACAiJ,MAAM,GAAG,OAAOpH,UAAU,CAACqH,kBAAkB,CAACpX,SAAS,EAAE2O,OAAO,IAAIA,OAAO,CAACqI,UAAU,CAAC,EAAEva,KAAK;IAChG;IACA,IAAI0a,MAAM,CAACpY,GAAG,EAAE;MACd,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB,MAAM,IAAI4T,oBAAoB,CAAC;UAC7BC,MAAM,EAAE,MAAM;UACd7T,SAAS,EAAEA,SAAS;UACpB8T,kBAAkB,EAAE,YAAY/F,IAAI,CAACC,SAAS,CAACmJ,MAAM,CAAC;QACxD,CAAC,CAAC;MACJ;MACA,MAAM,IAAIlb,KAAK,CAAC,eAAe+D,SAAS,YAAY+N,IAAI,CAACC,SAAS,CAACmJ,MAAM,CAAC,GAAG,CAAC;IAChF;IACA,OAAOnX,SAAS;EAClB,CAAC;EAAA,OAAA0W,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,SAASY,KAAKA,CAACC,EAAE,EAAE;EACjB,OAAO,IAAIjD,OAAO,CAACC,OAAO,IAAIiD,UAAU,CAACjD,OAAO,EAAEgD,EAAE,CAAC,CAAC;AACxD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASE,UAAUA,CAACjf,IAAI,EAAE4G,MAAM,EAAE;EAChC,MAAMsY,WAAW,GAAGlf,IAAI,CAAC4K,MAAM,CAACd,IAAI,IAAI,CAAC,GAAG9J,IAAI,CAAC4K,MAAM,CAACd,IAAI,GAAGO,QAAQ,CAACrK,IAAI,EAAE4G,MAAM,CAAC;EACrF,MAAM3D,IAAI,GAAGnE,MAAM,CAACiG,KAAK,CAACma,WAAW,CAAC;EACtC,MAAMC,YAAY,GAAGvc,MAAM,CAACC,MAAM,CAAC;IACjCiG,WAAW,EAAE9I,IAAI,CAACqI;EACpB,CAAC,EAAEzB,MAAM,CAAC;EACV5G,IAAI,CAAC4K,MAAM,CAAC9H,MAAM,CAACqc,YAAY,EAAElc,IAAI,CAAC;EACtC,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA,SAASmc,YAAYA,CAACpf,IAAI,EAAEsC,MAAM,EAAE;EAClC,IAAIW,IAAI;EACR,IAAI;IACFA,IAAI,GAAGjD,IAAI,CAAC4K,MAAM,CAAC5H,MAAM,CAACV,MAAM,CAAC;EACnC,CAAC,CAAC,OAAO+D,GAAG,EAAE;IACZ,MAAM,IAAI9C,KAAK,CAAC,uBAAuB,GAAG8C,GAAG,CAAC;EAChD;EACA,IAAIpD,IAAI,CAAC6F,WAAW,KAAK9I,IAAI,CAACqI,KAAK,EAAE;IACnC,MAAM,IAAI9E,KAAK,CAAC,mDAAmDN,IAAI,CAAC6F,WAAW,OAAO9I,IAAI,CAACqI,KAAK,EAAE,CAAC;EACzG;EACA,OAAOpF,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMoc,mBAAmB,GAAG/f,YAAY,CAACggB,IAAI,CAAC,sBAAsB,CAAC;;AAErE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAGjgB,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,SAAS,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,OAAO,CAAC,EAAEhI,SAAS,CAAC,kBAAkB,CAAC,EAAEA,SAAS,CAAC,OAAO,CAAC,EAAEhC,YAAY,CAAC+J,MAAM,CAAC,CAACgW,mBAAmB,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC;AACxN,MAAMG,oBAAoB,GAAGD,kBAAkB,CAACzV,IAAI;;AAEpD;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM2V,YAAY,CAAC;EACjB;AACF;AACA;EACE/c,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAACqR,gBAAgB,GAAG,KAAK,CAAC;IAC9B,IAAI,CAACxZ,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACyZ,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACD,gBAAgB,GAAGrR,IAAI,CAACqR,gBAAgB;IAC7C,IAAI,CAACxZ,KAAK,GAAGmI,IAAI,CAACnI,KAAK;IACvB,IAAI,CAACyZ,aAAa,GAAGtR,IAAI,CAACsR,aAAa;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,eAAeA,CAACtd,MAAM,EAAE;IAC7B,MAAMud,YAAY,GAAGN,kBAAkB,CAACvc,MAAM,CAACd,QAAQ,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;IACnE,OAAO,IAAImd,YAAY,CAAC;MACtBC,gBAAgB,EAAE,IAAIvb,SAAS,CAAC0b,YAAY,CAACH,gBAAgB,CAAC;MAC9DxZ,KAAK,EAAE,IAAI/B,SAAS,CAAC0b,YAAY,CAAC3Z,KAAK,CAAC,CAACf,QAAQ,CAAC,CAAC;MACnDwa,aAAa,EAAEE,YAAY,CAACF;IAC9B,CAAC,CAAC;EACJ;AACF;AAEA,SAASG,GAAGA,CAAC5W,QAAQ,EAAE;EACrB,MAAM0B,MAAM,GAAGrL,IAAI,CAAC,CAAC,CAAC,aAAa2J,QAAQ,CAAC;EAC5C,MAAMlG,MAAM,GAAG4H,MAAM,CAAC5H,MAAM,CAACyG,IAAI,CAACmB,MAAM,CAAC;EACzC,MAAM9H,MAAM,GAAG8H,MAAM,CAAC9H,MAAM,CAAC2G,IAAI,CAACmB,MAAM,CAAC;EACzC,MAAMmV,YAAY,GAAGnV,MAAM;EAC3B,MAAMoV,KAAK,GAAGxgB,WAAW,CAAC,CAAC;EAC3BugB,YAAY,CAAC/c,MAAM,GAAG,CAACV,MAAM,EAAEiH,MAAM,KAAK;IACxC,MAAM0W,GAAG,GAAGjd,MAAM,CAACV,MAAM,EAAEiH,MAAM,CAAC;IAClC,OAAOyW,KAAK,CAAChd,MAAM,CAACid,GAAG,CAAC;EAC1B,CAAC;EACDF,YAAY,CAACjd,MAAM,GAAG,CAACod,MAAM,EAAE5d,MAAM,EAAEiH,MAAM,KAAK;IAChD,MAAM0W,GAAG,GAAGD,KAAK,CAACld,MAAM,CAACod,MAAM,CAAC;IAChC,OAAOpd,MAAM,CAACmd,GAAG,EAAE3d,MAAM,EAAEiH,MAAM,CAAC;EACpC,CAAC;EACD,OAAOwW,YAAY;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAMI,iBAAiB,CAAC;EACtB;AACF;AACA;EACEzd,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;EACE,OAAO0d,qBAAqBA,CAACtX,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM+a,qBAAqB,GAAGhhB,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC;IAC7D,MAAMiX,SAAS,GAAGD,qBAAqB,CAACtd,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC;IAChE,IAAIjD,IAAI;IACR,KAAK,MAAM,CAACwgB,MAAM,EAAE5V,MAAM,CAAC,IAAIhI,MAAM,CAACwJ,OAAO,CAACqU,0BAA0B,CAAC,EAAE;MACzE,IAAI7V,MAAM,CAACvC,KAAK,IAAIkY,SAAS,EAAE;QAC7BvgB,IAAI,GAAGwgB,MAAM;QACb;MACF;IACF;IACA,IAAI,CAACxgB,IAAI,EAAE;MACT,MAAM,IAAIuD,KAAK,CAAC,qDAAqD,CAAC;IACxE;IACA,OAAOvD,IAAI;EACb;;EAEA;AACF;AACA;EACE,OAAO0gB,mBAAmBA,CAAC5X,WAAW,EAAE;IACtC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud,QAAQ;MACRC,KAAK;MACLtb;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACK,MAAM,EAAEhY,WAAW,CAAC7F,IAAI,CAAC;IACrE,OAAO;MACL8d,UAAU,EAAEjY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCua,gBAAgB,EAAElY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cma,QAAQ;MACRC,KAAK;MACLtb,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO0b,cAAcA,CAACnY,WAAW,EAAE;IACjC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud;IACF,CAAC,GAAGxB,YAAY,CAACqB,0BAA0B,CAACS,QAAQ,EAAEpY,WAAW,CAAC7F,IAAI,CAAC;IACvE,OAAO;MACL8d,UAAU,EAAEjY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtC0a,QAAQ,EAAErY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACpCma;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOQ,sBAAsBA,CAACtY,WAAW,EAAE;IACzC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud,QAAQ;MACRtb,IAAI;MACJC;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACY,gBAAgB,EAAEvY,WAAW,CAAC7F,IAAI,CAAC;IAC/E,OAAO;MACL8d,UAAU,EAAEjY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtC6a,UAAU,EAAExY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtC0a,QAAQ,EAAErY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACpCma,QAAQ;MACRtb,IAAI;MACJC,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOgc,cAAcA,CAACzY,WAAW,EAAE;IACjC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJwd;IACF,CAAC,GAAGzB,YAAY,CAACqB,0BAA0B,CAACe,QAAQ,EAAE1Y,WAAW,CAAC7F,IAAI,CAAC;IACvE,OAAO;MACLwe,aAAa,EAAE3Y,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACzCoa;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOa,sBAAsBA,CAAC5Y,WAAW,EAAE;IACzC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJse,IAAI;MACJrc,IAAI;MACJub,KAAK;MACLtb;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACmB,gBAAgB,EAAE9Y,WAAW,CAAC7F,IAAI,CAAC;IAC/E,OAAO;MACLwe,aAAa,EAAE3Y,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACzC6a,UAAU,EAAE,IAAInd,SAAS,CAACwd,IAAI,CAAC;MAC/Brc,IAAI;MACJub,KAAK;MACLtb,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOsc,YAAYA,CAAC/Y,WAAW,EAAE;IAC/B,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJkC;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACqB,MAAM,EAAEhZ,WAAW,CAAC7F,IAAI,CAAC;IACrE,OAAO;MACLwe,aAAa,EAAE3Y,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACzClB,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOwc,oBAAoBA,CAACjZ,WAAW,EAAE;IACvC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJse,IAAI;MACJrc,IAAI;MACJC;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACuB,cAAc,EAAElZ,WAAW,CAAC7F,IAAI,CAAC;IAC7E,OAAO;MACLwe,aAAa,EAAE3Y,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACzC6a,UAAU,EAAE,IAAInd,SAAS,CAACwd,IAAI,CAAC;MAC/Brc,IAAI;MACJC,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO0c,oBAAoBA,CAACnZ,WAAW,EAAE;IACvC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJse,IAAI;MACJrc,IAAI;MACJsb,QAAQ;MACRC,KAAK;MACLtb;IACF,CAAC,GAAG6Z,YAAY,CAACqB,0BAA0B,CAACyB,cAAc,EAAEpZ,WAAW,CAAC7F,IAAI,CAAC;IAC7E,OAAO;MACL8d,UAAU,EAAEjY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCua,gBAAgB,EAAElY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5C6a,UAAU,EAAE,IAAInd,SAAS,CAACwd,IAAI,CAAC;MAC/Brc,IAAI;MACJsb,QAAQ;MACRC,KAAK;MACLtb,SAAS,EAAE,IAAIpB,SAAS,CAACoB,SAAS;IACpC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO4c,qBAAqBA,CAACrZ,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJ0G;IACF,CAAC,GAAGqV,YAAY,CAACqB,0BAA0B,CAAC2B,sBAAsB,EAAEtZ,WAAW,CAAC7F,IAAI,CAAC;IACrF,OAAO;MACLof,WAAW,EAAEvZ,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCiZ,gBAAgB,EAAE,IAAIvb,SAAS,CAAC4F,UAAU;IAC5C,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOuY,kBAAkBA,CAACxZ,WAAW,EAAE;IACrC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC+b,YAAY,CAACqB,0BAA0B,CAAC8B,mBAAmB,EAAEzZ,WAAW,CAAC7F,IAAI,CAAC;IAC9E,OAAO;MACLof,WAAW,EAAEvZ,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACxC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO+b,mBAAmBA,CAAC1Z,WAAW,EAAE;IACtC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud;IACF,CAAC,GAAGxB,YAAY,CAACqB,0BAA0B,CAACgC,oBAAoB,EAAE3Z,WAAW,CAAC7F,IAAI,CAAC;IACnF,OAAO;MACLof,WAAW,EAAEvZ,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0a,QAAQ,EAAErY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACpCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cma;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO8B,oBAAoBA,CAAC5Z,WAAW,EAAE;IACvC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJ0G;IACF,CAAC,GAAGqV,YAAY,CAACqB,0BAA0B,CAACkC,qBAAqB,EAAE7Z,WAAW,CAAC7F,IAAI,CAAC;IACpF,OAAO;MACLof,WAAW,EAAEvZ,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cmc,mBAAmB,EAAE,IAAIze,SAAS,CAAC4F,UAAU;IAC/C,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOsW,cAAcA,CAAC9a,SAAS,EAAE;IAC/B,IAAI,CAACA,SAAS,CAACjB,MAAM,CAACue,aAAa,CAACtd,SAAS,CAAC,EAAE;MAC9C,MAAM,IAAIhC,KAAK,CAAC,qDAAqD,CAAC;IACxE;EACF;;EAEA;AACF;AACA;EACE,OAAOod,cAAcA,CAACtd,IAAI,EAAEyf,cAAc,EAAE;IAC1C,IAAIzf,IAAI,CAACC,MAAM,GAAGwf,cAAc,EAAE;MAChC,MAAM,IAAIvf,KAAK,CAAC,8BAA8BF,IAAI,CAACC,MAAM,4BAA4Bwf,cAAc,EAAE,CAAC;IACxG;EACF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMrC,0BAA0B,GAAG7d,MAAM,CAACmgB,MAAM,CAAC;EAC/CjC,MAAM,EAAE;IACNzY,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,EAAE3K,YAAY,CAAC2K,IAAI,CAAC,OAAO,CAAC,EAAE3I,SAAS,CAAC,WAAW,CAAC,CAAC;EAClJ,CAAC;EACDwgB,MAAM,EAAE;IACNzZ,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,WAAW,CAAC,CAAC;EACvF,CAAC;EACD4f,QAAQ,EAAE;IACR7Y,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEwW,GAAG,CAAC,UAAU,CAAC,CAAC;EAChF,CAAC;EACDoC,cAAc,EAAE;IACd7Z,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,MAAM,CAAC,EAAE6H,UAAU,CAAC,MAAM,CAAC,EAAE7J,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,EAAE3K,YAAY,CAAC2K,IAAI,CAAC,OAAO,CAAC,EAAE3I,SAAS,CAAC,WAAW,CAAC,CAAC;EACzL,CAAC;EACDihB,mBAAmB,EAAE;IACnBla,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACDmZ,oBAAoB,EAAE;IACpBpa,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,CAAC;EAC9F,CAAC;EACDmY,sBAAsB,EAAE;IACtB/Z,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,YAAY,CAAC,CAAC;EACxF,CAAC;EACDqhB,qBAAqB,EAAE;IACrBta,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,YAAY,CAAC,CAAC;EACxF,CAAC;EACDkgB,QAAQ,EAAE;IACRnZ,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,OAAO,CAAC,CAAC;EAC3F,CAAC;EACD2X,gBAAgB,EAAE;IAChBvZ,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,MAAM,CAAC,EAAE6H,UAAU,CAAC,MAAM,CAAC,EAAE7J,YAAY,CAAC2K,IAAI,CAAC,OAAO,CAAC,EAAE3I,SAAS,CAAC,WAAW,CAAC,CAAC;EAC1J,CAAC;EACD0gB,cAAc,EAAE;IACd3Z,KAAK,EAAE,EAAE;IACTuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,MAAM,CAAC,EAAE6H,UAAU,CAAC,MAAM,CAAC,EAAE7H,SAAS,CAAC,WAAW,CAAC,CAAC;EAC9H,CAAC;EACD+f,gBAAgB,EAAE;IAChBhZ,KAAK,EAAE,EAAE;IACTuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEwW,GAAG,CAAC,UAAU,CAAC,EAAE3W,UAAU,CAAC,MAAM,CAAC,EAAE7H,SAAS,CAAC,WAAW,CAAC,CAAC;EAC5H,CAAC;EACD0hB,mBAAmB,EAAE;IACnB3a,KAAK,EAAE,EAAE;IACTuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMuZ,aAAa,CAAC;EAClB;AACF;AACA;EACEngB,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;EACE,OAAOugB,aAAaA,CAACC,MAAM,EAAE;IAC3B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACK,MAAM;IAC9C,MAAM7d,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B4gB,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;MACzBC,KAAK,EAAEqC,MAAM,CAACrC,KAAK;MACnBtb,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;IACjD,CAAC,CAAC;IACF,OAAO,IAAIgS,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEyc,MAAM,CAACnC,UAAU;QACzBnV,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAClC,gBAAgB;QAC/BpV,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAOkgB,QAAQA,CAACD,MAAM,EAAE;IACtB,IAAIjgB,IAAI;IACR,IAAII,IAAI;IACR,IAAI,YAAY,IAAI6f,MAAM,EAAE;MAC1B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACY,gBAAgB;MACxDpe,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtB4gB,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAQ,CAAC;QACjCtb,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;QACjBC,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;MACjD,CAAC,CAAC;MACFmB,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACnC,UAAU;QACzBnV,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC5B,UAAU;QACzB1V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC/B,QAAQ;QACvBvV,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM7L,IAAI,GAAGygB,0BAA0B,CAACS,QAAQ;MAChDje,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtB4gB,QAAQ,EAAEwC,MAAM,CAACF,MAAM,CAACtC,QAAQ;MAClC,CAAC,CAAC;MACFvd,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACnC,UAAU;QACzBnV,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC/B,QAAQ;QACvBvV,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIqI,sBAAsB,CAAC;MAChC7Q,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAOJ,MAAMA,CAACqgB,MAAM,EAAE;IACpB,IAAIjgB,IAAI;IACR,IAAII,IAAI;IACR,IAAI,YAAY,IAAI6f,MAAM,EAAE;MAC1B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACuB,cAAc;MACtD/e,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtB2hB,IAAI,EAAEzf,QAAQ,CAACghB,MAAM,CAAC5B,UAAU,CAACpf,QAAQ,CAAC,CAAC,CAAC;QAC5CoD,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;QACjBC,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;MACjD,CAAC,CAAC;MACFmB,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACzB,aAAa;QAC5B7V,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC5B,UAAU;QACzB1V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM7L,IAAI,GAAGygB,0BAA0B,CAACqB,MAAM;MAC9C7e,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtBuF,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;MACjD,CAAC,CAAC;MACFmB,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACzB,aAAa;QAC5B7V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIqI,sBAAsB,CAAC;MAChC7Q,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOogB,qBAAqBA,CAACH,MAAM,EAAE;IACnC,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACyB,cAAc;IACtD,MAAMjf,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B2hB,IAAI,EAAEzf,QAAQ,CAACghB,MAAM,CAAC5B,UAAU,CAACpf,QAAQ,CAAC,CAAC,CAAC;MAC5CoD,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;MACjBsb,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;MACzBC,KAAK,EAAEqC,MAAM,CAACrC,KAAK;MACnBtb,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;IACjD,CAAC,CAAC;IACF,IAAImB,IAAI,GAAG,CAAC;MACVoD,MAAM,EAAEyc,MAAM,CAACnC,UAAU;MACzBnV,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAAClC,gBAAgB;MAC/BpV,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAI,CAACqX,MAAM,CAAC5B,UAAU,CAAChd,MAAM,CAAC4e,MAAM,CAACnC,UAAU,CAAC,EAAE;MAChD1d,IAAI,CAAC4E,IAAI,CAAC;QACRxB,MAAM,EAAEyc,MAAM,CAAC5B,UAAU;QACzB1V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIqI,sBAAsB,CAAC;MAChC7Q,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAOqgB,kBAAkBA,CAACJ,MAAM,EAAE;IAChC,MAAMrS,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrC,IAAI,YAAY,IAAI8O,MAAM,IAAI,MAAM,IAAIA,MAAM,EAAE;MAC9CrS,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACQ,qBAAqB,CAAC;QAClDtC,UAAU,EAAEmC,MAAM,CAACnC,UAAU;QAC7BC,gBAAgB,EAAEkC,MAAM,CAACb,WAAW;QACpCf,UAAU,EAAE4B,MAAM,CAAC5B,UAAU;QAC7Bhc,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;QACjBsb,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;QACzBC,KAAK,EAAErB,oBAAoB;QAC3Bja,SAAS,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLsL,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACI,aAAa,CAAC;QAC1ClC,UAAU,EAAEmC,MAAM,CAACnC,UAAU;QAC7BC,gBAAgB,EAAEkC,MAAM,CAACb,WAAW;QACpCzB,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;QACzBC,KAAK,EAAErB,oBAAoB;QAC3Bja,SAAS,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC,CAAC;IACL;IACA,MAAMge,UAAU,GAAG;MACjBlB,WAAW,EAAEa,MAAM,CAACb,WAAW;MAC/B3C,gBAAgB,EAAEwD,MAAM,CAACxD;IAC3B,CAAC;IACD7O,WAAW,CAACqE,GAAG,CAAC,IAAI,CAACsO,eAAe,CAACD,UAAU,CAAC,CAAC;IACjD,OAAO1S,WAAW;EACpB;;EAEA;AACF;AACA;EACE,OAAO2S,eAAeA,CAACN,MAAM,EAAE;IAC7B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAAC2B,sBAAsB;IAC9D,MAAMnf,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B+J,UAAU,EAAE7H,QAAQ,CAACghB,MAAM,CAACxD,gBAAgB,CAACxd,QAAQ,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,MAAMuhB,eAAe,GAAG;MACtBpgB,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEyc,MAAM,CAACb,WAAW;QAC1BzW,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEmU,gCAAgC;QACxChP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEoU,kBAAkB;QAC1BjP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC;IACD,OAAO,IAAIiR,sBAAsB,CAACuP,eAAe,CAAC;EACpD;;EAEA;AACF;AACA;EACE,OAAOC,YAAYA,CAACR,MAAM,EAAE;IAC1B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAAC8B,mBAAmB;IAC3D,MAAMtf,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,MAAMyjB,eAAe,GAAG;MACtBpgB,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEyc,MAAM,CAACb,WAAW;QAC1BzW,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEmU,gCAAgC;QACxChP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAACxD,gBAAgB;QAC/B9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC;IACD,OAAO,IAAIiR,sBAAsB,CAACuP,eAAe,CAAC;EACpD;;EAEA;AACF;AACA;EACE,OAAOE,aAAaA,CAACT,MAAM,EAAE;IAC3B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACgC,oBAAoB;IAC5D,MAAMxf,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B4gB,QAAQ,EAAEsC,MAAM,CAACtC;IACnB,CAAC,CAAC;IACF,OAAO,IAAI1M,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEyc,MAAM,CAACb,WAAW;QAC1BzW,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC/B,QAAQ;QACvBvV,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEmU,gCAAgC;QACxChP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEoU,kBAAkB;QAC1BjP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAACxD,gBAAgB;QAC/B9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAO2gB,cAAcA,CAACV,MAAM,EAAE;IAC5B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACkC,qBAAqB;IAC7D,MAAM1f,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B+J,UAAU,EAAE7H,QAAQ,CAACghB,MAAM,CAACN,mBAAmB,CAAC1gB,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;IACF,OAAO,IAAIgS,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEyc,MAAM,CAACb,WAAW;QAC1BzW,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAACxD,gBAAgB;QAC/B9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAO4gB,QAAQA,CAACX,MAAM,EAAE;IACtB,IAAIjgB,IAAI;IACR,IAAII,IAAI;IACR,IAAI,YAAY,IAAI6f,MAAM,EAAE;MAC1B,MAAMljB,IAAI,GAAGygB,0BAA0B,CAACmB,gBAAgB;MACxD3e,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtB2hB,IAAI,EAAEzf,QAAQ,CAACghB,MAAM,CAAC5B,UAAU,CAACpf,QAAQ,CAAC,CAAC,CAAC;QAC5CoD,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;QACjBub,KAAK,EAAEqC,MAAM,CAACrC,KAAK;QACnBtb,SAAS,EAAErD,QAAQ,CAACghB,MAAM,CAAC3d,SAAS,CAACrD,QAAQ,CAAC,CAAC;MACjD,CAAC,CAAC;MACFmB,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACzB,aAAa;QAC5B7V,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEyc,MAAM,CAAC5B,UAAU;QACzB1V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,MAAM7L,IAAI,GAAGygB,0BAA0B,CAACe,QAAQ;MAChDve,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;QACtB6gB,KAAK,EAAEqC,MAAM,CAACrC;MAChB,CAAC,CAAC;MACFxd,IAAI,GAAG,CAAC;QACNoD,MAAM,EAAEyc,MAAM,CAACzB,aAAa;QAC5B7V,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIqI,sBAAsB,CAAC;MAChC7Q,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;AACF;AACA4f,aAAa,CAACtd,SAAS,GAAG,IAAIpB,SAAS,CAAC,kCAAkC,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA,MAAM2f,UAAU,GAAG5c,gBAAgB,GAAG,GAAG;;AAEzC;AACA;AACA;AACA,MAAM6c,MAAM,CAAC;EACX;AACF;AACA;EACErhB,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACE,OAAOshB,mBAAmBA,CAAC1T,UAAU,EAAE;IACrC,OAAO,CAAC;IACR;IACA2T,IAAI,CAACC,IAAI,CAAC5T,UAAU,GAAGyT,MAAM,CAACI,SAAS,CAAC,GAAG,CAAC;IAC5C;IACA,CAAC,CAAC,CAAC;IAAA;EAEL;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAaC,IAAIA,CAAC/M,UAAU,EAAE9L,KAAK,EAAE8Y,OAAO,EAAE9e,SAAS,EAAEtC,IAAI,EAAE;IAAA,OAAAuC,iBAAA;MAC7D;QACE,MAAM8e,aAAa,SAASjN,UAAU,CAACkN,iCAAiC,CAACthB,IAAI,CAACK,MAAM,CAAC;;QAErF;QACA,MAAMkhB,WAAW,SAASnN,UAAU,CAACoN,cAAc,CAACJ,OAAO,CAAC/iB,SAAS,EAAE,WAAW,CAAC;QACnF,IAAIuP,WAAW,GAAG,IAAI;QACtB,IAAI2T,WAAW,KAAK,IAAI,EAAE;UACxB,IAAIA,WAAW,CAACE,UAAU,EAAE;YAC1BnP,OAAO,CAACoP,KAAK,CAAC,oDAAoD,CAAC;YACnE,OAAO,KAAK;UACd;UACA,IAAIH,WAAW,CAACvhB,IAAI,CAACK,MAAM,KAAKL,IAAI,CAACK,MAAM,EAAE;YAC3CuN,WAAW,GAAGA,WAAW,IAAI,IAAIuD,WAAW,CAAC,CAAC;YAC9CvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACgB,QAAQ,CAAC;cACrCpC,aAAa,EAAE4C,OAAO,CAAC/iB,SAAS;cAChCuf,KAAK,EAAE5d,IAAI,CAACK;YACd,CAAC,CAAC,CAAC;UACL;UACA,IAAI,CAACkhB,WAAW,CAACI,KAAK,CAACtgB,MAAM,CAACiB,SAAS,CAAC,EAAE;YACxCsL,WAAW,GAAGA,WAAW,IAAI,IAAIuD,WAAW,CAAC,CAAC;YAC9CvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAAChgB,MAAM,CAAC;cACnC4e,aAAa,EAAE4C,OAAO,CAAC/iB,SAAS;cAChCiE;YACF,CAAC,CAAC,CAAC;UACL;UACA,IAAIif,WAAW,CAAC5D,QAAQ,GAAG0D,aAAa,EAAE;YACxCzT,WAAW,GAAGA,WAAW,IAAI,IAAIuD,WAAW,CAAC,CAAC;YAC9CvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACM,QAAQ,CAAC;cACrCpC,UAAU,EAAExV,KAAK,CAACjK,SAAS;cAC3B6f,QAAQ,EAAEkD,OAAO,CAAC/iB,SAAS;cAC3Bsf,QAAQ,EAAE0D,aAAa,GAAGE,WAAW,CAAC5D;YACxC,CAAC,CAAC,CAAC;UACL;QACF,CAAC,MAAM;UACL/P,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC2N,aAAa,CAACI,aAAa,CAAC;YAC9DlC,UAAU,EAAExV,KAAK,CAACjK,SAAS;YAC3B0f,gBAAgB,EAAEqD,OAAO,CAAC/iB,SAAS;YACnCsf,QAAQ,EAAE0D,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAC;YAC/CzD,KAAK,EAAE5d,IAAI,CAACK,MAAM;YAClBiC;UACF,CAAC,CAAC,CAAC;QACL;;QAEA;QACA;QACA,IAAIsL,WAAW,KAAK,IAAI,EAAE;UACxB,MAAM8M,yBAAyB,CAACtG,UAAU,EAAExG,WAAW,EAAE,CAACtF,KAAK,EAAE8Y,OAAO,CAAC,EAAE;YACzE/F,UAAU,EAAE;UACd,CAAC,CAAC;QACJ;MACF;MACA,MAAMuG,UAAU,GAAGvlB,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,QAAQ,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,oBAAoB,CAAC,EAAEhK,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC6K,EAAE,CAAC,MAAM,CAAC,EAAE7K,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;MAC/Q,MAAM6a,SAAS,GAAGJ,MAAM,CAACI,SAAS;MAClC,IAAI5a,MAAM,GAAG,CAAC;MACd,IAAIrJ,KAAK,GAAG+C,IAAI;MAChB,IAAI6hB,YAAY,GAAG,EAAE;MACrB,OAAO5kB,KAAK,CAACoD,MAAM,GAAG,CAAC,EAAE;QACvB,MAAMwH,KAAK,GAAG5K,KAAK,CAAC8B,KAAK,CAAC,CAAC,EAAEmiB,SAAS,CAAC;QACvC,MAAMlhB,IAAI,GAAGnE,MAAM,CAACiG,KAAK,CAACof,SAAS,GAAG,EAAE,CAAC;QACzCU,UAAU,CAAC/hB,MAAM,CAAC;UAChBgG,WAAW,EAAE,CAAC;UACd;UACAS,MAAM;UACNuB,KAAK,EAAEA,KAAK;UACZia,WAAW,EAAE,CAAC;UACdC,kBAAkB,EAAE;QACtB,CAAC,EAAE/hB,IAAI,CAAC;QACR,MAAM4N,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;UACxC7R,IAAI,EAAE,CAAC;YACLoD,MAAM,EAAE4d,OAAO,CAAC/iB,SAAS;YACzBsK,QAAQ,EAAE,IAAI;YACdC,UAAU,EAAE;UACd,CAAC,CAAC;UACFtG,SAAS;UACTtC;QACF,CAAC,CAAC;QACF6hB,YAAY,CAAC7c,IAAI,CAAC0V,yBAAyB,CAACtG,UAAU,EAAExG,WAAW,EAAE,CAACtF,KAAK,EAAE8Y,OAAO,CAAC,EAAE;UACrF/F,UAAU,EAAE;QACd,CAAC,CAAC,CAAC;;QAEH;QACA,IAAIjH,UAAU,CAAC4N,YAAY,CAACvP,QAAQ,CAAC,YAAY,CAAC,EAAE;UAClD,MAAMwP,mBAAmB,GAAG,CAAC;UAC7B,MAAMpG,KAAK,CAAC,IAAI,GAAGoG,mBAAmB,CAAC;QACzC;QACA3b,MAAM,IAAI4a,SAAS;QACnBjkB,KAAK,GAAGA,KAAK,CAAC8B,KAAK,CAACmiB,SAAS,CAAC;MAChC;MACA,MAAMrI,OAAO,CAACqJ,GAAG,CAACL,YAAY,CAAC;;MAE/B;MACA;QACE,MAAMD,UAAU,GAAGvlB,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QACzE,MAAMrG,IAAI,GAAGnE,MAAM,CAACiG,KAAK,CAAC8f,UAAU,CAAC/a,IAAI,CAAC;QAC1C+a,UAAU,CAAC/hB,MAAM,CAAC;UAChBgG,WAAW,EAAE,CAAC,CAAC;QACjB,CAAC,EAAE7F,IAAI,CAAC;QACR,MAAM4N,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;UACxC7R,IAAI,EAAE,CAAC;YACLoD,MAAM,EAAE4d,OAAO,CAAC/iB,SAAS;YACzBsK,QAAQ,EAAE,IAAI;YACdC,UAAU,EAAE;UACd,CAAC,EAAE;YACDpF,MAAM,EAAEoU,kBAAkB;YAC1BjP,QAAQ,EAAE,KAAK;YACfC,UAAU,EAAE;UACd,CAAC,CAAC;UACFtG,SAAS;UACTtC;QACF,CAAC,CAAC;QACF,MAAMmiB,gBAAgB,GAAG,WAAW;QACpC,MAAMC,iBAAiB,SAAShO,UAAU,CAACmH,eAAe,CAAC3N,WAAW,EAAE,CAACtF,KAAK,EAAE8Y,OAAO,CAAC,EAAE;UACxFhG,mBAAmB,EAAE+G;QACvB,CAAC,CAAC;QACF,MAAM;UACJE,OAAO;UACPvhB;QACF,CAAC,SAASsT,UAAU,CAACqH,kBAAkB,CAAC;UACtCpX,SAAS,EAAE+d,iBAAiB;UAC5B9Q,oBAAoB,EAAE1D,WAAW,CAAC0D,oBAAoB;UACtDQ,SAAS,EAAElE,WAAW,CAACnC;QACzB,CAAC,EAAE0W,gBAAgB,CAAC;QACpB,IAAIrhB,KAAK,CAACsC,GAAG,EAAE;UACb,MAAM,IAAI9C,KAAK,CAAC,eAAe8hB,iBAAiB,YAAYhQ,IAAI,CAACC,SAAS,CAACvR,KAAK,CAAC,GAAG,CAAC;QACvF;QACA;QACA;QACA,OAAO,IAAI,CAAC;QAAA,EACV;UACA,IAAI;YACF,MAAMwhB,WAAW,SAASlO,UAAU,CAACmO,OAAO,CAAC;cAC3ClH,UAAU,EAAE8G;YACd,CAAC,CAAC;YACF,IAAIG,WAAW,GAAGD,OAAO,CAACG,IAAI,EAAE;cAC9B;YACF;UACF,CAAC,CAAC,MAAM;YACN;UAAA;UAEF,MAAM,IAAI3J,OAAO,CAACC,OAAO,IAAIiD,UAAU,CAACjD,OAAO,EAAEkI,IAAI,CAACyB,KAAK,CAAClL,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;QAChF;MACF;;MAEA;MACA,OAAO,IAAI;IAAC;EACd;AACF;AACAuJ,MAAM,CAACI,SAAS,GAAGL,UAAU;;AAE7B;AACA;AACA;AACA,MAAM6B,qBAAqB,GAAG,IAAIxhB,SAAS,CAAC,6CAA6C,CAAC;;AAE1F;AACA;AACA;AACA;AACA;AACA,MAAMyhB,SAAS,CAAC;EACd;AACF;AACA;AACA;AACA;AACA;EACE,OAAO5B,mBAAmBA,CAAC1T,UAAU,EAAE;IACrC,OAAOyT,MAAM,CAACC,mBAAmB,CAAC1T,UAAU,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO8T,IAAIA,CAAC/M,UAAU,EAAE9L,KAAK,EAAE8Y,OAAO,EAAEwB,GAAG,EAAEC,eAAe,EAAE;IAC5D,OAAO/B,MAAM,CAACK,IAAI,CAAC/M,UAAU,EAAE9L,KAAK,EAAE8Y,OAAO,EAAEyB,eAAe,EAAED,GAAG,CAAC;EACtE;AACF;AAEA,SAASE,uBAAuBA,CAAEjQ,CAAC,EAAE;EACpC,OAAOA,CAAC,IAAIA,CAAC,CAACkQ,UAAU,IAAIpjB,MAAM,CAAC4E,SAAS,CAACoN,cAAc,CAACC,IAAI,CAACiB,CAAC,EAAE,SAAS,CAAC,GAAGA,CAAC,CAAC,SAAS,CAAC,GAAGA,CAAC;AAClG;AAEA,IAAImQ,qBAAqB;AACzB,IAAIC,8BAA8B;AAElC,SAASC,0BAA0BA,CAAA,EAAI;EACtC,IAAID,8BAA8B,EAAE,OAAOD,qBAAqB;EAChEC,8BAA8B,GAAG,CAAC;EAClC,IAAIE,WAAW,GAAGxjB,MAAM,CAAC4E,SAAS,CAACrC,QAAQ;EAC3C,IAAIkhB,OAAO,GAAGzjB,MAAM,CAACS,IAAI,IAAI,UAASijB,GAAG,EAAE;IACzC,IAAIjjB,IAAI,GAAG,EAAE;IACb,KAAK,IAAIqa,IAAI,IAAI4I,GAAG,EAAE;MACrBjjB,IAAI,CAAC4E,IAAI,CAACyV,IAAI,CAAC;IAChB;IACA,OAAOra,IAAI;EACZ,CAAC;EAEF,SAASiS,SAASA,CAACiR,GAAG,EAAEC,WAAW,EAAE;IACpC,IAAIxV,CAAC,EAAEyV,GAAG,EAAE7c,GAAG,EAAEvG,IAAI,EAAEI,GAAG,EAAEijB,OAAO,EAAEC,KAAK;IAC1C,IAAIJ,GAAG,KAAK,IAAI,EAAE;MACjB,OAAO,MAAM;IACd;IACA,IAAIA,GAAG,KAAK,KAAK,EAAE;MAClB,OAAO,OAAO;IACf;IACA,QAAQ,OAAOA,GAAG;MACjB,KAAK,QAAQ;QACZ,IAAIA,GAAG,KAAK,IAAI,EAAE;UACjB,OAAO,IAAI;QACZ,CAAC,MAAM,IAAIA,GAAG,CAAC7hB,MAAM,IAAI,OAAO6hB,GAAG,CAAC7hB,MAAM,KAAK,UAAU,EAAE;UAC1D,OAAO4Q,SAAS,CAACiR,GAAG,CAAC7hB,MAAM,CAAC,CAAC,EAAE8hB,WAAW,CAAC;QAC5C,CAAC,MAAM;UACNG,KAAK,GAAGP,WAAW,CAACvR,IAAI,CAAC0R,GAAG,CAAC;UAC7B,IAAII,KAAK,KAAK,gBAAgB,EAAE;YAC/B/c,GAAG,GAAG,GAAG;YACT6c,GAAG,GAAGF,GAAG,CAACjjB,MAAM,GAAG,CAAC;YACpB,KAAI0N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyV,GAAG,EAAEzV,CAAC,EAAE,EAAE;cACxBpH,GAAG,IAAI0L,SAAS,CAACiR,GAAG,CAACvV,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,GAAG;YACrC;YACA,IAAIyV,GAAG,GAAG,CAAC,CAAC,EAAE;cACb7c,GAAG,IAAI0L,SAAS,CAACiR,GAAG,CAACvV,CAAC,CAAC,EAAE,IAAI,CAAC;YAC/B;YACA,OAAOpH,GAAG,GAAG,GAAG;UACjB,CAAC,MAAM,IAAI+c,KAAK,KAAK,iBAAiB,EAAE;YACvC;YACAtjB,IAAI,GAAGgjB,OAAO,CAACE,GAAG,CAAC,CAACxQ,IAAI,CAAC,CAAC;YAC1B0Q,GAAG,GAAGpjB,IAAI,CAACC,MAAM;YACjBsG,GAAG,GAAG,EAAE;YACRoH,CAAC,GAAG,CAAC;YACL,OAAOA,CAAC,GAAGyV,GAAG,EAAE;cACfhjB,GAAG,GAAGJ,IAAI,CAAC2N,CAAC,CAAC;cACb0V,OAAO,GAAGpR,SAAS,CAACiR,GAAG,CAAC9iB,GAAG,CAAC,EAAE,KAAK,CAAC;cACpC,IAAIijB,OAAO,KAAKziB,SAAS,EAAE;gBAC1B,IAAI2F,GAAG,EAAE;kBACRA,GAAG,IAAI,GAAG;gBACX;gBACAA,GAAG,IAAIyL,IAAI,CAACC,SAAS,CAAC7R,GAAG,CAAC,GAAG,GAAG,GAAGijB,OAAO;cAC3C;cACA1V,CAAC,EAAE;YACJ;YACA,OAAO,GAAG,GAAGpH,GAAG,GAAG,GAAG;UACvB,CAAC,MAAM;YACN,OAAOyL,IAAI,CAACC,SAAS,CAACiR,GAAG,CAAC;UAC3B;QACD;MACD,KAAK,UAAU;MACf,KAAK,WAAW;QACf,OAAOC,WAAW,GAAG,IAAI,GAAGviB,SAAS;MACtC,KAAK,QAAQ;QACZ,OAAOoR,IAAI,CAACC,SAAS,CAACiR,GAAG,CAAC;MAC3B;QACC,OAAOK,QAAQ,CAACL,GAAG,CAAC,GAAGA,GAAG,GAAG,IAAI;IACnC;EACD;EAEAN,qBAAqB,GAAG,SAAAA,CAASM,GAAG,EAAE;IACrC,IAAIM,SAAS,GAAGvR,SAAS,CAACiR,GAAG,EAAE,KAAK,CAAC;IACrC,IAAIM,SAAS,KAAK5iB,SAAS,EAAE;MAC5B,OAAO,EAAE,GAAE4iB,SAAS;IACrB;EACD,CAAC;EACD,OAAOZ,qBAAqB;AAC7B;AAEA,IAAIa,0BAA0B,GAAG,aAAcX,0BAA0B,CAAC,CAAC;AAC3E,IAAIY,mBAAmB,GAAG,aAAahB,uBAAuB,CAACe,0BAA0B,CAAC;AAE1F,MAAME,sBAAsB,GAAG,EAAE;;AAEjC;AACA,SAASC,aAAaA,CAACC,CAAC,EAAE;EACxB,IAAID,aAAa,GAAG,CAAC;EACrB,OAAOC,CAAC,GAAG,CAAC,EAAE;IACZA,CAAC,IAAI,CAAC;IACND,aAAa,EAAE;EACjB;EACA,OAAOA,aAAa;AACtB;;AAEA;AACA,SAASE,cAAcA,CAACD,CAAC,EAAE;EACzB,IAAIA,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;EACrBA,CAAC,EAAE;EACHA,CAAC,IAAIA,CAAC,IAAI,CAAC;EACXA,CAAC,IAAIA,CAAC,IAAI,CAAC;EACXA,CAAC,IAAIA,CAAC,IAAI,CAAC;EACXA,CAAC,IAAIA,CAAC,IAAI,CAAC;EACXA,CAAC,IAAIA,CAAC,IAAI,EAAE;EACZA,CAAC,IAAIA,CAAC,IAAI,EAAE;EACZ,OAAOA,CAAC,GAAG,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAME,aAAa,CAAC;EAClB1kB,WAAWA,CAAC2kB,aAAa,EAAEC,wBAAwB,EAAEC,MAAM,EAAEC,gBAAgB,EAAEC,eAAe,EAAE;IAC9F;IACA,IAAI,CAACJ,aAAa,GAAG,KAAK,CAAC;IAC3B;IACA,IAAI,CAACC,wBAAwB,GAAG,KAAK,CAAC;IACtC;IACA,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB;IACA,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B;IACA,IAAI,CAACC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACJ,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,eAAe,GAAGA,eAAe;EACxC;EACAC,QAAQA,CAACjC,IAAI,EAAE;IACb,OAAO,IAAI,CAACkC,oBAAoB,CAAClC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3C;EACAkC,oBAAoBA,CAAClC,IAAI,EAAE;IACzB,IAAIA,IAAI,GAAG,IAAI,CAACgC,eAAe,EAAE;MAC/B,MAAMG,KAAK,GAAGX,aAAa,CAACE,cAAc,CAAC1B,IAAI,GAAGuB,sBAAsB,GAAG,CAAC,CAAC,CAAC,GAAGC,aAAa,CAACD,sBAAsB,CAAC,GAAG,CAAC;MAC1H,MAAMa,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACF,KAAK,CAAC;MAC5C,MAAMG,SAAS,GAAGtC,IAAI,IAAIoC,QAAQ,GAAGb,sBAAsB,CAAC;MAC5D,OAAO,CAACY,KAAK,EAAEG,SAAS,CAAC;IAC3B,CAAC,MAAM;MACL,MAAMC,eAAe,GAAGvC,IAAI,GAAG,IAAI,CAACgC,eAAe;MACnD,MAAMQ,gBAAgB,GAAGhE,IAAI,CAACiE,KAAK,CAACF,eAAe,GAAG,IAAI,CAACX,aAAa,CAAC;MACzE,MAAMO,KAAK,GAAG,IAAI,CAACJ,gBAAgB,GAAGS,gBAAgB;MACtD,MAAMF,SAAS,GAAGC,eAAe,GAAG,IAAI,CAACX,aAAa;MACtD,OAAO,CAACO,KAAK,EAAEG,SAAS,CAAC;IAC3B;EACF;EACAI,mBAAmBA,CAACP,KAAK,EAAE;IACzB,IAAIA,KAAK,IAAI,IAAI,CAACJ,gBAAgB,EAAE;MAClC,OAAO,CAACvD,IAAI,CAACmE,GAAG,CAAC,CAAC,EAAER,KAAK,CAAC,GAAG,CAAC,IAAIZ,sBAAsB;IAC1D,CAAC,MAAM;MACL,OAAO,CAACY,KAAK,GAAG,IAAI,CAACJ,gBAAgB,IAAI,IAAI,CAACH,aAAa,GAAG,IAAI,CAACI,eAAe;IACpF;EACF;EACAY,kBAAkBA,CAACT,KAAK,EAAE;IACxB,OAAO,IAAI,CAACO,mBAAmB,CAACP,KAAK,CAAC,GAAG,IAAI,CAACE,eAAe,CAACF,KAAK,CAAC,GAAG,CAAC;EAC1E;EACAE,eAAeA,CAACF,KAAK,EAAE;IACrB,IAAIA,KAAK,GAAG,IAAI,CAACJ,gBAAgB,EAAE;MACjC,OAAOvD,IAAI,CAACmE,GAAG,CAAC,CAAC,EAAER,KAAK,GAAGX,aAAa,CAACD,sBAAsB,CAAC,CAAC;IACnE,CAAC,MAAM;MACL,OAAO,IAAI,CAACK,aAAa;IAC3B;EACF;AACF;AAEA,IAAIiB,SAAS,GAAGC,UAAU,CAACC,KAAK;AAEhC,MAAMC,kBAAkB,SAAS5nB,YAAY,CAAC;EAC5C6B,WAAWA,CAACyD,OAAO,EAAE8P,OAAO,EAAEyS,mBAAmB,EAAE;IACjD,MAAMC,gBAAgB,GAAGC,GAAG,IAAI;MAC9B,MAAMC,GAAG,GAAG/nB,SAAS,CAAC8nB,GAAG,EAAE;QACzBE,WAAW,EAAE,IAAI;QACjBC,cAAc,EAAE,CAAC;QACjBC,SAAS,EAAE,IAAI;QACfC,kBAAkB,EAAE,IAAI;QACxB,GAAGhT;MACL,CAAC,CAAC;MACF,IAAI,QAAQ,IAAI4S,GAAG,EAAE;QACnB,IAAI,CAACK,gBAAgB,GAAGL,GAAG,CAACM,MAAM;MACpC,CAAC,MAAM;QACL,IAAI,CAACD,gBAAgB,GAAGL,GAAG;MAC7B;MACA,OAAOA,GAAG;IACZ,CAAC;IACD,KAAK,CAACF,gBAAgB,EAAExiB,OAAO,EAAE8P,OAAO,EAAEyS,mBAAmB,CAAC;IAC9D,IAAI,CAACQ,gBAAgB,GAAG,KAAK,CAAC;EAChC;EACArU,IAAIA,CAAC,GAAGxG,IAAI,EAAE;IACZ,MAAM+a,UAAU,GAAG,IAAI,CAACF,gBAAgB,EAAEE,UAAU;IACpD,IAAIA,UAAU,KAAK,CAAC,CAAC,sBAAsB;MACzC,OAAO,KAAK,CAACvU,IAAI,CAAC,GAAGxG,IAAI,CAAC;IAC5B;IACA,OAAOyN,OAAO,CAACE,MAAM,CAAC,IAAIzY,KAAK,CAAC,mCAAmC,GAAG8K,IAAI,CAAC,CAAC,CAAC,GAAG,oEAAoE,GAAG+a,UAAU,GAAG,GAAG,CAAC,CAAC;EAC3K;EACAC,MAAMA,CAAC,GAAGhb,IAAI,EAAE;IACd,MAAM+a,UAAU,GAAG,IAAI,CAACF,gBAAgB,EAAEE,UAAU;IACpD,IAAIA,UAAU,KAAK,CAAC,CAAC,sBAAsB;MACzC,OAAO,KAAK,CAACC,MAAM,CAAC,GAAGhb,IAAI,CAAC;IAC9B;IACA,OAAOyN,OAAO,CAACE,MAAM,CAAC,IAAIzY,KAAK,CAAC,yCAAyC,GAAG8K,IAAI,CAAC,CAAC,CAAC,GAAG,oEAAoE,GAAG+a,UAAU,GAAG,GAAG,CAAC,CAAC;EACjL;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASE,UAAUA,CAACtpB,IAAI,EAAEiD,IAAI,EAAE;EAC9B,IAAImB,OAAO;EACX,IAAI;IACFA,OAAO,GAAGpE,IAAI,CAAC4K,MAAM,CAAC5H,MAAM,CAACC,IAAI,CAAC;EACpC,CAAC,CAAC,OAAOoD,GAAG,EAAE;IACZ,MAAM,IAAI9C,KAAK,CAAC,uBAAuB,GAAG8C,GAAG,CAAC;EAChD;EACA,IAAIjC,OAAO,CAACmc,SAAS,KAAKvgB,IAAI,CAACqI,KAAK,EAAE;IACpC,MAAM,IAAI9E,KAAK,CAAC,+CAA+Ca,OAAO,CAACmc,SAAS,OAAOvgB,IAAI,CAACqI,KAAK,EAAE,CAAC;EACtG;EACA,OAAOjE,OAAO;AAChB;;AAEA;AACA,MAAMmlB,sBAAsB,GAAG,EAAE;AACjC,MAAMC,yBAAyB,CAAC;EAC9B9mB,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAAC5K,GAAG,GAAG,KAAK,CAAC;IACjB,IAAI,CAAC2J,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAAC3J,GAAG,GAAG4K,IAAI,CAAC5K,GAAG;IACnB,IAAI,CAAC2J,KAAK,GAAGiB,IAAI,CAACjB,KAAK;EACzB;EACAqc,QAAQA,CAAA,EAAG;IACT,MAAMC,OAAO,GAAGtG,MAAM,CAAC,oBAAoB,CAAC;IAC5C,OAAO,IAAI,CAAChW,KAAK,CAACuc,gBAAgB,KAAKD,OAAO;EAChD;EACA,OAAOtqB,WAAWA,CAACwqB,WAAW,EAAE;IAC9B,MAAM3gB,IAAI,GAAGqgB,UAAU,CAACO,qBAAqB,EAAED,WAAW,CAAC;IAC3D,MAAME,sBAAsB,GAAGF,WAAW,CAACtmB,MAAM,GAAGimB,sBAAsB;IAC1E7oB,MAAM,CAACopB,sBAAsB,IAAI,CAAC,EAAE,yBAAyB,CAAC;IAC9DppB,MAAM,CAACopB,sBAAsB,GAAG,EAAE,KAAK,CAAC,EAAE,yBAAyB,CAAC;IACpE,MAAMC,sBAAsB,GAAGD,sBAAsB,GAAG,EAAE;IAC1D,MAAM;MACJzc;IACF,CAAC,GAAG/N,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACqR,GAAG,CAACrP,SAAS,CAAC,CAAC,EAAEyoB,sBAAsB,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC/mB,MAAM,CAAC4mB,WAAW,CAAC5nB,KAAK,CAACunB,sBAAsB,CAAC,CAAC;IAC/I,OAAO;MACLI,gBAAgB,EAAE1gB,IAAI,CAAC0gB,gBAAgB;MACvCK,gBAAgB,EAAE/gB,IAAI,CAAC+gB,gBAAgB;MACvCC,0BAA0B,EAAEhhB,IAAI,CAACihB,sBAAsB;MACvDC,SAAS,EAAElhB,IAAI,CAACkhB,SAAS,CAAC7mB,MAAM,KAAK,CAAC,GAAG,IAAIa,SAAS,CAAC8E,IAAI,CAACkhB,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGlmB,SAAS;MACrFoJ,SAAS,EAAEA,SAAS,CAAC7J,GAAG,CAAC2C,OAAO,IAAI,IAAIhC,SAAS,CAACgC,OAAO,CAAC;IAC5D,CAAC;EACH;AACF;AACA,MAAM0jB,qBAAqB,GAAG;EAC5BxhB,KAAK,EAAE,CAAC;EACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,WAAW,CAAC,EAAEwW,GAAG,CAAC,kBAAkB,CAAC,EAAExgB,YAAY,CAACggB,IAAI,CAAC,kBAAkB,CAAC,EAAEhgB,YAAY,CAAC6K,EAAE,CAAC,wBAAwB,CAAC,EAAE7K,YAAY,CAAC6K,EAAE,CAAC,CAAC;EACxL;EACA7K,YAAY,CAACqR,GAAG,CAACrP,SAAS,CAAC,CAAC,EAAEhC,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAAC6K,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;AACzF,CAAC;AAED,MAAMigB,MAAM,GAAG,4CAA4C;AAC3D,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAClC,MAAMC,OAAO,GAAGD,QAAQ,CAACE,KAAK,CAACJ,MAAM,CAAC;EACtC,IAAIG,OAAO,IAAI,IAAI,EAAE;IACnB,MAAMzkB,SAAS,CAAC,qCAAqCwkB,QAAQ,IAAI,CAAC;EACpE;EACA,MAAM,CAACta,CAAC;EACR;EACAya,OAAO,EAAEC,aAAa,EAAEC,IAAI,CAAC,GAAGJ,OAAO;EACvC,MAAMK,QAAQ,GAAGN,QAAQ,CAACO,UAAU,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG,KAAK;EAC/D,MAAMC,SAAS,GAAGJ,aAAa,IAAI,IAAI,GAAG,IAAI,GAAGK,QAAQ,CAACL,aAAa,CAAC1oB,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACrF,MAAMgpB,aAAa;EACnB;EACA;EACA;EACA;EACA;EACA;EACAF,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,IAAIA,SAAS,GAAG,CAAC,EAAE;EAC5C,OAAO,GAAGF,QAAQ,KAAKH,OAAO,GAAGO,aAAa,GAAGL,IAAI,EAAE;AACzD;AAEA,MAAMM,mBAAmB,GAAGvrB,MAAM,CAACC,QAAQ,CAACwE,SAAS,CAAC,EAAEvE,MAAM,CAAC,CAAC,EAAEmE,KAAK,IAAI,IAAII,SAAS,CAACJ,KAAK,CAAC,CAAC;AAChG,MAAMmnB,oBAAoB,GAAGrrB,KAAK,CAAC,CAACD,MAAM,CAAC,CAAC,EAAEE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;AACjE,MAAMqrB,wBAAwB,GAAGzrB,MAAM,CAACC,QAAQ,CAACb,MAAM,CAAC,EAAEosB,oBAAoB,EAAEnnB,KAAK,IAAIjF,MAAM,CAACuD,IAAI,CAAC0B,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;;AAEzH;AACA;AACA;AACA;AACA,MAAMqnB,0BAA0B,GAAG,EAAE,GAAG,IAAI;;AAE5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAASC,iBAAiBA,CAACC,WAAW,EAAE;EACtC,IAAI,UAAU,CAACC,IAAI,CAACD,WAAW,CAAC,KAAK,KAAK,EAAE;IAC1C,MAAM,IAAIxlB,SAAS,CAAC,mDAAmD,CAAC;EAC1E;EACA,OAAOwlB,WAAW;AACpB;;AAEA;AACA,SAASE,2BAA2BA,CAACC,kBAAkB,EAAE;EACvD,IAAInN,UAAU;EACd,IAAI7F,MAAM;EACV,IAAI,OAAOgT,kBAAkB,KAAK,QAAQ,EAAE;IAC1CnN,UAAU,GAAGmN,kBAAkB;EACjC,CAAC,MAAM,IAAIA,kBAAkB,EAAE;IAC7B,MAAM;MACJnN,UAAU,EAAEoN,mBAAmB;MAC/B,GAAGC;IACL,CAAC,GAAGF,kBAAkB;IACtBnN,UAAU,GAAGoN,mBAAmB;IAChCjT,MAAM,GAAGkT,eAAe;EAC1B;EACA,OAAO;IACLrN,UAAU;IACV7F;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA,SAASmT,mCAAmCA,CAACC,OAAO,EAAE;EACpD,OAAOA,OAAO,CAACroB,GAAG,CAAC8I,MAAM,IAAI,QAAQ,IAAIA,MAAM,GAAG;IAChD,GAAGA,MAAM;IACTwf,MAAM,EAAE;MACN,GAAGxf,MAAM,CAACwf,MAAM;MAChBC,QAAQ,EAAEzf,MAAM,CAACwf,MAAM,CAACC,QAAQ,IAAI;IACtC;EACF,CAAC,GAAGzf,MAAM,CAAC;AACb;;AAEA;AACA;AACA;AACA,SAAS0f,eAAeA,CAACC,MAAM,EAAE;EAC/B,OAAO1rB,KAAK,CAAC,CAACP,IAAI,CAAC;IACjBksB,OAAO,EAAEpsB,OAAO,CAAC,KAAK,CAAC;IACvBqsB,EAAE,EAAEvsB,MAAM,CAAC,CAAC;IACZqsB;EACF,CAAC,CAAC,EAAEjsB,IAAI,CAAC;IACPksB,OAAO,EAAEpsB,OAAO,CAAC,KAAK,CAAC;IACvBqsB,EAAE,EAAEvsB,MAAM,CAAC,CAAC;IACZ+kB,KAAK,EAAE3kB,IAAI,CAAC;MACVwd,IAAI,EAAEzd,OAAO,CAAC,CAAC;MACfgC,OAAO,EAAEnC,MAAM,CAAC,CAAC;MACjBqD,IAAI,EAAE7C,QAAQ,CAACK,GAAG,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,CAAC,CAAC,CAAC;AACN;AACA,MAAM2rB,gBAAgB,GAAGJ,eAAe,CAACjsB,OAAO,CAAC,CAAC,CAAC;;AAEnD;AACA;AACA;AACA,SAASssB,aAAaA,CAACC,MAAM,EAAE;EAC7B,OAAO5sB,MAAM,CAACssB,eAAe,CAACM,MAAM,CAAC,EAAEF,gBAAgB,EAAEroB,KAAK,IAAI;IAChE,IAAI,OAAO,IAAIA,KAAK,EAAE;MACpB,OAAOA,KAAK;IACd,CAAC,MAAM;MACL,OAAO;QACL,GAAGA,KAAK;QACRkoB,MAAM,EAAEzrB,MAAM,CAACuD,KAAK,CAACkoB,MAAM,EAAEK,MAAM;MACrC,CAAC;IACH;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACxoB,KAAK,EAAE;EACtC,OAAOsoB,aAAa,CAACrsB,IAAI,CAAC;IACxBslB,OAAO,EAAEtlB,IAAI,CAAC;MACZylB,IAAI,EAAExlB,MAAM,CAAC;IACf,CAAC,CAAC;IACF8D;EACF,CAAC,CAAC,CAAC;AACL;;AAEA;AACA;AACA;AACA,SAASyoB,4BAA4BA,CAACzoB,KAAK,EAAE;EAC3C,OAAO/D,IAAI,CAAC;IACVslB,OAAO,EAAEtlB,IAAI,CAAC;MACZylB,IAAI,EAAExlB,MAAM,CAAC;IACf,CAAC,CAAC;IACF8D;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA,SAAS0oB,4BAA4BA,CAAC5d,OAAO,EAAE6d,QAAQ,EAAE;EACvD,IAAI7d,OAAO,KAAK,CAAC,EAAE;IACjB,OAAO,IAAIsC,SAAS,CAAC;MACnBzE,MAAM,EAAEggB,QAAQ,CAAChgB,MAAM;MACvB5E,iBAAiB,EAAE4kB,QAAQ,CAACje,WAAW,CAACjL,GAAG,CAACgK,UAAU,IAAI,IAAIrJ,SAAS,CAACqJ,UAAU,CAAC,CAAC;MACpFkB,eAAe,EAAEge,QAAQ,CAAChe,eAAe;MACzCI,oBAAoB,EAAE4d,QAAQ,CAACjkB,YAAY,CAACjF,GAAG,CAACwI,EAAE,KAAK;QACrDjD,cAAc,EAAEiD,EAAE,CAACjD,cAAc;QACjCC,iBAAiB,EAAEgD,EAAE,CAAC+C,QAAQ;QAC9B9L,IAAI,EAAEhE,IAAI,CAAC+D,MAAM,CAACgJ,EAAE,CAAC/I,IAAI;MAC3B,CAAC,CAAC,CAAC;MACH+L,mBAAmB,EAAE0d,QAAQ,CAAC1d;IAChC,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAO,IAAIR,OAAO,CAACke,QAAQ,CAAC;EAC9B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,0BAA0B,GAAG3sB,IAAI,CAAC;EACtC4sB,UAAU,EAAE3sB,MAAM,CAAC,CAAC;EACpB4sB,cAAc,EAAE5sB,MAAM,CAAC,CAAC;EACxB6sB,OAAO,EAAE7sB,MAAM,CAAC,CAAC;EACjB8sB,KAAK,EAAE9sB,MAAM,CAAC,CAAC;EACf+sB,QAAQ,EAAE/sB,MAAM,CAAC;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMgtB,wBAAwB,GAAGZ,aAAa,CAACnsB,KAAK,CAACC,QAAQ,CAACH,IAAI,CAAC;EACjE4nB,KAAK,EAAE3nB,MAAM,CAAC,CAAC;EACfitB,aAAa,EAAEjtB,MAAM,CAAC,CAAC;EACvBktB,MAAM,EAAEltB,MAAM,CAAC,CAAC;EAChBmtB,WAAW,EAAEntB,MAAM,CAAC,CAAC;EACrBotB,UAAU,EAAEjtB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMqtB,iCAAiC,GAAGptB,KAAK,CAACF,IAAI,CAAC;EACnDylB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdstB,iBAAiB,EAAEttB,MAAM,CAAC;AAC5B,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA,MAAMutB,sBAAsB,GAAGxtB,IAAI,CAAC;EAClCytB,KAAK,EAAExtB,MAAM,CAAC,CAAC;EACfytB,SAAS,EAAEztB,MAAM,CAAC,CAAC;EACnB2sB,UAAU,EAAE3sB,MAAM,CAAC,CAAC;EACpB2nB,KAAK,EAAE3nB,MAAM,CAAC;AAChB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA,MAAM0tB,kBAAkB,GAAG3tB,IAAI,CAAC;EAC9B4nB,KAAK,EAAE3nB,MAAM,CAAC,CAAC;EACf8nB,SAAS,EAAE9nB,MAAM,CAAC,CAAC;EACnB2tB,YAAY,EAAE3tB,MAAM,CAAC,CAAC;EACtB4tB,YAAY,EAAE5tB,MAAM,CAAC,CAAC;EACtB6tB,WAAW,EAAE1tB,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC;EAC/B8tB,gBAAgB,EAAE3tB,QAAQ,CAACH,MAAM,CAAC,CAAC;AACrC,CAAC,CAAC;AACF,MAAM+tB,sBAAsB,GAAGhuB,IAAI,CAAC;EAClCqnB,aAAa,EAAEpnB,MAAM,CAAC,CAAC;EACvBqnB,wBAAwB,EAAErnB,MAAM,CAAC,CAAC;EAClCsnB,MAAM,EAAElnB,OAAO,CAAC,CAAC;EACjBmnB,gBAAgB,EAAEvnB,MAAM,CAAC,CAAC;EAC1BwnB,eAAe,EAAExnB,MAAM,CAAC;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA,MAAMguB,uBAAuB,GAAG3tB,MAAM,CAACV,MAAM,CAAC,CAAC,EAAEM,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;;AAEjE;AACA;AACA;AACA,MAAMiuB,sBAAsB,GAAG/tB,QAAQ,CAACI,KAAK,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEpE;AACA;AACA;AACA,MAAMuuB,qBAAqB,GAAGnuB,IAAI,CAAC;EACjCqG,GAAG,EAAE6nB;AACP,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAME,uBAAuB,GAAGtuB,OAAO,CAAC,mBAAmB,CAAC;;AAE5D;AACA;AACA;;AAEA,MAAMuuB,aAAa,GAAGruB,IAAI,CAAC;EACzB,aAAa,EAAEJ,MAAM,CAAC,CAAC;EACvB,aAAa,EAAEQ,QAAQ,CAACH,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC;AACF,MAAMquB,uBAAuB,GAAGtuB,IAAI,CAAC;EACnCqkB,OAAO,EAAEzkB,MAAM,CAAC,CAAC;EACjB2F,SAAS,EAAE0lB,mBAAmB;EAC9BsD,MAAM,EAAExuB,OAAO,CAAC;AAClB,CAAC,CAAC;AACF,MAAMyuB,iCAAiC,GAAGxuB,IAAI,CAAC;EAC7CuF,SAAS,EAAE0lB,mBAAmB;EAC9Blc,QAAQ,EAAE7O,KAAK,CAAC+qB,mBAAmB,CAAC;EACpChoB,IAAI,EAAErD,MAAM,CAAC;AACf,CAAC,CAAC;AACF,MAAM6uB,kCAAkC,GAAGlC,uBAAuB,CAACvsB,IAAI,CAAC;EACtEqG,GAAG,EAAElG,QAAQ,CAACI,KAAK,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1Cyb,IAAI,EAAElb,QAAQ,CAACD,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/BmP,QAAQ,EAAE3O,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACC,QAAQ,CAACH,IAAI,CAAC;IAC9C0kB,UAAU,EAAErkB,OAAO,CAAC,CAAC;IACrBukB,KAAK,EAAEhlB,MAAM,CAAC,CAAC;IACfghB,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;IAClBgD,IAAI,EAAE/C,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;IACrB8uB,SAAS,EAAEtuB,QAAQ,CAACH,MAAM,CAAC,CAAC;EAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACN0uB,aAAa,EAAEvuB,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC;EACjC2uB,UAAU,EAAExuB,QAAQ,CAACD,QAAQ,CAACH,IAAI,CAAC;IACjCuF,SAAS,EAAE3F,MAAM,CAAC,CAAC;IACnBqD,IAAI,EAAEpD,KAAK,CAAC,CAACD,MAAM,CAAC,CAAC,EAAEE,OAAO,CAAC,QAAQ,CAAC,CAAC;EAC3C,CAAC,CAAC,CAAC,CAAC;EACJ+uB,iBAAiB,EAAEzuB,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACF,IAAI,CAAC;IAC9CqI,KAAK,EAAEpI,MAAM,CAAC,CAAC;IACfwI,YAAY,EAAEvI,KAAK,CAACK,KAAK,CAAC,CAAC+tB,uBAAuB,EAAEE,iCAAiC,CAAC,CAAC;EACzF,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMM,6BAA6B,GAAGvC,uBAAuB,CAACvsB,IAAI,CAAC;EACjE+uB,UAAU,EAAEzuB,MAAM,CAACV,MAAM,CAAC,CAAC,EAAEM,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7C+uB,KAAK,EAAEhvB,IAAI,CAAC;IACVivB,SAAS,EAAEhvB,MAAM,CAAC,CAAC;IACnBivB,QAAQ,EAAEjvB,MAAM,CAAC;EACnB,CAAC;AACH,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;;AAEA,SAASkvB,eAAeA,CAACvG,GAAG,EAAEwG,WAAW,EAAEC,WAAW,EAAEC,eAAe,EAAEC,uBAAuB,EAAEC,SAAS,EAAE;EAC3G,MAAMhH,KAAK,GAAG6G,WAAW,GAAGA,WAAW,GAAG/G,SAAS;EACnD,IAAImH,KAAK;EACT;IACE,IAAID,SAAS,IAAI,IAAI,EAAE;MACrBja,OAAO,CAACC,IAAI,CAAC,yFAAyF,GAAG,qEAAqE,CAAC;IACjL;EACF;EACA,IAAIka,mBAAmB;EACvB,IAAIJ,eAAe,EAAE;IACnBI,mBAAmB;MAAA,IAAAC,IAAA,GAAAnqB,iBAAA,CAAG,WAAOoqB,IAAI,EAAEC,IAAI,EAAK;QAC1C,MAAMC,iBAAiB,SAAS,IAAIhU,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UAC/D,IAAI;YACFsT,eAAe,CAACM,IAAI,EAAEC,IAAI,EAAE,CAACE,YAAY,EAAEC,YAAY,KAAKjU,OAAO,CAAC,CAACgU,YAAY,EAAEC,YAAY,CAAC,CAAC,CAAC;UACpG,CAAC,CAAC,OAAOrL,KAAK,EAAE;YACd3I,MAAM,CAAC2I,KAAK,CAAC;UACf;QACF,CAAC,CAAC;QACF,aAAa6D,KAAK,CAAC,GAAGsH,iBAAiB,CAAC;MAC1C,CAAC;MAAA,gBATDJ,mBAAmBA,CAAAO,GAAA,EAAAC,GAAA;QAAA,OAAAP,IAAA,CAAA1R,KAAA,OAAAC,SAAA;MAAA;IAAA,GASlB;EACH;EACA,MAAMiS,aAAa,GAAG,IAAIvvB,SAAS;IAAA,IAAAwvB,KAAA,GAAA5qB,iBAAA,CAAC,WAAO6qB,OAAO,EAAEC,QAAQ,EAAK;MAC/D,MAAMra,OAAO,GAAG;QACdsa,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH,OAAO;QACbZ,KAAK;QACLgB,OAAO,EAAE7tB,MAAM,CAACC,MAAM,CAAC;UACrB,cAAc,EAAE;QAClB,CAAC,EAAEusB,WAAW,IAAI,CAAC,CAAC,EAAEsB,mBAAmB;MAC3C,CAAC;MACD,IAAI;QACF,IAAIC,yBAAyB,GAAG,CAAC;QACjC,IAAIC,GAAG;QACP,IAAIC,QAAQ,GAAG,GAAG;QAClB,SAAS;UACP,IAAInB,mBAAmB,EAAE;YACvBkB,GAAG,SAASlB,mBAAmB,CAAC9G,GAAG,EAAE3S,OAAO,CAAC;UAC/C,CAAC,MAAM;YACL2a,GAAG,SAASpI,KAAK,CAACI,GAAG,EAAE3S,OAAO,CAAC;UACjC;UACA,IAAI2a,GAAG,CAACnS,MAAM,KAAK,GAAG,CAAC,yBAAyB;YAC9C;UACF;UACA,IAAI8Q,uBAAuB,KAAK,IAAI,EAAE;YACpC;UACF;UACAoB,yBAAyB,IAAI,CAAC;UAC9B,IAAIA,yBAAyB,KAAK,CAAC,EAAE;YACnC;UACF;UACApb,OAAO,CAACoP,KAAK,CAAC,yBAAyBiM,GAAG,CAACnS,MAAM,IAAImS,GAAG,CAACE,UAAU,qBAAqBD,QAAQ,aAAa,CAAC;UAC9G,MAAM/R,KAAK,CAAC+R,QAAQ,CAAC;UACrBA,QAAQ,IAAI,CAAC;QACf;QACA,MAAME,IAAI,SAASH,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7B,IAAIH,GAAG,CAACI,EAAE,EAAE;UACVV,QAAQ,CAAC,IAAI,EAAES,IAAI,CAAC;QACtB,CAAC,MAAM;UACLT,QAAQ,CAAC,IAAI/sB,KAAK,CAAC,GAAGqtB,GAAG,CAACnS,MAAM,IAAImS,GAAG,CAACE,UAAU,KAAKC,IAAI,EAAE,CAAC,CAAC;QACjE;MACF,CAAC,CAAC,OAAO1qB,GAAG,EAAE;QACZ,IAAIA,GAAG,YAAY9C,KAAK,EAAE+sB,QAAQ,CAACjqB,GAAG,CAAC;MACzC;IACF,CAAC;IAAA,iBAAA4qB,GAAA,EAAAC,GAAA;MAAA,OAAAd,KAAA,CAAAnS,KAAA,OAAAC,SAAA;IAAA;EAAA,KAAE,CAAC,CAAC,CAAC;EACN,OAAOiS,aAAa;AACtB;AACA,SAASgB,gBAAgBA,CAACC,MAAM,EAAE;EAChC,OAAO,CAACb,MAAM,EAAEliB,IAAI,KAAK;IACvB,OAAO,IAAIyN,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCoV,MAAM,CAACf,OAAO,CAACE,MAAM,EAAEliB,IAAI,EAAE,CAAChI,GAAG,EAAEqmB,QAAQ,KAAK;QAC9C,IAAIrmB,GAAG,EAAE;UACP2V,MAAM,CAAC3V,GAAG,CAAC;UACX;QACF;QACA0V,OAAO,CAAC2Q,QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;AACH;AACA,SAAS2E,qBAAqBA,CAACD,MAAM,EAAE;EACrC,OAAOE,QAAQ,IAAI;IACjB,OAAO,IAAIxV,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC;MACA,IAAIsV,QAAQ,CAAChuB,MAAM,KAAK,CAAC,EAAEyY,OAAO,CAAC,EAAE,CAAC;MACtC,MAAMwV,KAAK,GAAGD,QAAQ,CAAC9tB,GAAG,CAAC0f,MAAM,IAAI;QACnC,OAAOkO,MAAM,CAACf,OAAO,CAACnN,MAAM,CAACsO,UAAU,EAAEtO,MAAM,CAAC7U,IAAI,CAAC;MACvD,CAAC,CAAC;MACF+iB,MAAM,CAACf,OAAO,CAACkB,KAAK,EAAE,CAAClrB,GAAG,EAAEqmB,QAAQ,KAAK;QACvC,IAAIrmB,GAAG,EAAE;UACP2V,MAAM,CAAC3V,GAAG,CAAC;UACX;QACF;QACA0V,OAAO,CAAC2Q,QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA,MAAM+E,6BAA6B,GAAGpF,aAAa,CAACM,0BAA0B,CAAC;;AAE/E;AACA;AACA;AACA,MAAM+E,yBAAyB,GAAGrF,aAAa,CAACmB,sBAAsB,CAAC;;AAEvE;AACA;AACA;AACA,MAAMmE,oCAAoC,GAAGtF,aAAa,CAACiB,iCAAiC,CAAC;;AAE7F;AACA;AACA;AACA,MAAMsE,qBAAqB,GAAGvF,aAAa,CAACsB,kBAAkB,CAAC;;AAE/D;AACA;AACA;AACA,MAAMkE,yBAAyB,GAAGxF,aAAa,CAAC2B,sBAAsB,CAAC;;AAEvE;AACA;AACA;AACA,MAAM8D,0BAA0B,GAAGzF,aAAa,CAAC4B,uBAAuB,CAAC;;AAEzE;AACA;AACA;AACA,MAAM8D,aAAa,GAAG1F,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM+xB,kBAAkB,GAAGzF,uBAAuB,CAACvsB,IAAI,CAAC;EACtDytB,KAAK,EAAExtB,MAAM,CAAC,CAAC;EACfgyB,WAAW,EAAEhyB,MAAM,CAAC,CAAC;EACrBiyB,cAAc,EAAEjyB,MAAM,CAAC,CAAC;EACxBkyB,sBAAsB,EAAEjyB,KAAK,CAAC+qB,mBAAmB;AACnD,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMmH,iBAAiB,GAAGpyB,IAAI,CAAC;EAC7BmtB,MAAM,EAAEvtB,MAAM,CAAC,CAAC;EAChByyB,QAAQ,EAAElyB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC5BqyB,QAAQ,EAAEryB,MAAM,CAAC,CAAC;EAClBsyB,cAAc,EAAEnyB,QAAQ,CAACR,MAAM,CAAC,CAAC;AACnC,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM4yB,6BAA6B,GAAGjG,uBAAuB,CAACrsB,KAAK,CAACF,IAAI,CAAC;EACvEmG,OAAO,EAAE8kB,mBAAmB;EAC5BkC,MAAM,EAAEvtB,MAAM,CAAC,CAAC;EAChByyB,QAAQ,EAAElyB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC5BqyB,QAAQ,EAAEryB,MAAM,CAAC,CAAC;EAClBsyB,cAAc,EAAEnyB,QAAQ,CAACR,MAAM,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAM6yB,uBAAuB,GAAGlG,uBAAuB,CAACrsB,KAAK,CAACF,IAAI,CAAC;EACjEyG,MAAM,EAAEwkB,mBAAmB;EAC3Brc,OAAO,EAAE5O,IAAI,CAAC;IACZ0kB,UAAU,EAAErkB,OAAO,CAAC,CAAC;IACrBukB,KAAK,EAAEqG,mBAAmB;IAC1BrK,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;IAClBgD,IAAI,EAAEkoB,wBAAwB;IAC9BuD,SAAS,EAAEzuB,MAAM,CAAC;EACpB,CAAC;AACH,CAAC,CAAC,CAAC,CAAC;AACJ,MAAMyyB,uBAAuB,GAAG1yB,IAAI,CAAC;EACnCqkB,OAAO,EAAEzkB,MAAM,CAAC,CAAC;EACjB2uB,MAAM,EAAExuB,OAAO,CAAC,CAAC;EACjB8gB,KAAK,EAAE5gB,MAAM,CAAC;AAChB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM0yB,6BAA6B,GAAGpG,uBAAuB,CAACrsB,KAAK,CAACF,IAAI,CAAC;EACvEyG,MAAM,EAAEwkB,mBAAmB;EAC3Brc,OAAO,EAAE5O,IAAI,CAAC;IACZ0kB,UAAU,EAAErkB,OAAO,CAAC,CAAC;IACrBukB,KAAK,EAAEqG,mBAAmB;IAC1BrK,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;IAClBgD,IAAI,EAAEyvB,uBAAuB;IAC7BhE,SAAS,EAAEzuB,MAAM,CAAC;EACpB,CAAC;AACH,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM2yB,2BAA2B,GAAGrG,uBAAuB,CAACrsB,KAAK,CAACF,IAAI,CAAC;EACrE4gB,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;EAClBkG,OAAO,EAAE8kB;AACX,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAM4H,iBAAiB,GAAG7yB,IAAI,CAAC;EAC7B0kB,UAAU,EAAErkB,OAAO,CAAC,CAAC;EACrBukB,KAAK,EAAEqG,mBAAmB;EAC1BrK,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;EAClBgD,IAAI,EAAEkoB,wBAAwB;EAC9BuD,SAAS,EAAEzuB,MAAM,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM6yB,sBAAsB,GAAG9yB,IAAI,CAAC;EAClCyG,MAAM,EAAEwkB,mBAAmB;EAC3Brc,OAAO,EAAEikB;AACX,CAAC,CAAC;AACF,MAAME,sBAAsB,GAAGrzB,MAAM,CAACa,KAAK,CAAC,CAACZ,QAAQ,CAACb,MAAM,CAAC,EAAE4zB,uBAAuB,CAAC,CAAC,EAAEnyB,KAAK,CAAC,CAAC2qB,oBAAoB,EAAEwH,uBAAuB,CAAC,CAAC,EAAE3uB,KAAK,IAAI;EACzJ,IAAI0G,KAAK,CAACC,OAAO,CAAC3G,KAAK,CAAC,EAAE;IACxB,OAAOvD,MAAM,CAACuD,KAAK,EAAEonB,wBAAwB,CAAC;EAChD,CAAC,MAAM;IACL,OAAOpnB,KAAK;EACd;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMivB,uBAAuB,GAAGhzB,IAAI,CAAC;EACnC0kB,UAAU,EAAErkB,OAAO,CAAC,CAAC;EACrBukB,KAAK,EAAEqG,mBAAmB;EAC1BrK,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;EAClBgD,IAAI,EAAE8vB,sBAAsB;EAC5BrE,SAAS,EAAEzuB,MAAM,CAAC;AACpB,CAAC,CAAC;AACF,MAAMgzB,4BAA4B,GAAGjzB,IAAI,CAAC;EACxCyG,MAAM,EAAEwkB,mBAAmB;EAC3Brc,OAAO,EAAEokB;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAME,qBAAqB,GAAGlzB,IAAI,CAAC;EACjCoN,KAAK,EAAE7M,KAAK,CAAC,CAACT,OAAO,CAAC,QAAQ,CAAC,EAAEA,OAAO,CAAC,UAAU,CAAC,EAAEA,OAAO,CAAC,YAAY,CAAC,EAAEA,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACtGqzB,MAAM,EAAElzB,MAAM,CAAC,CAAC;EAChBmzB,QAAQ,EAAEnzB,MAAM,CAAC;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA,MAAMozB,0CAA0C,GAAGhH,aAAa,CAACnsB,KAAK,CAACF,IAAI,CAAC;EAC1EsH,SAAS,EAAE1H,MAAM,CAAC,CAAC;EACnB6lB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdoG,GAAG,EAAE6nB,sBAAsB;EAC3BoF,IAAI,EAAEnzB,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EACxB2zB,SAAS,EAAEnzB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMuzB,gCAAgC,GAAGnH,aAAa,CAACnsB,KAAK,CAACF,IAAI,CAAC;EAChEsH,SAAS,EAAE1H,MAAM,CAAC,CAAC;EACnB6lB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdoG,GAAG,EAAE6nB,sBAAsB;EAC3BoF,IAAI,EAAEnzB,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EACxB2zB,SAAS,EAAEnzB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMwzB,yBAAyB,GAAGzzB,IAAI,CAAC;EACrC0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAEO,4BAA4B,CAACqG,iBAAiB;AACxD,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMc,wBAAwB,GAAG3zB,IAAI,CAAC;EACpCyG,MAAM,EAAEwkB,mBAAmB;EAC3Brc,OAAO,EAAEikB;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMe,gCAAgC,GAAG5zB,IAAI,CAAC;EAC5C0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAEO,4BAA4B,CAACmH,wBAAwB;AAC/D,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAME,cAAc,GAAG7zB,IAAI,CAAC;EAC1B8zB,MAAM,EAAE7zB,MAAM,CAAC,CAAC;EAChBwlB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACd8zB,IAAI,EAAE9zB,MAAM,CAAC;AACf,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM+zB,sBAAsB,GAAGh0B,IAAI,CAAC;EAClC0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAE4H;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMI,gBAAgB,GAAG1zB,KAAK,CAAC,CAACP,IAAI,CAAC;EACnCA,IAAI,EAAEO,KAAK,CAAC,CAACT,OAAO,CAAC,oBAAoB,CAAC,EAAEA,OAAO,CAAC,WAAW,CAAC,EAAEA,OAAO,CAAC,wBAAwB,CAAC,EAAEA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EACtH2lB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdi0B,SAAS,EAAEj0B,MAAM,CAAC;AACpB,CAAC,CAAC,EAAED,IAAI,CAAC;EACPA,IAAI,EAAEF,OAAO,CAAC,aAAa,CAAC;EAC5Bg0B,MAAM,EAAE7zB,MAAM,CAAC,CAAC;EAChBwlB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdi0B,SAAS,EAAEj0B,MAAM,CAAC;AACpB,CAAC,CAAC,EAAED,IAAI,CAAC;EACPA,IAAI,EAAEF,OAAO,CAAC,QAAQ,CAAC;EACvB2lB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdi0B,SAAS,EAAEj0B,MAAM,CAAC,CAAC;EACnBk0B,KAAK,EAAEn0B,IAAI,CAAC;IACVo0B,qBAAqB,EAAEn0B,MAAM,CAAC,CAAC;IAC/Bo0B,yBAAyB,EAAEp0B,MAAM,CAAC,CAAC;IACnCq0B,qBAAqB,EAAEr0B,MAAM,CAAC,CAAC;IAC/Bs0B,uBAAuB,EAAEt0B,MAAM,CAAC;EAClC,CAAC;AACH,CAAC,CAAC,EAAED,IAAI,CAAC;EACPA,IAAI,EAAEF,OAAO,CAAC,MAAM,CAAC;EACrB2lB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdi0B,SAAS,EAAEj0B,MAAM,CAAC,CAAC;EACnBoG,GAAG,EAAEzG,MAAM,CAAC;AACd,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAM40B,4BAA4B,GAAGx0B,IAAI,CAAC;EACxC0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAEgI;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMQ,2BAA2B,GAAGz0B,IAAI,CAAC;EACvC0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAEO,4BAA4B,CAACjsB,KAAK,CAAC,CAAC4tB,qBAAqB,EAAEC,uBAAuB,CAAC,CAAC;AAC9F,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMsG,sBAAsB,GAAG10B,IAAI,CAAC;EAClC0zB,YAAY,EAAEzzB,MAAM,CAAC,CAAC;EACtBgsB,MAAM,EAAEhsB,MAAM,CAAC;AACjB,CAAC,CAAC;AACF,MAAM00B,iBAAiB,GAAG30B,IAAI,CAAC;EAC7ByG,MAAM,EAAE7G,MAAM,CAAC,CAAC;EAChBg1B,MAAM,EAAEz0B,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EAC1Bi1B,GAAG,EAAE10B,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EACvBipB,GAAG,EAAE1oB,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EACvBiP,OAAO,EAAE1O,QAAQ,CAACP,MAAM,CAAC,CAAC;AAC5B,CAAC,CAAC;AACF,MAAMk1B,qBAAqB,GAAG90B,IAAI,CAAC;EACjC+0B,UAAU,EAAEn1B,MAAM,CAAC,CAAC;EACpBo1B,UAAU,EAAEp1B,MAAM,CAAC,CAAC;EACpBq1B,cAAc,EAAEh1B,MAAM,CAAC,CAAC;EACxBi1B,gBAAgB,EAAE70B,OAAO,CAAC,CAAC;EAC3B80B,YAAY,EAAEj1B,KAAK,CAACL,KAAK,CAAC,CAACI,MAAM,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1DotB,UAAU,EAAEptB,MAAM,CAAC,CAAC;EACpBm1B,QAAQ,EAAEn1B,MAAM,CAAC,CAAC;EAClBo1B,QAAQ,EAAEl1B,QAAQ,CAACF,MAAM,CAAC,CAAC;AAC7B,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMq1B,eAAe,GAAGjJ,aAAa,CAACrsB,IAAI,CAAC;EACzCu1B,OAAO,EAAEr1B,KAAK,CAAC40B,qBAAqB,CAAC;EACrCU,UAAU,EAAEt1B,KAAK,CAAC40B,qBAAqB;AACzC,CAAC,CAAC,CAAC;AACH,MAAMW,kBAAkB,GAAGl1B,KAAK,CAAC,CAACT,OAAO,CAAC,WAAW,CAAC,EAAEA,OAAO,CAAC,WAAW,CAAC,EAAEA,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;AACpG,MAAM41B,uBAAuB,GAAG11B,IAAI,CAAC;EACnCylB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACd01B,aAAa,EAAEx1B,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EACjCoG,GAAG,EAAE6nB,sBAAsB;EAC3B0H,kBAAkB,EAAEx1B,QAAQ,CAACq1B,kBAAkB;AACjD,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMI,6BAA6B,GAAGtJ,uBAAuB,CAACrsB,KAAK,CAACC,QAAQ,CAACu1B,uBAAuB,CAAC,CAAC,CAAC;;AAEvG;AACA;AACA;AACA,MAAMI,0CAA0C,GAAGzJ,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC;AAC1E,MAAM81B,wBAAwB,GAAG/1B,IAAI,CAAC;EACpCwN,UAAU,EAAEyd,mBAAmB;EAC/Bhe,eAAe,EAAE/M,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;EAChCqN,eAAe,EAAEpN,KAAK,CAACD,MAAM,CAAC,CAAC;AACjC,CAAC,CAAC;AACF,MAAM+1B,0BAA0B,GAAGh2B,IAAI,CAAC;EACtCqU,UAAU,EAAEnU,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;EAC3BmC,OAAO,EAAE/B,IAAI,CAAC;IACZyO,WAAW,EAAEvO,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;IAC5B8M,MAAM,EAAE1M,IAAI,CAAC;MACX2M,qBAAqB,EAAE1M,MAAM,CAAC,CAAC;MAC/B2M,yBAAyB,EAAE3M,MAAM,CAAC,CAAC;MACnC4M,2BAA2B,EAAE5M,MAAM,CAAC;IACtC,CAAC,CAAC;IACFwI,YAAY,EAAEvI,KAAK,CAACF,IAAI,CAAC;MACvB+O,QAAQ,EAAE7O,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;MACzBgD,IAAI,EAAErD,MAAM,CAAC,CAAC;MACdmJ,cAAc,EAAE9I,MAAM,CAAC;IACzB,CAAC,CAAC,CAAC;IACHyO,eAAe,EAAE9O,MAAM,CAAC,CAAC;IACzBoP,mBAAmB,EAAE5O,QAAQ,CAACF,KAAK,CAAC61B,wBAAwB,CAAC;EAC/D,CAAC;AACH,CAAC,CAAC;AACF,MAAME,mBAAmB,GAAGj2B,IAAI,CAAC;EAC/ByG,MAAM,EAAEwkB,mBAAmB;EAC3BrT,MAAM,EAAEvX,OAAO,CAAC,CAAC;EACjB6H,QAAQ,EAAE7H,OAAO,CAAC,CAAC;EACnB61B,MAAM,EAAE91B,QAAQ,CAACG,KAAK,CAAC,CAACT,OAAO,CAAC,aAAa,CAAC,EAAEA,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AAC1E,CAAC,CAAC;AACF,MAAMq2B,sCAAsC,GAAGn2B,IAAI,CAAC;EAClDyO,WAAW,EAAEvO,KAAK,CAAC+1B,mBAAmB,CAAC;EACvC5hB,UAAU,EAAEnU,KAAK,CAACN,MAAM,CAAC,CAAC;AAC5B,CAAC,CAAC;AACF,MAAMw2B,uBAAuB,GAAGp2B,IAAI,CAAC;EACnCuuB,MAAM,EAAExuB,OAAO,CAAC,CAAC;EACjBskB,OAAO,EAAEzkB,MAAM,CAAC,CAAC;EACjB2F,SAAS,EAAE0lB;AACb,CAAC,CAAC;AACF,MAAMoL,oBAAoB,GAAGr2B,IAAI,CAAC;EAChC+O,QAAQ,EAAE7O,KAAK,CAAC+qB,mBAAmB,CAAC;EACpChoB,IAAI,EAAErD,MAAM,CAAC,CAAC;EACd2F,SAAS,EAAE0lB;AACb,CAAC,CAAC;AACF,MAAMqL,iBAAiB,GAAG/1B,KAAK,CAAC,CAAC81B,oBAAoB,EAAED,uBAAuB,CAAC,CAAC;AAChF,MAAMG,wBAAwB,GAAGh2B,KAAK,CAAC,CAACP,IAAI,CAAC;EAC3CuuB,MAAM,EAAExuB,OAAO,CAAC,CAAC;EACjBskB,OAAO,EAAEzkB,MAAM,CAAC,CAAC;EACjB2F,SAAS,EAAE3F,MAAM,CAAC;AACpB,CAAC,CAAC,EAAEI,IAAI,CAAC;EACP+O,QAAQ,EAAE7O,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;EACzBqD,IAAI,EAAErD,MAAM,CAAC,CAAC;EACd2F,SAAS,EAAE3F,MAAM,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC;AACJ,MAAM42B,sBAAsB,GAAG92B,MAAM,CAAC42B,iBAAiB,EAAEC,wBAAwB,EAAExyB,KAAK,IAAI;EAC1F,IAAI,UAAU,IAAIA,KAAK,EAAE;IACvB,OAAOvD,MAAM,CAACuD,KAAK,EAAEsyB,oBAAoB,CAAC;EAC5C,CAAC,MAAM;IACL,OAAO71B,MAAM,CAACuD,KAAK,EAAEqyB,uBAAuB,CAAC;EAC/C;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMK,gCAAgC,GAAGz2B,IAAI,CAAC;EAC5CqU,UAAU,EAAEnU,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;EAC3BmC,OAAO,EAAE/B,IAAI,CAAC;IACZyO,WAAW,EAAEvO,KAAK,CAAC+1B,mBAAmB,CAAC;IACvCxtB,YAAY,EAAEvI,KAAK,CAACs2B,sBAAsB,CAAC;IAC3C9nB,eAAe,EAAE9O,MAAM,CAAC,CAAC;IACzBoP,mBAAmB,EAAE5O,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAAC61B,wBAAwB,CAAC,CAAC;EACzE,CAAC;AACH,CAAC,CAAC;AACF,MAAMW,kBAAkB,GAAG12B,IAAI,CAAC;EAC9B22B,YAAY,EAAE12B,MAAM,CAAC,CAAC;EACtB22B,IAAI,EAAEh3B,MAAM,CAAC,CAAC;EACdglB,KAAK,EAAExkB,QAAQ,CAACR,MAAM,CAAC,CAAC,CAAC;EACzB2F,SAAS,EAAEnF,QAAQ,CAACR,MAAM,CAAC,CAAC,CAAC;EAC7Bi3B,aAAa,EAAEzE;AACjB,CAAC,CAAC;AACF,MAAM0E,qBAAqB,GAAG92B,IAAI,CAAC;EACjCkI,QAAQ,EAAEhI,KAAK,CAAC+qB,mBAAmB,CAAC;EACpC9iB,QAAQ,EAAEjI,KAAK,CAAC+qB,mBAAmB;AACrC,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM8L,8BAA8B,GAAG/2B,IAAI,CAAC;EAC1CqG,GAAG,EAAE6nB,sBAAsB;EAC3B8I,GAAG,EAAE/2B,MAAM,CAAC,CAAC;EACb4uB,iBAAiB,EAAEzuB,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACF,IAAI,CAAC;IAC9CqI,KAAK,EAAEpI,MAAM,CAAC,CAAC;IACfwI,YAAY,EAAEvI,KAAK,CAACF,IAAI,CAAC;MACvB+O,QAAQ,EAAE7O,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;MACzBgD,IAAI,EAAErD,MAAM,CAAC,CAAC;MACdmJ,cAAc,EAAE9I,MAAM,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC;EACLg3B,WAAW,EAAE/2B,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;EAC5Bi3B,YAAY,EAAEh3B,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;EAC7Bmc,WAAW,EAAEhc,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAChDu3B,gBAAgB,EAAE/2B,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACw2B,kBAAkB,CAAC,CAAC,CAAC;EAC/DU,iBAAiB,EAAEh3B,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACw2B,kBAAkB,CAAC,CAAC,CAAC;EAChEW,eAAe,EAAEj3B,QAAQ,CAAC02B,qBAAqB,CAAC;EAChDQ,oBAAoB,EAAEl3B,QAAQ,CAACH,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMs3B,oCAAoC,GAAGv3B,IAAI,CAAC;EAChDqG,GAAG,EAAE6nB,sBAAsB;EAC3B8I,GAAG,EAAE/2B,MAAM,CAAC,CAAC;EACb4uB,iBAAiB,EAAEzuB,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACF,IAAI,CAAC;IAC9CqI,KAAK,EAAEpI,MAAM,CAAC,CAAC;IACfwI,YAAY,EAAEvI,KAAK,CAACs2B,sBAAsB;EAC5C,CAAC,CAAC,CAAC,CAAC,CAAC;EACLS,WAAW,EAAE/2B,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;EAC5Bi3B,YAAY,EAAEh3B,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC;EAC7Bmc,WAAW,EAAEhc,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAChDu3B,gBAAgB,EAAE/2B,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACw2B,kBAAkB,CAAC,CAAC,CAAC;EAC/DU,iBAAiB,EAAEh3B,QAAQ,CAACD,QAAQ,CAACD,KAAK,CAACw2B,kBAAkB,CAAC,CAAC,CAAC;EAChEW,eAAe,EAAEj3B,QAAQ,CAAC02B,qBAAqB,CAAC;EAChDQ,oBAAoB,EAAEl3B,QAAQ,CAACH,MAAM,CAAC,CAAC;AACzC,CAAC,CAAC;AACF,MAAMu3B,wBAAwB,GAAGj3B,KAAK,CAAC,CAACT,OAAO,CAAC,CAAC,CAAC,EAAEA,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEvE;AACA,MAAM23B,aAAa,GAAGz3B,IAAI,CAAC;EACzByG,MAAM,EAAE7G,MAAM,CAAC,CAAC;EAChBghB,QAAQ,EAAE3gB,MAAM,CAAC,CAAC;EAClBmtB,WAAW,EAAEjtB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC/By3B,UAAU,EAAEv3B,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC;EAC9BytB,UAAU,EAAEjtB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM03B,iBAAiB,GAAGtL,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EACpD+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB6kB,YAAY,EAAE5kB,KAAK,CAACF,IAAI,CAAC;IACvB6Q,WAAW,EAAEmlB,0BAA0B;IACvC/sB,IAAI,EAAE9I,QAAQ,CAAC42B,8BAA8B,CAAC;IAC9CloB,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;EAC5C,CAAC,CAAC,CAAC;EACHM,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAM83B,yBAAyB,GAAG1L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAC5D+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB63B,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAM+3B,6BAA6B,GAAG3L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAChE+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB6kB,YAAY,EAAE5kB,KAAK,CAACF,IAAI,CAAC;IACvB6Q,WAAW,EAAEslB,sCAAsC;IACnDltB,IAAI,EAAE9I,QAAQ,CAAC42B,8BAA8B,CAAC;IAC9CloB,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;EAC5C,CAAC,CAAC,CAAC;EACHM,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMg4B,uBAAuB,GAAG5L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAC1D+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB6kB,YAAY,EAAE5kB,KAAK,CAACF,IAAI,CAAC;IACvB6Q,WAAW,EAAE4lB,gCAAgC;IAC7CxtB,IAAI,EAAE9I,QAAQ,CAACo3B,oCAAoC,CAAC;IACpD1oB,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;EAC5C,CAAC,CAAC,CAAC;EACHM,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMi4B,mCAAmC,GAAG7L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EACtE+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB6kB,YAAY,EAAE5kB,KAAK,CAACF,IAAI,CAAC;IACvB6Q,WAAW,EAAEslB,sCAAsC;IACnDltB,IAAI,EAAE9I,QAAQ,CAACo3B,oCAAoC,CAAC;IACpD1oB,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;EAC5C,CAAC,CAAC,CAAC;EACHM,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMk4B,+BAA+B,GAAG9L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAClE+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB63B,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC;EAC7B6tB,WAAW,EAAE3tB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA,MAAMm4B,0BAA0B,GAAG/L,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAC7D+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpB6kB,YAAY,EAAE5kB,KAAK,CAACF,IAAI,CAAC;IACvB6Q,WAAW,EAAEmlB,0BAA0B;IACvC/sB,IAAI,EAAE9I,QAAQ,CAAC42B,8BAA8B;EAC/C,CAAC,CAAC,CAAC;EACHe,OAAO,EAAE13B,QAAQ,CAACF,KAAK,CAACu3B,aAAa,CAAC,CAAC;EACvClE,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMo4B,2BAA2B,GAAGhM,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAC9D+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnBg4B,iBAAiB,EAAEh4B,MAAM,CAAC,CAAC;EAC3Bi4B,UAAU,EAAE53B,MAAM,CAAC,CAAC;EACpBoU,UAAU,EAAEnU,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;EAC3B2zB,SAAS,EAAEpzB,QAAQ,CAACF,MAAM,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMq4B,uBAAuB,GAAGjM,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAC1DylB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACdgJ,IAAI,EAAE9I,QAAQ,CAAC42B,8BAA8B,CAAC;EAC9CxD,SAAS,EAAEnzB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;EACvC4Q,WAAW,EAAEmlB,0BAA0B;EACvCnnB,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;AAC5C,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMe,6BAA6B,GAAGlM,aAAa,CAAClsB,QAAQ,CAACH,IAAI,CAAC;EAChEylB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACd4Q,WAAW,EAAE4lB,gCAAgC;EAC7CxtB,IAAI,EAAE9I,QAAQ,CAACo3B,oCAAoC,CAAC;EACpDhE,SAAS,EAAEnzB,QAAQ,CAACD,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;EACvC4O,OAAO,EAAEzO,QAAQ,CAACo3B,wBAAwB;AAC5C,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMgB,2BAA2B,GAAGjM,uBAAuB,CAACvsB,IAAI,CAAC;EAC/D+U,SAAS,EAAEnV,MAAM,CAAC,CAAC;EACnB2U,oBAAoB,EAAEtU,MAAM,CAAC;AAC/B,CAAC,CAAC,CAAC;;AAEH;AACA;AACA;AACA,MAAMw4B,yBAAyB,GAAGlM,uBAAuB,CAAClsB,OAAO,CAAC,CAAC,CAAC;AACpE,MAAMq4B,gBAAgB,GAAG14B,IAAI,CAAC;EAC5BylB,IAAI,EAAExlB,MAAM,CAAC,CAAC;EACd04B,eAAe,EAAE14B,MAAM,CAAC,CAAC;EACzB24B,QAAQ,EAAE34B,MAAM,CAAC,CAAC;EAClB44B,gBAAgB,EAAE54B,MAAM,CAAC;AAC3B,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM64B,oCAAoC,GAAGzM,aAAa,CAACnsB,KAAK,CAACw4B,gBAAgB,CAAC,CAAC;;AAEnF;AACA;AACA;AACA,MAAMK,yBAAyB,GAAGxM,uBAAuB,CAACpsB,QAAQ,CAACH,IAAI,CAAC;EACtE2f,aAAa,EAAE3f,IAAI,CAAC;IAClBg5B,oBAAoB,EAAE/4B,MAAM,CAAC;EAC/B,CAAC;AACH,CAAC,CAAC,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,MAAMg5B,uBAAuB,GAAG5M,aAAa,CAACzsB,MAAM,CAAC,CAAC,CAAC;;AAEvD;AACA;AACA;AACA,MAAMs5B,wBAAwB,GAAG7M,aAAa,CAACzsB,MAAM,CAAC,CAAC,CAAC;;AAExD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMu5B,UAAU,GAAGn5B,IAAI,CAAC;EACtBqG,GAAG,EAAE6nB,sBAAsB;EAC3B7S,IAAI,EAAEnb,KAAK,CAACN,MAAM,CAAC,CAAC,CAAC;EACrB0H,SAAS,EAAE1H,MAAM,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMw5B,sBAAsB,GAAGp5B,IAAI,CAAC;EAClCisB,MAAM,EAAEO,4BAA4B,CAAC2M,UAAU,CAAC;EAChDzF,YAAY,EAAEzzB,MAAM,CAAC;AACvB,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAMywB,mBAAmB,GAAG;EAC1B,eAAe,EAAE,MAAM,mBAAmB;AAC5C,CAAC;;AAED;AACA;AACA;AACA,MAAM2I,UAAU,CAAC;EACf;AACF;AACA;AACA;AACA;AACA;EACE32B,WAAWA,CAAC4nB,QAAQ,EAAEgP,mBAAmB,EAAE;IAAA,IAAAC,MAAA;IACzC;IACA,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB;IACA,IAAI,CAACC,iCAAiC,GAAG,KAAK,CAAC;IAC/C;IACA,IAAI,CAACxU,YAAY,GAAG,KAAK,CAAC;IAC1B;IACA,IAAI,CAACyU,cAAc,GAAG,KAAK,CAAC;IAC5B;IACA,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB;IACA,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB;IACA,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B;IACA,IAAI,CAACC,aAAa,GAAG,KAAK,CAAC;IAC3B;IACA,IAAI,CAACC,sBAAsB,GAAG,KAAK;IACnC;IACA,IAAI,CAACC,sBAAsB,GAAG,IAAI;IAClC;IACA,IAAI,CAACC,wBAAwB,GAAG,IAAI;IACpC;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,uBAAuB,GAAG,CAAC;IAChC;IACA,IAAI,CAACC,wBAAwB,GAAG,KAAK;IACrC;IACA,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;IACA,IAAI,CAACC,cAAc,GAAG;MACpBC,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE,CAAC;MACZC,qBAAqB,EAAE,EAAE;MACzBC,mBAAmB,EAAE;IACvB,CAAC;IACD;IACA,IAAI,CAACC,yBAAyB,GAAG,CAAC;IAClC;IACA,IAAI,CAACC,mDAAmD,GAAG,CAAC,CAAC;IAC7D;IACA,IAAI,CAACC,uCAAuC,GAAG,CAAC,CAAC;IACjD;IACA,IAAI,CAACC,uCAAuC,GAAG,CAAC,CAAC;IACjD;IACA,IAAI,CAACC,4CAA4C,GAAG,CAAC,CAAC;IACtD;IACA,IAAI,CAACC,oBAAoB,GAAG,CAAC,CAAC;IAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI;IACA,IAAI,CAACC,+BAA+B,GAAG,IAAItjB,GAAG,CAAC,CAAC;IAChD;AACJ;AACA;IACI,IAAI,CAACujB,cAAc,GAAG,CAAC,MAAM;MAC3B,MAAMC,eAAe,GAAG,CAAC,CAAC;MAC1B;QAAA,IAAAC,KAAA,GAAA31B,iBAAA,CAAO,WAAMimB,kBAAkB,EAAI;UACjC,MAAM;YACJnN,UAAU;YACV7F;UACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;UACnD,MAAMpd,IAAI,GAAGkrB,MAAI,CAAC6B,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;UAC9E,MAAM4iB,WAAW,GAAGtU,mBAAmB,CAAC1Y,IAAI,CAAC;UAC7C6sB,eAAe,CAACG,WAAW,CAAC,GAAGH,eAAe,CAACG,WAAW,CAAC,IAAI71B,iBAAA,CAAC,aAAY;YAC1E,IAAI;cACF,MAAM81B,SAAS,SAAS/B,MAAI,CAACK,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;cAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC,CAAC;cACtD,IAAI,OAAO,IAAI2wB,GAAG,EAAE;gBAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,wCAAwC,CAAC;cACnF;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB,CAAC,SAAS;cACR,OAAOiP,eAAe,CAACG,WAAW,CAAC;YACrC;UACF,CAAC,EAAE,CAAC;UACJ,aAAaH,eAAe,CAACG,WAAW,CAAC;QAC3C,CAAC;QAAA,iBAAAE,GAAA;UAAA,OAAAJ,KAAA,CAAAld,KAAA,OAAAC,SAAA;QAAA;MAAA;IACH,CAAC,EAAE,CAAC;IACJ,IAAIsd,UAAU;IACd,IAAIpM,WAAW;IACf,IAAI5G,KAAK;IACT,IAAI8G,eAAe;IACnB,IAAIC,uBAAuB;IAC3B,IAAIC,SAAS;IACb,IAAI8J,mBAAmB,IAAI,OAAOA,mBAAmB,KAAK,QAAQ,EAAE;MAClE,IAAI,CAACE,WAAW,GAAGF,mBAAmB;IACxC,CAAC,MAAM,IAAIA,mBAAmB,EAAE;MAC9B,IAAI,CAACE,WAAW,GAAGF,mBAAmB,CAAChb,UAAU;MACjD,IAAI,CAACmb,iCAAiC,GAAGH,mBAAmB,CAACmC,gCAAgC;MAC7FD,UAAU,GAAGlC,mBAAmB,CAACkC,UAAU;MAC3CpM,WAAW,GAAGkK,mBAAmB,CAAClK,WAAW;MAC7C5G,KAAK,GAAG8Q,mBAAmB,CAAC9Q,KAAK;MACjC8G,eAAe,GAAGgK,mBAAmB,CAAChK,eAAe;MACrDC,uBAAuB,GAAG+J,mBAAmB,CAAC/J,uBAAuB;MACrEC,SAAS,GAAG8J,mBAAmB,CAAC9J,SAAS;IAC3C;IACA,IAAI,CAACvK,YAAY,GAAGoG,iBAAiB,CAACf,QAAQ,CAAC;IAC/C,IAAI,CAACoP,cAAc,GAAG8B,UAAU,IAAInR,gBAAgB,CAACC,QAAQ,CAAC;IAC9D,IAAI,CAACqP,UAAU,GAAGxK,eAAe,CAAC7E,QAAQ,EAAE8E,WAAW,EAAE5G,KAAK,EAAE8G,eAAe,EAAEC,uBAAuB,EAAEC,SAAS,CAAC;IACpH,IAAI,CAACoK,WAAW,GAAGzI,gBAAgB,CAAC,IAAI,CAACwI,UAAU,CAAC;IACpD,IAAI,CAACE,gBAAgB,GAAGxI,qBAAqB,CAAC,IAAI,CAACsI,UAAU,CAAC;IAC9D,IAAI,CAACG,aAAa,GAAG,IAAIrR,kBAAkB,CAAC,IAAI,CAACiR,cAAc,EAAE;MAC/D5Q,WAAW,EAAE,KAAK;MAClBC,cAAc,EAAE2S;IAClB,CAAC,CAAC;IACF,IAAI,CAAC5B,aAAa,CAAC6B,EAAE,CAAC,MAAM,EAAE,IAAI,CAACC,SAAS,CAACnyB,IAAI,CAAC,IAAI,CAAC,CAAC;IACxD,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,OAAO,EAAE,IAAI,CAACE,UAAU,CAACpyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,OAAO,EAAE,IAAI,CAACG,UAAU,CAACryB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,qBAAqB,EAAE,IAAI,CAACI,wBAAwB,CAACtyB,IAAI,CAAC,IAAI,CAAC,CAAC;IACtF,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,qBAAqB,EAAE,IAAI,CAACK,+BAA+B,CAACvyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7F,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAACM,qBAAqB,CAACxyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAChF,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,0BAA0B,EAAE,IAAI,CAACO,4BAA4B,CAACzyB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/F,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,uBAAuB,EAAE,IAAI,CAACQ,0BAA0B,CAAC1yB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1F,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAACS,qBAAqB,CAAC3yB,IAAI,CAAC,IAAI,CAAC,CAAC;IAChF,IAAI,CAACqwB,aAAa,CAAC6B,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAACU,qBAAqB,CAAC5yB,IAAI,CAAC,IAAI,CAAC,CAAC;EAClF;;EAEA;AACF;AACA;EACE,IAAI6U,UAAUA,CAAA,EAAG;IACf,OAAO,IAAI,CAACkb,WAAW;EACzB;;EAEA;AACF;AACA;EACE,IAAI8C,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACrX,YAAY;EAC1B;;EAEA;AACF;AACA;EACQsX,oBAAoBA,CAACj7B,SAAS,EAAEmqB,kBAAkB,EAAE;IAAA,IAAA+Q,MAAA;IAAA,OAAAh3B,iBAAA;MACxD;MACA,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGmuB,MAAI,CAACpB,UAAU,CAAC,CAAC95B,SAAS,CAACkD,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAClG,MAAM6iB,SAAS,SAASkB,MAAI,CAAC5C,WAAW,CAAC,YAAY,EAAEvrB,IAAI,CAAC;MAC5D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACtsB,MAAM,CAAC,CAAC,CAAC,CAAC;MAChE,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,6BAA6BrjB,SAAS,CAACkD,QAAQ,CAAC,CAAC,EAAE,CAAC;MAC9F;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQwQ,UAAUA,CAACn7B,SAAS,EAAEmqB,kBAAkB,EAAE;IAAA,IAAAiR,MAAA;IAAA,OAAAl3B,iBAAA;MAC9C,aAAak3B,MAAI,CAACH,oBAAoB,CAACj7B,SAAS,EAAEmqB,kBAAkB,CAAC,CAACvP,IAAI,CAACpG,CAAC,IAAIA,CAAC,CAAC/R,KAAK,CAAC,CAACsY,KAAK,CAACsgB,CAAC,IAAI;QAClG,MAAM,IAAIp5B,KAAK,CAAC,mCAAmC,GAAGjC,SAAS,CAACkD,QAAQ,CAAC,CAAC,GAAG,IAAI,GAAGm4B,CAAC,CAAC;MACxF,CAAC,CAAC;IAAC;EACL;;EAEA;AACF;AACA;EACQC,YAAYA,CAACnX,IAAI,EAAE;IAAA,IAAAoX,MAAA;IAAA,OAAAr3B,iBAAA;MACvB,MAAM81B,SAAS,SAASuB,MAAI,CAACjD,WAAW,CAAC,cAAc,EAAE,CAACnU,IAAI,CAAC,CAAC;MAChE,MAAMmL,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAAClsB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAChE,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,qCAAqCc,IAAI,EAAE,CAAC;MACtF;MACA,OAAOmL,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;EACQ6Q,oBAAoBA,CAAA,EAAG;IAAA,IAAAC,MAAA;IAAA,OAAAv3B,iBAAA;MAC3B,MAAM81B,SAAS,SAASyB,MAAI,CAACnD,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC;MACjE,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,mCAAmC,CAAC;MAC9E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ+Q,sBAAsBA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAz3B,iBAAA;MAC7B,MAAM81B,SAAS,SAAS2B,OAAI,CAACrD,WAAW,CAAC,wBAAwB,EAAE,EAAE,CAAC;MACtE,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEvJ,aAAa,CAAC;MAC5C,IAAI,OAAO,IAAInB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,qCAAqC,CAAC;MAChF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQiR,SAASA,CAACzkB,MAAM,EAAE;IAAA,IAAA0kB,OAAA;IAAA,OAAA33B,iBAAA;MACtB,IAAI43B,SAAS,GAAG,CAAC,CAAC;MAClB,IAAI,OAAO3kB,MAAM,KAAK,QAAQ,EAAE;QAC9B2kB,SAAS,GAAG;UACV9e,UAAU,EAAE7F;QACd,CAAC;MACH,CAAC,MAAM,IAAIA,MAAM,EAAE;QACjB2kB,SAAS,GAAG;UACV,GAAG3kB,MAAM;UACT6F,UAAU,EAAE7F,MAAM,IAAIA,MAAM,CAAC6F,UAAU,IAAI6e,OAAI,CAAC7e;QAClD,CAAC;MACH,CAAC,MAAM;QACL8e,SAAS,GAAG;UACV9e,UAAU,EAAE6e,OAAI,CAAC7e;QACnB,CAAC;MACH;MACA,MAAMgd,SAAS,SAAS6B,OAAI,CAACvD,WAAW,CAAC,WAAW,EAAE,CAACwD,SAAS,CAAC,CAAC;MAClE,MAAMxM,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEtJ,kBAAkB,CAAC;MACjD,IAAI,OAAO,IAAIpB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,sBAAsB,CAAC;MACjE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQoR,cAAcA,CAACC,gBAAgB,EAAEhf,UAAU,EAAE;IAAA,IAAAif,OAAA;IAAA,OAAA/3B,iBAAA;MACjD,MAAM6I,IAAI,GAAGkvB,OAAI,CAACnC,UAAU,CAAC,CAACkC,gBAAgB,CAAC94B,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,CAAC;MACvE,MAAMgd,SAAS,SAASiC,OAAI,CAAC3D,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAAC6F,iBAAiB,CAAC,CAAC;MACzE,IAAI,OAAO,IAAIxB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4BAA4B,CAAC;MACvE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQuR,sBAAsBA,CAACC,YAAY,EAAEnf,UAAU,EAAE;IAAA,IAAAof,OAAA;IAAA,OAAAl4B,iBAAA;MACrD,MAAM6I,IAAI,GAAGqvB,OAAI,CAACtC,UAAU,CAAC,CAACqC,YAAY,CAACj5B,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,CAAC;MACnE,MAAMgd,SAAS,SAASoC,OAAI,CAAC9D,WAAW,CAAC,wBAAwB,EAAEvrB,IAAI,CAAC;MACxE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAAC6F,iBAAiB,CAAC,CAAC;MACzE,IAAI,OAAO,IAAIxB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,qCAAqC,CAAC;MAChF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQ0R,uBAAuBA,CAACC,YAAY,EAAEtxB,MAAM,EAAEmf,kBAAkB,EAAE;IAAA,IAAAoS,OAAA;IAAA,OAAAr4B,iBAAA;MACtE,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,IAAIqS,KAAK,GAAG,CAACF,YAAY,CAACp5B,QAAQ,CAAC,CAAC,CAAC;MACrC,IAAI,MAAM,IAAI8H,MAAM,EAAE;QACpBwxB,KAAK,CAAC71B,IAAI,CAAC;UACT2uB,IAAI,EAAEtqB,MAAM,CAACsqB,IAAI,CAACpyB,QAAQ,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLs5B,KAAK,CAAC71B,IAAI,CAAC;UACT1C,SAAS,EAAE+G,MAAM,CAAC/G,SAAS,CAACf,QAAQ,CAAC;QACvC,CAAC,CAAC;MACJ;MACA,MAAM6J,IAAI,GAAGwvB,OAAI,CAACzC,UAAU,CAAC0C,KAAK,EAAExf,UAAU,EAAE,QAAQ,EAAE7F,MAAM,CAAC;MACjE,MAAM6iB,SAAS,SAASuC,OAAI,CAACjE,WAAW,CAAC,yBAAyB,EAAEvrB,IAAI,CAAC;MACzE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE7I,uBAAuB,CAAC;MACtD,IAAI,OAAO,IAAI7B,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,iDAAiDiZ,YAAY,CAACp5B,QAAQ,CAAC,CAAC,EAAE,CAAC;MACrH;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQ8R,6BAA6BA,CAACH,YAAY,EAAEtxB,MAAM,EAAEgS,UAAU,EAAE;IAAA,IAAA0f,OAAA;IAAA,OAAAx4B,iBAAA;MACpE,IAAIs4B,KAAK,GAAG,CAACF,YAAY,CAACp5B,QAAQ,CAAC,CAAC,CAAC;MACrC,IAAI,MAAM,IAAI8H,MAAM,EAAE;QACpBwxB,KAAK,CAAC71B,IAAI,CAAC;UACT2uB,IAAI,EAAEtqB,MAAM,CAACsqB,IAAI,CAACpyB,QAAQ,CAAC;QAC7B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLs5B,KAAK,CAAC71B,IAAI,CAAC;UACT1C,SAAS,EAAE+G,MAAM,CAAC/G,SAAS,CAACf,QAAQ,CAAC;QACvC,CAAC,CAAC;MACJ;MACA,MAAM6J,IAAI,GAAG2vB,OAAI,CAAC5C,UAAU,CAAC0C,KAAK,EAAExf,UAAU,EAAE,YAAY,CAAC;MAC7D,MAAMgd,SAAS,SAAS0C,OAAI,CAACpE,WAAW,CAAC,yBAAyB,EAAEvrB,IAAI,CAAC;MACzE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE3I,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAI/B,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,iDAAiDiZ,YAAY,CAACp5B,QAAQ,CAAC,CAAC,EAAE,CAAC;MACrH;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQgS,kBAAkBA,CAACxlB,MAAM,EAAE;IAAA,IAAAylB,OAAA;IAAA,OAAA14B,iBAAA;MAC/B,MAAM24B,GAAG,GAAG;QACV,GAAG1lB,MAAM;QACT6F,UAAU,EAAE7F,MAAM,IAAIA,MAAM,CAAC6F,UAAU,IAAI4f,OAAI,CAAC5f;MAClD,CAAC;MACD,MAAMjQ,IAAI,GAAG8vB,GAAG,CAAC7xB,MAAM,IAAI6xB,GAAG,CAAC7f,UAAU,GAAG,CAAC6f,GAAG,CAAC,GAAG,EAAE;MACtD,MAAM7C,SAAS,SAAS4C,OAAI,CAACtE,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE1I,2BAA2B,CAAC;MAC1D,IAAI,OAAO,IAAIhC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,gCAAgC,CAAC;MAC3E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;EACQmS,uBAAuBA,CAACC,WAAW,EAAE/f,UAAU,EAAE;IAAA,IAAAggB,OAAA;IAAA,OAAA94B,iBAAA;MACrD,MAAM6I,IAAI,GAAGiwB,OAAI,CAAClD,UAAU,CAAC,CAACiD,WAAW,CAAC75B,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,CAAC;MAClE,MAAMgd,SAAS,SAASgD,OAAI,CAAC1E,WAAW,CAAC,yBAAyB,EAAEvrB,IAAI,CAAC;MACzE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE9I,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAI5B,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,sCAAsC,CAAC;MACjF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQsS,wBAAwBA,CAACj9B,SAAS,EAAEmqB,kBAAkB,EAAE;IAAA,IAAA+S,OAAA;IAAA,OAAAh5B,iBAAA;MAC5D,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGmwB,OAAI,CAACpD,UAAU,CAAC,CAAC95B,SAAS,CAACkD,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAE,QAAQ,EAAE7F,MAAM,CAAC;MAClF,MAAM6iB,SAAS,SAASkD,OAAI,CAAC5E,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACpsB,QAAQ,CAAC0yB,iBAAiB,CAAC,CAAC,CAAC;MACnF,IAAI,OAAO,IAAIjC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,oCAAoCrjB,SAAS,CAACkD,QAAQ,CAAC,CAAC,EAAE,CAAC;MACrG;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQwS,oBAAoBA,CAACn9B,SAAS,EAAEmqB,kBAAkB,EAAE;IAAA,IAAAiT,OAAA;IAAA,OAAAl5B,iBAAA;MACxD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGqwB,OAAI,CAACtD,UAAU,CAAC,CAAC95B,SAAS,CAACkD,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;MACtF,MAAM6iB,SAAS,SAASoD,OAAI,CAAC9E,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACpsB,QAAQ,CAAC6yB,uBAAuB,CAAC,CAAC,CAAC;MACzF,IAAI,OAAO,IAAIpC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,oCAAoCrjB,SAAS,CAACkD,QAAQ,CAAC,CAAC,EAAE,CAAC;MACrG;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQxH,cAAcA,CAACnjB,SAAS,EAAEmqB,kBAAkB,EAAE;IAAA,IAAAkT,OAAA;IAAA,OAAAn5B,iBAAA;MAClD,IAAI;QACF,MAAMorB,GAAG,SAAS+N,OAAI,CAACJ,wBAAwB,CAACj9B,SAAS,EAAEmqB,kBAAkB,CAAC;QAC9E,OAAOmF,GAAG,CAAC7sB,KAAK;MAClB,CAAC,CAAC,OAAO44B,CAAC,EAAE;QACV,MAAM,IAAIp5B,KAAK,CAAC,mCAAmC,GAAGjC,SAAS,CAACkD,QAAQ,CAAC,CAAC,GAAG,IAAI,GAAGm4B,CAAC,CAAC;MACxF;IAAC;EACH;;EAEA;AACF;AACA;EACQiC,yBAAyBA,CAACC,UAAU,EAAEC,SAAS,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAAv5B,iBAAA;MACrD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACsT,SAAS,CAAC;MAC1C,MAAMz7B,IAAI,GAAGw7B,UAAU,CAACr7B,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAM6J,IAAI,GAAG0wB,OAAI,CAAC3D,UAAU,CAAC,CAAC/3B,IAAI,CAAC,EAAEib,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;MACtE,MAAM6iB,SAAS,SAASyD,OAAI,CAACnF,WAAW,CAAC,qBAAqB,EAAEvrB,IAAI,CAAC;MACrE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACrsB,KAAK,CAACC,QAAQ,CAAC6yB,uBAAuB,CAAC,CAAC,CAAC,CAAC;MAChG,IAAI,OAAO,IAAIpC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,mCAAmCthB,IAAI,EAAE,CAAC;MACpF;MACA,OAAOutB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ+S,iCAAiCA,CAACH,UAAU,EAAEpT,kBAAkB,EAAE;IAAA,IAAAwT,OAAA;IAAA,OAAAz5B,iBAAA;MACtE,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpoB,IAAI,GAAGw7B,UAAU,CAACr7B,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;MAClD,MAAM6J,IAAI,GAAG4wB,OAAI,CAAC7D,UAAU,CAAC,CAAC/3B,IAAI,CAAC,EAAEib,UAAU,EAAE,QAAQ,EAAE7F,MAAM,CAAC;MAClE,MAAM6iB,SAAS,SAAS2D,OAAI,CAACrF,WAAW,CAAC,qBAAqB,EAAEvrB,IAAI,CAAC;MACrE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACrsB,KAAK,CAACC,QAAQ,CAAC0yB,iBAAiB,CAAC,CAAC,CAAC,CAAC;MAC1F,IAAI,OAAO,IAAIjC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,mCAAmCthB,IAAI,EAAE,CAAC;MACpF;MACA,OAAOutB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQiT,uBAAuBA,CAACL,UAAU,EAAEpT,kBAAkB,EAAE;IAAA,IAAA0T,OAAA;IAAA,OAAA35B,iBAAA;MAC5D,MAAMorB,GAAG,SAASuO,OAAI,CAACH,iCAAiC,CAACH,UAAU,EAAEpT,kBAAkB,CAAC;MACxF,OAAOmF,GAAG,CAAC7sB,KAAK;IAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACQq7B,kBAAkBA,CAAC99B,SAAS,EAAEmqB,kBAAkB,EAAE7D,KAAK,EAAE;IAAA,IAAAyX,OAAA;IAAA,OAAA75B,iBAAA;MAC7D,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGgxB,OAAI,CAACjE,UAAU,CAAC,CAAC95B,SAAS,CAACkD,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEra,SAAS,CAAC,gBAAgB;QACzF,GAAGwU,MAAM;QACTmP,KAAK,EAAEA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGnP,MAAM,EAAEmP;MACzC,CAAC,CAAC;MACF,MAAM0T,SAAS,SAAS+D,OAAI,CAACzF,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAAC6G,qBAAqB,CAAC,CAAC;MACnE,IAAI,OAAO,IAAItC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,kCAAkCrjB,SAAS,CAACkD,QAAQ,CAAC,CAAC,EAAE,CAAC;MACnG;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;;EAEE;;EAEA;EACMqT,kBAAkBA,CAAC/5B,SAAS,EAAEg6B,kBAAkB,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAAh6B,iBAAA;MACtD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAAC+T,kBAAkB,CAAC;MACnD,MAAM;QACJxT,QAAQ;QACR,GAAG0T;MACL,CAAC,GAAGhnB,MAAM,IAAI,CAAC,CAAC;MAChB,MAAMpK,IAAI,GAAGmxB,OAAI,CAACpE,UAAU,CAAC,CAAC71B,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEyN,QAAQ,IAAI,QAAQ,EAAE;QACrF,GAAG0T,qBAAqB;QACxB,IAAIA,qBAAqB,CAAC5T,OAAO,GAAG;UAClCA,OAAO,EAAED,mCAAmC,CAAC6T,qBAAqB,CAAC5T,OAAO;QAC5E,CAAC,GAAG,IAAI;MACV,CAAC,CAAC;MACF,MAAMyP,SAAS,SAASkE,OAAI,CAAC5F,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMqxB,UAAU,GAAGx/B,KAAK,CAAC4yB,sBAAsB,CAAC;MAChD,MAAMlC,GAAG,GAAG6O,qBAAqB,CAACE,WAAW,KAAK,IAAI,GAAGn/B,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACmT,UAAU,CAAC,CAAC,GAAGl/B,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACqT,UAAU,CAAC,CAAC;MAC9J,IAAI,OAAO,IAAI9O,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2CAA2Cpf,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE,CAAC;MAC5G;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQ2T,wBAAwBA,CAACr6B,SAAS,EAAEg6B,kBAAkB,EAAE;IAAA,IAAAM,OAAA;IAAA,OAAAr6B,iBAAA;MAC5D,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAAC+T,kBAAkB,CAAC;MACnD,MAAMlxB,IAAI,GAAGwxB,OAAI,CAACzE,UAAU,CAAC,CAAC71B,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;MACtF,MAAM6iB,SAAS,SAASuE,OAAI,CAACjG,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACnsB,KAAK,CAAC+yB,4BAA4B,CAAC,CAAC,CAAC;MACjF,IAAI,OAAO,IAAIrC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2CAA2Cpf,SAAS,CAACf,QAAQ,CAAC,CAAC,EAAE,CAAC;MAC5G;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;EACA;;EAEA;EACMvN,kBAAkBA,CAACohB,QAAQ,EAAExhB,UAAU,EAAE;IAAA,IAAAyhB,OAAA;IAAA,OAAAv6B,iBAAA;MAC7C,IAAIw6B,YAAY;MAChB,IAAI,OAAOF,QAAQ,IAAI,QAAQ,EAAE;QAC/BE,YAAY,GAAGF,QAAQ;MACzB,CAAC,MAAM;QACL,MAAMrnB,MAAM,GAAGqnB,QAAQ;QACvB,IAAIrnB,MAAM,CAACkG,WAAW,EAAEshB,OAAO,EAAE;UAC/B,OAAOnkB,OAAO,CAACE,MAAM,CAACvD,MAAM,CAACkG,WAAW,CAACuhB,MAAM,CAAC;QAClD;QACAF,YAAY,GAAGvnB,MAAM,CAACnR,SAAS;MACjC;MACA,IAAI64B,gBAAgB;MACpB,IAAI;QACFA,gBAAgB,GAAGlhC,IAAI,CAAC+D,MAAM,CAACg9B,YAAY,CAAC;MAC9C,CAAC,CAAC,OAAO35B,GAAG,EAAE;QACZ,MAAM,IAAI9C,KAAK,CAAC,oCAAoC,GAAGy8B,YAAY,CAAC;MACtE;MACAt/B,MAAM,CAACy/B,gBAAgB,CAAC78B,MAAM,KAAK,EAAE,EAAE,8BAA8B,CAAC;MACtE,IAAI,OAAOw8B,QAAQ,KAAK,QAAQ,EAAE;QAChC,aAAaC,OAAI,CAACK,4CAA4C,CAAC;UAC7D9hB,UAAU,EAAEA,UAAU,IAAIyhB,OAAI,CAACzhB,UAAU;UACzChX,SAAS,EAAE04B;QACb,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,sBAAsB,IAAIF,QAAQ,EAAE;QAC7C,aAAaC,OAAI,CAACM,oDAAoD,CAAC;UACrE/hB,UAAU,EAAEA,UAAU,IAAIyhB,OAAI,CAACzhB,UAAU;UACzCwhB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,aAAaC,OAAI,CAACO,2CAA2C,CAAC;UAC5DhiB,UAAU,EAAEA,UAAU,IAAIyhB,OAAI,CAACzhB,UAAU;UACzCwhB;QACF,CAAC,CAAC;MACJ;IAAC;EACH;EACAS,sBAAsBA,CAACC,MAAM,EAAE;IAC7B,OAAO,IAAI1kB,OAAO,CAAC,CAAC9L,CAAC,EAAEgM,MAAM,KAAK;MAChC,IAAIwkB,MAAM,IAAI,IAAI,EAAE;QAClB;MACF;MACA,IAAIA,MAAM,CAACP,OAAO,EAAE;QAClBjkB,MAAM,CAACwkB,MAAM,CAACN,MAAM,CAAC;MACvB,CAAC,MAAM;QACLM,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACrCzkB,MAAM,CAACwkB,MAAM,CAACN,MAAM,CAAC;QACvB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EACAQ,iCAAiCA,CAAC;IAChCpiB,UAAU;IACVhX;EACF,CAAC,EAAE;IAAA,IAAAq5B,OAAA;IACD,IAAIC,uBAAuB;IAC3B,IAAIC,+CAA+C;IACnD,IAAIC,IAAI,GAAG,KAAK;IAChB,MAAMC,mBAAmB,GAAG,IAAIjlB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC3D,IAAI;QACF4kB,uBAAuB,GAAG,IAAI,CAACI,WAAW,CAAC15B,SAAS,EAAE,CAAC2kB,MAAM,EAAE3G,OAAO,KAAK;UACzEsb,uBAAuB,GAAG38B,SAAS;UACnC,MAAMyoB,QAAQ,GAAG;YACfpH,OAAO;YACPvhB,KAAK,EAAEkoB;UACT,CAAC;UACDlQ,OAAO,CAAC;YACNklB,MAAM,EAAEltB,iBAAiB,CAACmtB,SAAS;YACnCxU;UACF,CAAC,CAAC;QACJ,CAAC,EAAEpO,UAAU,CAAC;QACd,MAAM6iB,wBAAwB,GAAG,IAAIrlB,OAAO,CAACslB,wBAAwB,IAAI;UACvE,IAAIR,uBAAuB,IAAI,IAAI,EAAE;YACnCQ,wBAAwB,CAAC,CAAC;UAC5B,CAAC,MAAM;YACLP,+CAA+C,GAAG,IAAI,CAACQ,0BAA0B,CAACT,uBAAuB,EAAEU,SAAS,IAAI;cACtH,IAAIA,SAAS,KAAK,YAAY,EAAE;gBAC9BF,wBAAwB,CAAC,CAAC;cAC5B;YACF,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;QACF57B,iBAAA,CAAC,aAAY;UACX,MAAM27B,wBAAwB;UAC9B,IAAIL,IAAI,EAAE;UACV,MAAMpU,QAAQ,SAASiU,OAAI,CAACY,kBAAkB,CAACj6B,SAAS,CAAC;UACzD,IAAIw5B,IAAI,EAAE;UACV,IAAIpU,QAAQ,IAAI,IAAI,EAAE;YACpB;UACF;UACA,MAAM;YACJpH,OAAO;YACPvhB;UACF,CAAC,GAAG2oB,QAAQ;UACZ,IAAI3oB,KAAK,IAAI,IAAI,EAAE;YACjB;UACF;UACA,IAAIA,KAAK,EAAEsC,GAAG,EAAE;YACd2V,MAAM,CAACjY,KAAK,CAACsC,GAAG,CAAC;UACnB,CAAC,MAAM;YACL,QAAQiY,UAAU;cAChB,KAAK,WAAW;cAChB,KAAK,QAAQ;cACb,KAAK,cAAc;gBACjB;kBACE,IAAIva,KAAK,CAAC6xB,kBAAkB,KAAK,WAAW,EAAE;oBAC5C;kBACF;kBACA;gBACF;cACF,KAAK,WAAW;cAChB,KAAK,KAAK;cACV,KAAK,MAAM;gBACT;kBACE,IAAI7xB,KAAK,CAAC6xB,kBAAkB,KAAK,WAAW,IAAI7xB,KAAK,CAAC6xB,kBAAkB,KAAK,WAAW,EAAE;oBACxF;kBACF;kBACA;gBACF;cACF;cACA,KAAK,WAAW;cAChB,KAAK,QAAQ;YACf;YACAkL,IAAI,GAAG,IAAI;YACX/kB,OAAO,CAAC;cACNklB,MAAM,EAAEltB,iBAAiB,CAACmtB,SAAS;cACnCxU,QAAQ,EAAE;gBACRpH,OAAO;gBACPvhB;cACF;YACF,CAAC,CAAC;UACJ;QACF,CAAC,EAAE,CAAC;MACN,CAAC,CAAC,OAAOsC,GAAG,EAAE;QACZ2V,MAAM,CAAC3V,GAAG,CAAC;MACb;IACF,CAAC,CAAC;IACF,MAAMm7B,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,IAAIX,+CAA+C,EAAE;QACnDA,+CAA+C,CAAC,CAAC;QACjDA,+CAA+C,GAAG58B,SAAS;MAC7D;MACA,IAAI28B,uBAAuB,IAAI,IAAI,EAAE;QACnC,IAAI,CAACa,uBAAuB,CAACb,uBAAuB,CAAC;QACrDA,uBAAuB,GAAG38B,SAAS;MACrC;IACF,CAAC;IACD,OAAO;MACLu9B,iBAAiB;MACjBT;IACF,CAAC;EACH;EACMV,oDAAoDA,CAAC;IACzD/hB,UAAU;IACVwhB,QAAQ,EAAE;MACRnhB,WAAW;MACXpK,oBAAoB;MACpBjN;IACF;EACF,CAAC,EAAE;IAAA,IAAAo6B,OAAA;IAAA,OAAAl8B,iBAAA;MACD,IAAIs7B,IAAI,GAAG,KAAK;MAChB,MAAMa,aAAa,GAAG,IAAI7lB,OAAO,CAACC,OAAO,IAAI;QAC3C,MAAM6lB,gBAAgB;UAAA,IAAAC,KAAA,GAAAr8B,iBAAA,CAAG,aAAY;YACnC,IAAI;cACF,MAAMsoB,WAAW,SAAS4T,OAAI,CAACzG,cAAc,CAAC3c,UAAU,CAAC;cACzD,OAAOwP,WAAW;YACpB,CAAC,CAAC,OAAOgU,EAAE,EAAE;cACX,OAAO,CAAC,CAAC;YACX;UACF,CAAC;UAAA,gBAPKF,gBAAgBA,CAAA;YAAA,OAAAC,KAAA,CAAA5jB,KAAA,OAAAC,SAAA;UAAA;QAAA,GAOrB;QACD1Y,iBAAA,CAAC,aAAY;UACX,IAAIu8B,kBAAkB,SAASH,gBAAgB,CAAC,CAAC;UACjD,IAAId,IAAI,EAAE;UACV,OAAOiB,kBAAkB,IAAIxtB,oBAAoB,EAAE;YACjD,MAAMuK,KAAK,CAAC,IAAI,CAAC;YACjB,IAAIgiB,IAAI,EAAE;YACViB,kBAAkB,SAASH,gBAAgB,CAAC,CAAC;YAC7C,IAAId,IAAI,EAAE;UACZ;UACA/kB,OAAO,CAAC;YACNklB,MAAM,EAAEltB,iBAAiB,CAACiuB;UAC5B,CAAC,CAAC;QACJ,CAAC,EAAE,CAAC;MACN,CAAC,CAAC;MACF,MAAM;QACJR,iBAAiB;QACjBT;MACF,CAAC,GAAGW,OAAI,CAAChB,iCAAiC,CAAC;QACzCpiB,UAAU;QACVhX;MACF,CAAC,CAAC;MACF,MAAM26B,mBAAmB,GAAGP,OAAI,CAACnB,sBAAsB,CAAC5hB,WAAW,CAAC;MACpE,IAAIsN,MAAM;MACV,IAAI;QACF,MAAMiW,OAAO,SAASpmB,OAAO,CAACqmB,IAAI,CAAC,CAACF,mBAAmB,EAAElB,mBAAmB,EAAEY,aAAa,CAAC,CAAC;QAC7F,IAAIO,OAAO,CAACjB,MAAM,KAAKltB,iBAAiB,CAACmtB,SAAS,EAAE;UAClDjV,MAAM,GAAGiW,OAAO,CAACxV,QAAQ;QAC3B,CAAC,MAAM;UACL,MAAM,IAAIrlB,0CAA0C,CAACC,SAAS,CAAC;QACjE;MACF,CAAC,SAAS;QACRw5B,IAAI,GAAG,IAAI;QACXU,iBAAiB,CAAC,CAAC;MACrB;MACA,OAAOvV,MAAM;IAAC;EAChB;EACMqU,2CAA2CA,CAAC;IAChDhiB,UAAU;IACVwhB,QAAQ,EAAE;MACRnhB,WAAW;MACX7J,cAAc;MACd8J,kBAAkB;MAClBC,UAAU;MACVvX;IACF;EACF,CAAC,EAAE;IAAA,IAAA86B,OAAA;IAAA,OAAA58B,iBAAA;MACD,IAAIs7B,IAAI,GAAG,KAAK;MAChB,MAAMa,aAAa,GAAG,IAAI7lB,OAAO,CAACC,OAAO,IAAI;QAC3C,IAAIsmB,iBAAiB,GAAGxjB,UAAU;QAClC,IAAIyjB,eAAe,GAAG,IAAI;QAC1B,MAAMC,oBAAoB;UAAA,IAAAC,KAAA,GAAAh9B,iBAAA,CAAG,aAAY;YACvC,IAAI;cACF,MAAM;gBACJ8f,OAAO;gBACPvhB,KAAK,EAAE8b;cACT,CAAC,SAASuiB,OAAI,CAACK,kBAAkB,CAAC7jB,kBAAkB,EAAE;gBACpDN,UAAU;gBACVxJ;cACF,CAAC,CAAC;cACFwtB,eAAe,GAAGhd,OAAO,CAACG,IAAI;cAC9B,OAAO5F,YAAY,EAAE3Z,KAAK;YAC5B,CAAC,CAAC,OAAOy2B,CAAC,EAAE;cACV;cACA;cACA,OAAO0F,iBAAiB;YAC1B;UACF,CAAC;UAAA,gBAhBKE,oBAAoBA,CAAA;YAAA,OAAAC,KAAA,CAAAvkB,KAAA,OAAAC,SAAA;UAAA;QAAA,GAgBzB;QACD1Y,iBAAA,CAAC,aAAY;UACX68B,iBAAiB,SAASE,oBAAoB,CAAC,CAAC;UAChD,IAAIzB,IAAI,EAAE;UACV,OAAO,IAAI,CAAC;UAAA,EACV;YACA,IAAIjiB,UAAU,KAAKwjB,iBAAiB,EAAE;cACpCtmB,OAAO,CAAC;gBACNklB,MAAM,EAAEltB,iBAAiB,CAAC2uB,aAAa;gBACvCC,0BAA0B,EAAEL;cAC9B,CAAC,CAAC;cACF;YACF;YACA,MAAMxjB,KAAK,CAAC,IAAI,CAAC;YACjB,IAAIgiB,IAAI,EAAE;YACVuB,iBAAiB,SAASE,oBAAoB,CAAC,CAAC;YAChD,IAAIzB,IAAI,EAAE;UACZ;QACF,CAAC,EAAE,CAAC;MACN,CAAC,CAAC;MACF,MAAM;QACJU,iBAAiB;QACjBT;MACF,CAAC,GAAGqB,OAAI,CAAC1B,iCAAiC,CAAC;QACzCpiB,UAAU;QACVhX;MACF,CAAC,CAAC;MACF,MAAM26B,mBAAmB,GAAGG,OAAI,CAAC7B,sBAAsB,CAAC5hB,WAAW,CAAC;MACpE,IAAIsN,MAAM;MACV,IAAI;QACF,MAAMiW,OAAO,SAASpmB,OAAO,CAACqmB,IAAI,CAAC,CAACF,mBAAmB,EAAElB,mBAAmB,EAAEY,aAAa,CAAC,CAAC;QAC7F,IAAIO,OAAO,CAACjB,MAAM,KAAKltB,iBAAiB,CAACmtB,SAAS,EAAE;UAClDjV,MAAM,GAAGiW,OAAO,CAACxV,QAAQ;QAC3B,CAAC,MAAM;UACL;UACA,IAAIkW,eAAe;UACnB,OAAO,IAAI,CAAC;UAAA,EACV;YACA,MAAMnkB,MAAM,SAAS2jB,OAAI,CAACb,kBAAkB,CAACj6B,SAAS,CAAC;YACvD,IAAImX,MAAM,IAAI,IAAI,EAAE;cAClB;YACF;YACA,IAAIA,MAAM,CAAC6G,OAAO,CAACG,IAAI,IAAIyc,OAAO,CAACS,0BAA0B,IAAI7tB,cAAc,CAAC,EAAE;cAChF,MAAMgK,KAAK,CAAC,GAAG,CAAC;cAChB;YACF;YACA8jB,eAAe,GAAGnkB,MAAM;YACxB;UACF;UACA,IAAImkB,eAAe,EAAE7+B,KAAK,EAAE;YAC1B,MAAM8+B,mBAAmB,GAAGvkB,UAAU,IAAI,WAAW;YACrD,MAAM;cACJsX;YACF,CAAC,GAAGgN,eAAe,CAAC7+B,KAAK;YACzB,QAAQ8+B,mBAAmB;cACzB,KAAK,WAAW;cAChB,KAAK,QAAQ;gBACX,IAAIjN,kBAAkB,KAAK,WAAW,IAAIA,kBAAkB,KAAK,WAAW,IAAIA,kBAAkB,KAAK,WAAW,EAAE;kBAClH,MAAM,IAAIhuB,mCAAmC,CAACN,SAAS,CAAC;gBAC1D;gBACA;cACF,KAAK,WAAW;cAChB,KAAK,QAAQ;cACb,KAAK,cAAc;gBACjB,IAAIsuB,kBAAkB,KAAK,WAAW,IAAIA,kBAAkB,KAAK,WAAW,EAAE;kBAC5E,MAAM,IAAIhuB,mCAAmC,CAACN,SAAS,CAAC;gBAC1D;gBACA;cACF,KAAK,WAAW;cAChB,KAAK,KAAK;cACV,KAAK,MAAM;gBACT,IAAIsuB,kBAAkB,KAAK,WAAW,EAAE;kBACtC,MAAM,IAAIhuB,mCAAmC,CAACN,SAAS,CAAC;gBAC1D;gBACA;cACF;gBACE;gBACA;gBACA,CAAC0I,CAAC,IAAI,CAAC,CAAC,EAAE6yB,mBAAmB,CAAC;YAClC;YACA5W,MAAM,GAAG;cACP3G,OAAO,EAAEsd,eAAe,CAACtd,OAAO;cAChCvhB,KAAK,EAAE;gBACLsC,GAAG,EAAEu8B,eAAe,CAAC7+B,KAAK,CAACsC;cAC7B;YACF,CAAC;UACH,CAAC,MAAM;YACL,MAAM,IAAIuB,mCAAmC,CAACN,SAAS,CAAC;UAC1D;QACF;MACF,CAAC,SAAS;QACRw5B,IAAI,GAAG,IAAI;QACXU,iBAAiB,CAAC,CAAC;MACrB;MACA,OAAOvV,MAAM;IAAC;EAChB;EACMmU,4CAA4CA,CAAC;IACjD9hB,UAAU;IACVhX;EACF,CAAC,EAAE;IAAA,IAAAw7B,OAAA;IAAA,OAAAt9B,iBAAA;MACD,IAAIu9B,SAAS;MACb,MAAMpB,aAAa,GAAG,IAAI7lB,OAAO,CAACC,OAAO,IAAI;QAC3C,IAAIinB,SAAS,GAAGF,OAAI,CAACrJ,iCAAiC,IAAI,EAAE,GAAG,IAAI;QACnE,QAAQnb,UAAU;UAChB,KAAK,WAAW;UAChB,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb,KAAK,WAAW;UAChB,KAAK,cAAc;YACjB;cACE0kB,SAAS,GAAGF,OAAI,CAACrJ,iCAAiC,IAAI,EAAE,GAAG,IAAI;cAC/D;YACF;QACJ;QACAsJ,SAAS,GAAG/jB,UAAU,CAAC,MAAMjD,OAAO,CAAC;UACnCklB,MAAM,EAAEltB,iBAAiB,CAACkvB,SAAS;UACnCD;QACF,CAAC,CAAC,EAAEA,SAAS,CAAC;MAChB,CAAC,CAAC;MACF,MAAM;QACJxB,iBAAiB;QACjBT;MACF,CAAC,GAAG+B,OAAI,CAACpC,iCAAiC,CAAC;QACzCpiB,UAAU;QACVhX;MACF,CAAC,CAAC;MACF,IAAI2kB,MAAM;MACV,IAAI;QACF,MAAMiW,OAAO,SAASpmB,OAAO,CAACqmB,IAAI,CAAC,CAACpB,mBAAmB,EAAEY,aAAa,CAAC,CAAC;QACxE,IAAIO,OAAO,CAACjB,MAAM,KAAKltB,iBAAiB,CAACmtB,SAAS,EAAE;UAClDjV,MAAM,GAAGiW,OAAO,CAACxV,QAAQ;QAC3B,CAAC,MAAM;UACL,MAAM,IAAIjlB,8BAA8B,CAACH,SAAS,EAAE46B,OAAO,CAACc,SAAS,GAAG,IAAI,CAAC;QAC/E;MACF,CAAC,SAAS;QACRE,YAAY,CAACH,SAAS,CAAC;QACvBvB,iBAAiB,CAAC,CAAC;MACrB;MACA,OAAOvV,MAAM;IAAC;EAChB;;EAEA;AACF;AACA;EACQkX,eAAeA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAA59B,iBAAA;MACtB,MAAM81B,SAAS,SAAS8H,OAAI,CAACxJ,WAAW,CAAC,iBAAiB,EAAE,EAAE,CAAC;MAC/D,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACnsB,KAAK,CAACy0B,iBAAiB,CAAC,CAAC,CAAC;MACtE,IAAI,OAAO,IAAI/D,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,6BAA6B,CAAC;MACxE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQoX,eAAeA,CAAC/kB,UAAU,EAAE;IAAA,IAAAglB,OAAA;IAAA,OAAA99B,iBAAA;MAChC,MAAM6I,IAAI,GAAGi1B,OAAI,CAAClI,UAAU,CAAC,EAAE,EAAE9c,UAAU,CAAC;MAC5C,MAAMgd,SAAS,SAASgI,OAAI,CAAC1J,WAAW,CAAC,iBAAiB,EAAEvrB,IAAI,CAAC;MACjE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEhG,eAAe,CAAC;MAC9C,IAAI,OAAO,IAAI1E,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,6BAA6B,CAAC;MACxE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQzG,OAAOA,CAACiG,kBAAkB,EAAE;IAAA,IAAA8X,OAAA;IAAA,OAAA/9B,iBAAA;MAChC,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGk1B,OAAI,CAACnI,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAC9E,MAAM6iB,SAAS,SAASiI,OAAI,CAAC3J,WAAW,CAAC,SAAS,EAAEvrB,IAAI,CAAC;MACzD,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,oBAAoB,CAAC;MAC/D;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQuX,aAAaA,CAAC/X,kBAAkB,EAAE;IAAA,IAAAgY,OAAA;IAAA,OAAAj+B,iBAAA;MACtC,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGo1B,OAAI,CAACrI,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAC9E,MAAM6iB,SAAS,SAASmI,OAAI,CAAC7J,WAAW,CAAC,eAAe,EAAEvrB,IAAI,CAAC;MAC/D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACzsB,MAAM,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI,OAAO,IAAIgxB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2BAA2B,CAAC;MACtE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACQyX,cAAcA,CAACC,SAAS,EAAEC,KAAK,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAAr+B,iBAAA;MACrC,MAAM6I,IAAI,GAAG,CAACs1B,SAAS,EAAEC,KAAK,CAAC;MAC/B,MAAMtI,SAAS,SAASuI,OAAI,CAACjK,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACnsB,KAAK,CAAC+qB,mBAAmB,CAAC,CAAC,CAAC;MACxE,IAAI,OAAO,IAAI2F,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4BAA4B,CAAC;MACvE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQsV,kBAAkBA,CAACj6B,SAAS,EAAEmR,MAAM,EAAE;IAAA,IAAAqrB,OAAA;IAAA,OAAAt+B,iBAAA;MAC1C,MAAM;QACJ8f,OAAO;QACPvhB,KAAK,EAAE+L;MACT,CAAC,SAASg0B,OAAI,CAACC,oBAAoB,CAAC,CAACz8B,SAAS,CAAC,EAAEmR,MAAM,CAAC;MACxD/X,MAAM,CAACoP,MAAM,CAACxM,MAAM,KAAK,CAAC,CAAC;MAC3B,MAAMS,KAAK,GAAG+L,MAAM,CAAC,CAAC,CAAC;MACvB,OAAO;QACLwV,OAAO;QACPvhB;MACF,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQggC,oBAAoBA,CAAC1vB,UAAU,EAAEoE,MAAM,EAAE;IAAA,IAAAurB,OAAA;IAAA,OAAAx+B,iBAAA;MAC7C,MAAM0d,MAAM,GAAG,CAAC7O,UAAU,CAAC;MAC3B,IAAIoE,MAAM,EAAE;QACVyK,MAAM,CAACjb,IAAI,CAACwQ,MAAM,CAAC;MACrB;MACA,MAAM6iB,SAAS,SAAS0I,OAAI,CAACpK,WAAW,CAAC,sBAAsB,EAAE1W,MAAM,CAAC;MACxE,MAAM0N,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEzF,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAIjF,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,gCAAgC,CAAC;MAC3E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQgY,mBAAmBA,CAACxY,kBAAkB,EAAE;IAAA,IAAAyY,OAAA;IAAA,OAAA1+B,iBAAA;MAC5C,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAG61B,OAAI,CAAC9I,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAC9E,MAAM6iB,SAAS,SAAS4I,OAAI,CAACtK,WAAW,CAAC,qBAAqB,EAAEvrB,IAAI,CAAC;MACrE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACpsB,MAAM,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,iCAAiC,CAAC;MAC5E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQkY,cAAcA,CAAC7lB,UAAU,EAAE;IAAA,IAAA8lB,OAAA;IAAA,OAAA5+B,iBAAA;MAC/B,MAAMymB,MAAM,SAASmY,OAAI,CAAClH,SAAS,CAAC;QAClC5e,UAAU;QACV+lB,iCAAiC,EAAE;MACrC,CAAC,CAAC;MACF,OAAOpY,MAAM,CAACloB,KAAK,CAAC0pB,KAAK;IAAC;EAC5B;;EAEA;AACF;AACA;EACQ6W,oBAAoBA,CAAChmB,UAAU,EAAE;IAAA,IAAAimB,OAAA;IAAA,OAAA/+B,iBAAA;MACrC,MAAM6I,IAAI,GAAGk2B,OAAI,CAACnJ,UAAU,CAAC,EAAE,EAAE9c,UAAU,CAAC;MAC5C,MAAMgd,SAAS,SAASiJ,OAAI,CAAC3K,WAAW,CAAC,sBAAsB,EAAEvrB,IAAI,CAAC;MACtE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE7J,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAIb,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,yBAAyB,CAAC;MACpE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQuY,kBAAkBA,CAACn3B,SAAS,EAAEua,KAAK,EAAE6D,kBAAkB,EAAE;IAAA,IAAAgZ,OAAA;IAAA,OAAAj/B,iBAAA;MAC7D,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGo2B,OAAI,CAACrJ,UAAU,CAAC,CAAC/tB,SAAS,CAAC7J,GAAG,CAACiD,MAAM,IAAIA,MAAM,CAACjC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEra,SAAS,CAAC,gBAAgB;QAC/G,GAAGwU,MAAM;QACTmP,KAAK,EAAEA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAGnP,MAAM,EAAEmP;MACzC,CAAC,CAAC;MACF,MAAM0T,SAAS,SAASmJ,OAAI,CAAC7K,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAErO,wBAAwB,CAAC;MACvD,IAAI,OAAO,IAAI2D,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,gCAAgC,CAAC;MAC3E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQyY,gBAAgBA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAn/B,iBAAA;MACvB,MAAM81B,SAAS,SAASqJ,OAAI,CAAC/K,WAAW,CAAC,kBAAkB,EAAE,EAAE,CAAC;MAChE,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE5J,yBAAyB,CAAC;MACxD,IAAI,OAAO,IAAId,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,8BAA8B,CAAC;MACzE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ2Y,YAAYA,CAACnZ,kBAAkB,EAAE;IAAA,IAAAoZ,OAAA;IAAA,OAAAr/B,iBAAA;MACrC,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGw2B,OAAI,CAACzJ,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAC9E,MAAM6iB,SAAS,SAASuJ,OAAI,CAACjL,WAAW,CAAC,cAAc,EAAEvrB,IAAI,CAAC;MAC9D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE1J,qBAAqB,CAAC;MACpD,IAAI,OAAO,IAAIhB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,0BAA0B,CAAC;MACrE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ6Y,gBAAgBA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAv/B,iBAAA;MACvB,MAAM81B,SAAS,SAASyJ,OAAI,CAACnL,WAAW,CAAC,kBAAkB,EAAE,EAAE,CAAC;MAChE,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEzJ,yBAAyB,CAAC;MACxD,IAAI,OAAO,IAAIjB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,8BAA8B,CAAC;MACzE;MACA,MAAMqgB,aAAa,GAAGpU,GAAG,CAAC3E,MAAM;MAChC,OAAO,IAAI7E,aAAa,CAAC4d,aAAa,CAAC3d,aAAa,EAAE2d,aAAa,CAAC1d,wBAAwB,EAAE0d,aAAa,CAACzd,MAAM,EAAEyd,aAAa,CAACxd,gBAAgB,EAAEwd,aAAa,CAACvd,eAAe,CAAC;IAAC;EACrL;;EAEA;AACF;AACA;AACA;EACQwd,iBAAiBA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAA1/B,iBAAA;MACxB,MAAM81B,SAAS,SAAS4J,OAAI,CAACtL,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC;MACjE,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAExJ,0BAA0B,CAAC;MACzD,IAAI,OAAO,IAAIlB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,+BAA+B,CAAC;MAC1E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;EACQ1H,iCAAiCA,CAACjU,UAAU,EAAEgO,UAAU,EAAE;IAAA,IAAA6mB,OAAA;IAAA,OAAA3/B,iBAAA;MAC9D,MAAM6I,IAAI,GAAG82B,OAAI,CAAC/J,UAAU,CAAC,CAAC9qB,UAAU,CAAC,EAAEgO,UAAU,CAAC;MACtD,MAAMgd,SAAS,SAAS6J,OAAI,CAACvL,WAAW,CAAC,mCAAmC,EAAEvrB,IAAI,CAAC;MACnF,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAExF,0CAA0C,CAAC;MACzE,IAAI,OAAO,IAAIlF,GAAG,EAAE;QAClBrb,OAAO,CAACC,IAAI,CAAC,oDAAoD,CAAC;QAClE,OAAO,CAAC;MACV;MACA,OAAOob,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACQmZ,4BAA4BA,CAAC9mB,UAAU,EAAE;IAAA,IAAA+mB,OAAA;IAAA,OAAA7/B,iBAAA;MAC7C,MAAM;QACJ8f,OAAO;QACPvhB,KAAK,EAAE;UACLgR;QACF;MACF,CAAC,SAASswB,OAAI,CAACC,4BAA4B,CAAChnB,UAAU,CAAC;MACvD,MAAMqB,aAAa,GAAG;QACpB,IAAIqZ,oBAAoBA,CAAA,EAAG;UACzB,MAAM,IAAIz1B,KAAK,CAAC,uFAAuF,GAAG,qFAAqF,GAAG,sBAAsB,CAAC;QAC3N,CAAC;QACDmB,MAAMA,CAAA,EAAG;UACP,OAAO,CAAC,CAAC;QACX;MACF,CAAC;MACD,OAAO;QACL4gB,OAAO;QACPvhB,KAAK,EAAE;UACLgR,SAAS;UACT4K;QACF;MACF,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;AACA;EACQ4lB,2BAA2BA,CAAC3B,KAAK,EAAE;IAAA,IAAA4B,OAAA;IAAA,OAAAhgC,iBAAA;MACvC,MAAM81B,SAAS,SAASkK,OAAI,CAAC5L,WAAW,CAAC,6BAA6B,EAAEgK,KAAK,GAAG,CAACA,KAAK,CAAC,GAAG,EAAE,CAAC;MAC7F,MAAMhT,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAExC,oCAAoC,CAAC;MACnE,IAAI,OAAO,IAAIlI,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,0CAA0C,CAAC;MACrF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQwZ,4BAA4BA,CAAC1wB,SAAS,EAAEuJ,UAAU,EAAE;IAAA,IAAAonB,OAAA;IAAA,OAAAlgC,iBAAA;MACxD,MAAM6I,IAAI,GAAGq3B,OAAI,CAACtK,UAAU,CAAC,CAACrmB,SAAS,CAAC,EAAEuJ,UAAU,CAAC;MACrD,MAAMgd,SAAS,SAASoK,OAAI,CAAC9L,WAAW,CAAC,8BAA8B,EAAEvrB,IAAI,CAAC;MAC9E,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEvC,yBAAyB,CAAC;MACxD,IAAI,OAAO,IAAInI,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,8BAA8B,CAAC;MACzE;MACA,MAAM;QACJW,OAAO;QACPvhB;MACF,CAAC,GAAG6sB,GAAG,CAAC3E,MAAM;MACd,OAAO;QACL3G,OAAO;QACPvhB,KAAK,EAAEA,KAAK,KAAK,IAAI,GAAGA,KAAK,CAAC4b,aAAa,GAAG;MAChD,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQpI,gBAAgBA,CAACxV,OAAO,EAAEuc,UAAU,EAAE;IAAA,IAAAqnB,OAAA;IAAA,OAAAngC,iBAAA;MAC1C,MAAMogC,WAAW,GAAG1jC,QAAQ,CAACH,OAAO,CAAC5C,SAAS,CAAC,CAAC,CAAC,CAACgG,QAAQ,CAAC,QAAQ,CAAC;MACpE,MAAMkJ,IAAI,GAAGs3B,OAAI,CAACvK,UAAU,CAAC,CAACwK,WAAW,CAAC,EAAEtnB,UAAU,CAAC;MACvD,MAAMgd,SAAS,SAASqK,OAAI,CAAC/L,WAAW,CAAC,kBAAkB,EAAEvrB,IAAI,CAAC;MAClE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACpsB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1E,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,+BAA+B,CAAC;MAC1E;MACA,IAAIiM,GAAG,CAAC3E,MAAM,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI1oB,KAAK,CAAC,mBAAmB,CAAC;MACtC;MACA,OAAOqtB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ4Z,2BAA2BA,CAACptB,MAAM,EAAE;IAAA,IAAAqtB,OAAA;IAAA,OAAAtgC,iBAAA;MACxC,MAAMuJ,QAAQ,GAAG0J,MAAM,EAAEstB,sBAAsB,EAAEviC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;MAC3E,MAAM6J,IAAI,GAAGU,QAAQ,EAAEzL,MAAM,GAAG,CAACyL,QAAQ,CAAC,GAAG,EAAE;MAC/C,MAAMusB,SAAS,SAASwK,OAAI,CAAClM,WAAW,CAAC,6BAA6B,EAAEvrB,IAAI,CAAC;MAC7E,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE3J,oCAAoC,CAAC;MACnE,IAAI,OAAO,IAAIf,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,0CAA0C,CAAC;MACrF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;EACA;AACF;AACA;AACA;AACA;AACA;EACQ+Z,kBAAkBA,CAAC1nB,UAAU,EAAE;IAAA,IAAA2nB,OAAA;IAAA,OAAAzgC,iBAAA;MACnC,IAAI;QACF,MAAMorB,GAAG,SAASqV,OAAI,CAACb,4BAA4B,CAAC9mB,UAAU,CAAC;QAC/D,OAAOsS,GAAG,CAAC7sB,KAAK;MAClB,CAAC,CAAC,OAAO44B,CAAC,EAAE;QACV,MAAM,IAAIp5B,KAAK,CAAC,kCAAkC,GAAGo5B,CAAC,CAAC;MACzD;IAAC;EACH;;EAEA;AACF;AACA;AACA;EACQuJ,kBAAkBA,CAACza,kBAAkB,EAAE;IAAA,IAAA0a,OAAA;IAAA,OAAA3gC,iBAAA;MAC3C,IAAI;QACF,MAAMorB,GAAG,SAASuV,OAAI,CAACb,4BAA4B,CAAC7Z,kBAAkB,CAAC;QACvE,OAAOmF,GAAG,CAAC7sB,KAAK;MAClB,CAAC,CAAC,OAAO44B,CAAC,EAAE;QACV,MAAM,IAAIp5B,KAAK,CAAC,kCAAkC,GAAGo5B,CAAC,CAAC;MACzD;IAAC;EACH;;EAEA;AACF;AACA;AACA;EACQ2I,4BAA4BA,CAAC7Z,kBAAkB,EAAE;IAAA,IAAA2a,OAAA;IAAA,OAAA5gC,iBAAA;MACrD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAG+3B,OAAI,CAAChL,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAC9E,MAAM6iB,SAAS,SAAS8K,OAAI,CAACxM,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE9C,2BAA2B,CAAC;MAC1D,IAAI,OAAO,IAAI5H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,gCAAgC,CAAC;MAC3E;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQoa,gBAAgBA,CAACtxB,SAAS,EAAE+pB,SAAS,EAAE;IAAA,IAAAwH,OAAA;IAAA,OAAA9gC,iBAAA;MAC3C,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACsT,SAAS,CAAC;MAC1C,MAAMzwB,IAAI,GAAGi4B,OAAI,CAAClL,UAAU,CAAC,CAACrmB,SAAS,CAAC,EAAEuJ,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MACvF,MAAM6iB,SAAS,SAASgL,OAAI,CAAC1M,WAAW,CAAC,kBAAkB,EAAEvrB,IAAI,CAAC;MAClE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE7C,yBAAyB,CAAC;MACxD,IAAI,OAAO,IAAI7H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,wCAAwC,GAAG5P,SAAS,GAAG,WAAW,CAAC;MAC7G;MACA,OAAO6b,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQsa,UAAUA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAhhC,iBAAA;MACjB,MAAM81B,SAAS,SAASkL,OAAI,CAAC5M,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC;MAC1D,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACgC,aAAa,CAAC,CAAC;MAC3D,IAAI,OAAO,IAAIuC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,uBAAuB,CAAC;MAClE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQwa,cAAcA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAlhC,iBAAA;MACrB,MAAM81B,SAAS,SAASoL,OAAI,CAAC9M,WAAW,CAAC,gBAAgB,EAAE,EAAE,CAAC;MAC9D,MAAMhJ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACzsB,MAAM,CAAC,CAAC,CAAC,CAAC;MACtD,IAAI,OAAO,IAAIgxB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4BAA4B,CAAC;MACvE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACE;;EAEA;AACF;AACA;AACA;EACE;;EAEA;AACF;AACA;EACE;;EAEA;;EAEA;;EAEA;AACF;AACA;EACE;EACM0a,QAAQA,CAAClhB,IAAI,EAAEqZ,SAAS,EAAE;IAAA,IAAA8H,OAAA;IAAA,OAAAphC,iBAAA;MAC9B,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACsT,SAAS,CAAC;MAC1C,MAAMzwB,IAAI,GAAGu4B,OAAI,CAACC,0BAA0B,CAAC,CAACphB,IAAI,CAAC,EAAEnH,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MAClG,MAAM6iB,SAAS,SAASsL,OAAI,CAAChN,WAAW,CAAC,UAAU,EAAEvrB,IAAI,CAAC;MAC1D,IAAI;QACF,QAAQoK,MAAM,EAAEquB,kBAAkB;UAChC,KAAK,UAAU;YACb;cACE,MAAMlW,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEtD,6BAA6B,CAAC;cAC5D,IAAI,OAAO,IAAIpH,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB;UACF,KAAK,MAAM;YACT;cACE,MAAM2E,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEvD,yBAAyB,CAAC;cACxD,IAAI,OAAO,IAAInH,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB;UACF;YACE;cACE,MAAM2E,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE3D,iBAAiB,CAAC;cAChD,IAAI,OAAO,IAAI/G,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,MAAM;gBACJsH;cACF,CAAC,GAAG2E,GAAG;cACP,OAAO3E,MAAM,GAAG;gBACd,GAAGA,MAAM;gBACTnH,YAAY,EAAEmH,MAAM,CAACnH,YAAY,CAACthB,GAAG,CAAC,CAAC;kBACrCqN,WAAW;kBACX5H,IAAI;kBACJ4F;gBACF,CAAC,MAAM;kBACL5F,IAAI;kBACJ4H,WAAW,EAAE;oBACX,GAAGA,WAAW;oBACd9O,OAAO,EAAE0qB,4BAA4B,CAAC5d,OAAO,EAAEgC,WAAW,CAAC9O,OAAO;kBACpE,CAAC;kBACD8M;gBACF,CAAC,CAAC;cACJ,CAAC,GAAG,IAAI;YACV;QACJ;MACF,CAAC,CAAC,OAAO8tB,CAAC,EAAE;QACV,MAAM,IAAIpf,kBAAkB,CAACof,CAAC,EAAE,+BAA+B,CAAC;MAClE;IAAC;EACH;;EAEA;AACF;AACA;;EAEE;;EAEA;;EAEA;EACMoK,cAAcA,CAACthB,IAAI,EAAEqZ,SAAS,EAAE;IAAA,IAAAkI,OAAA;IAAA,OAAAxhC,iBAAA;MACpC,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACsT,SAAS,CAAC;MAC1C,MAAMzwB,IAAI,GAAG24B,OAAI,CAACH,0BAA0B,CAAC,CAACphB,IAAI,CAAC,EAAEnH,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;MACtF,MAAM6iB,SAAS,SAAS0L,OAAI,CAACpN,WAAW,CAAC,UAAU,EAAEvrB,IAAI,CAAC;MAC1D,IAAI;QACF,QAAQoK,MAAM,EAAEquB,kBAAkB;UAChC,KAAK,UAAU;YACb;cACE,MAAMlW,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEpD,mCAAmC,CAAC;cAClE,IAAI,OAAO,IAAItH,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB;UACF,KAAK,MAAM;YACT;cACE,MAAM2E,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEnD,+BAA+B,CAAC;cAC9D,IAAI,OAAO,IAAIvH,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB;UACF;YACE;cACE,MAAM2E,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAErD,uBAAuB,CAAC;cACtD,IAAI,OAAO,IAAIrH,GAAG,EAAE;gBAClB,MAAMA,GAAG,CAACjM,KAAK;cACjB;cACA,OAAOiM,GAAG,CAAC3E,MAAM;YACnB;QACJ;MACF,CAAC,CAAC,OAAO0Q,CAAC,EAAE;QACV,MAAM,IAAIpf,kBAAkB,CAACof,CAAC,EAAE,qBAAqB,CAAC;MACxD;IAAC;EACH;EACA;AACF;AACA;EACQsK,kBAAkBA,CAAC1H,kBAAkB,EAAE;IAAA,IAAA2H,OAAA;IAAA,OAAA1hC,iBAAA;MAC3C,IAAI2hC,KAAK;MACT,IAAI7oB,UAAU;MACd,IAAI,OAAOihB,kBAAkB,KAAK,QAAQ,EAAE;QAC1CjhB,UAAU,GAAGihB,kBAAkB;MACjC,CAAC,MAAM,IAAIA,kBAAkB,EAAE;QAC7B,MAAM;UACJjhB,UAAU,EAAE8oB,CAAC;UACb,GAAGzc;QACL,CAAC,GAAG4U,kBAAkB;QACtBjhB,UAAU,GAAG8oB,CAAC;QACdD,KAAK,GAAGxc,IAAI;MACd;MACA,MAAMtc,IAAI,GAAG64B,OAAI,CAAC9L,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAE,QAAQ,EAAE6oB,KAAK,CAAC;MAC7D,MAAM7L,SAAS,SAAS4L,OAAI,CAACtN,WAAW,CAAC,oBAAoB,EAAEvrB,IAAI,CAAC;MACpE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAExM,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAI8B,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4CAA4C,CAAC;MACvF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;EACE;;EAEA;AACF;AACA;EACE;EACMhQ,cAAcA,CAAC3U,SAAS,EAAEw3B,SAAS,EAAE;IAAA,IAAAuI,OAAA;IAAA,OAAA7hC,iBAAA;MACzC,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACsT,SAAS,CAAC;MAC1C,MAAMzwB,IAAI,GAAGg5B,OAAI,CAACR,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;MACvG,MAAM6iB,SAAS,SAAS+L,OAAI,CAACzN,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEhD,uBAAuB,CAAC;MACtD,IAAI,OAAO,IAAI1H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2BAA2B,CAAC;MACtE;MACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACzB,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;MAC1B,OAAO;QACL,GAAGA,MAAM;QACTpb,WAAW,EAAE;UACX,GAAGob,MAAM,CAACpb,WAAW;UACrB9O,OAAO,EAAE0qB,4BAA4B,CAACR,MAAM,CAACpd,OAAO,EAAEod,MAAM,CAACpb,WAAW,CAAC9O,OAAO;QAClF;MACF,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQulC,oBAAoBA,CAAChgC,SAAS,EAAEmkB,kBAAkB,EAAE;IAAA,IAAA8b,OAAA;IAAA,OAAA/hC,iBAAA;MACxD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAMpd,IAAI,GAAGk5B,OAAI,CAACV,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;MAC3F,MAAM6iB,SAAS,SAASiM,OAAI,CAAC3N,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/C,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAI3H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2BAA2B,CAAC;MACtE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQub,qBAAqBA,CAACnzB,UAAU,EAAEoX,kBAAkB,EAAE;IAAA,IAAAgc,OAAA;IAAA,OAAAjiC,iBAAA;MAC1D,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAM8F,KAAK,GAAGld,UAAU,CAAC7Q,GAAG,CAAC8D,SAAS,IAAI;QACxC,MAAM+G,IAAI,GAAGo5B,OAAI,CAACZ,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAE,YAAY,EAAE7F,MAAM,CAAC;QAC3F,OAAO;UACL+Y,UAAU,EAAE,gBAAgB;UAC5BnjB;QACF,CAAC;MACH,CAAC,CAAC;MACF,MAAMitB,SAAS,SAASmM,OAAI,CAAC5N,gBAAgB,CAACtI,KAAK,CAAC;MACpD,MAAMX,GAAG,GAAG0K,SAAS,CAAC93B,GAAG,CAAC83B,SAAS,IAAI;QACrC,MAAM1K,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/C,6BAA6B,CAAC;QAC5D,IAAI,OAAO,IAAI3H,GAAG,EAAE;UAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4BAA4B,CAAC;QACvE;QACA,OAAOiM,GAAG,CAAC3E,MAAM;MACnB,CAAC,CAAC;MACF,OAAO2E,GAAG;IAAC;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE;;EAEA;AACF;AACA;AACA;AACA;EACE;EACM8W,eAAeA,CAACrzB,UAAU,EAAEoX,kBAAkB,EAAE;IAAA,IAAAkc,OAAA;IAAA,OAAAniC,iBAAA;MACpD,MAAM;QACJ8Y,UAAU;QACV7F;MACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;MACnD,MAAM8F,KAAK,GAAGld,UAAU,CAAC7Q,GAAG,CAAC8D,SAAS,IAAI;QACxC,MAAM+G,IAAI,GAAGs5B,OAAI,CAACd,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAEra,SAAS,CAAC,gBAAgBwU,MAAM,CAAC;QACvG,OAAO;UACL+Y,UAAU,EAAE,gBAAgB;UAC5BnjB;QACF,CAAC;MACH,CAAC,CAAC;MACF,MAAMitB,SAAS,SAASqM,OAAI,CAAC9N,gBAAgB,CAACtI,KAAK,CAAC;MACpD,MAAMX,GAAG,GAAG0K,SAAS,CAAC93B,GAAG,CAAC83B,SAAS,IAAI;QACrC,MAAM1K,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEhD,uBAAuB,CAAC;QACtD,IAAI,OAAO,IAAI1H,GAAG,EAAE;UAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,4BAA4B,CAAC;QACvE;QACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;QACzB,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;QAC1B,OAAO;UACL,GAAGA,MAAM;UACTpb,WAAW,EAAE;YACX,GAAGob,MAAM,CAACpb,WAAW;YACrB9O,OAAO,EAAE0qB,4BAA4B,CAACR,MAAM,CAACpd,OAAO,EAAEod,MAAM,CAACpb,WAAW,CAAC9O,OAAO;UAClF;QACF,CAAC;MACH,CAAC,CAAC;MACF,OAAO6uB,GAAG;IAAC;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACQgX,iBAAiBA,CAACniB,IAAI,EAAEnH,UAAU,EAAE;IAAA,IAAAupB,OAAA;IAAA,OAAAriC,iBAAA;MACxC,MAAM6I,IAAI,GAAGw5B,OAAI,CAAChB,0BAA0B,CAAC,CAACphB,IAAI,CAAC,EAAEnH,UAAU,CAAC;MAChE,MAAMgd,SAAS,SAASuM,OAAI,CAACjO,WAAW,CAAC,UAAU,EAAEvrB,IAAI,CAAC;MAC1D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAElD,0BAA0B,CAAC;MACzD,IAAI,OAAO,IAAIxH,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,+BAA+B,CAAC;MAC1E;MACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACzB,IAAI,CAACA,MAAM,EAAE;QACX,MAAM,IAAI1oB,KAAK,CAAC,kBAAkB,GAAGkiB,IAAI,GAAG,YAAY,CAAC;MAC3D;MACA,MAAMqiB,KAAK,GAAG;QACZ,GAAG7b,MAAM;QACTnH,YAAY,EAAEmH,MAAM,CAACnH,YAAY,CAACthB,GAAG,CAAC,CAAC;UACrCqN,WAAW;UACX5H;QACF,CAAC,KAAK;UACJ,MAAMlH,OAAO,GAAG,IAAIyM,OAAO,CAACqC,WAAW,CAAC9O,OAAO,CAAC;UAChD,OAAO;YACLkH,IAAI;YACJ4H,WAAW,EAAE;cACX,GAAGA,WAAW;cACd9O;YACF;UACF,CAAC;QACH,CAAC;MACH,CAAC;MACD,OAAO;QACL,GAAG+lC,KAAK;QACRhjB,YAAY,EAAEgjB,KAAK,CAAChjB,YAAY,CAACthB,GAAG,CAAC,CAAC;UACpCqN,WAAW;UACX5H;QACF,CAAC,KAAK;UACJ,OAAO;YACLA,IAAI;YACJ4H,WAAW,EAAEuD,WAAW,CAAC+E,QAAQ,CAACtI,WAAW,CAAC9O,OAAO,EAAE8O,WAAW,CAACwD,UAAU;UAC/E,CAAC;QACH,CAAC;MACH,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQ0zB,SAASA,CAACpE,SAAS,EAAEqE,OAAO,EAAE1pB,UAAU,EAAE;IAAA,IAAA2pB,OAAA;IAAA,OAAAziC,iBAAA;MAC9C,MAAM6I,IAAI,GAAG45B,OAAI,CAACpB,0BAA0B,CAACmB,OAAO,KAAK/jC,SAAS,GAAG,CAAC0/B,SAAS,EAAEqE,OAAO,CAAC,GAAG,CAACrE,SAAS,CAAC,EAAErlB,UAAU,CAAC;MACpH,MAAMgd,SAAS,SAAS2M,OAAI,CAACrO,WAAW,CAAC,WAAW,EAAEvrB,IAAI,CAAC;MAC3D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjP,aAAa,CAACnsB,KAAK,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7D,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,sBAAsB,CAAC;MACjE;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQic,kBAAkBA,CAACziB,IAAI,EAAEnH,UAAU,EAAE;IAAA,IAAA6pB,OAAA;IAAA,OAAA3iC,iBAAA;MACzC,MAAM6I,IAAI,GAAG85B,OAAI,CAACtB,0BAA0B,CAAC,CAACphB,IAAI,CAAC,EAAEnH,UAAU,EAAEra,SAAS,EAAE;QAC1E6iC,kBAAkB,EAAE,YAAY;QAChChP,OAAO,EAAE;MACX,CAAC,CAAC;MACF,MAAMwD,SAAS,SAAS6M,OAAI,CAACvO,WAAW,CAAC,UAAU,EAAEvrB,IAAI,CAAC;MAC1D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjD,2BAA2B,CAAC;MAC1D,IAAI,OAAO,IAAIzH,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,qBAAqB,CAAC;MAChE;MACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACzB,IAAI,CAACA,MAAM,EAAE;QACX,MAAM,IAAI1oB,KAAK,CAAC,QAAQ,GAAGkiB,IAAI,GAAG,YAAY,CAAC;MACjD;MACA,OAAOwG,MAAM;IAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACQmc,2BAA2BA,CAAC3iB,IAAI,EAAEnH,UAAU,EAAE;IAAA,IAAA+pB,OAAA;IAAA,OAAA7iC,iBAAA;MAClD,MAAM6I,IAAI,GAAGg6B,OAAI,CAACxB,0BAA0B,CAAC,CAACphB,IAAI,CAAC,EAAEnH,UAAU,EAAEra,SAAS,EAAE;QAC1E6iC,kBAAkB,EAAE,YAAY;QAChChP,OAAO,EAAE;MACX,CAAC,CAAC;MACF,MAAMwD,SAAS,SAAS+M,OAAI,CAACzO,WAAW,CAAC,UAAU,EAAEvrB,IAAI,CAAC;MAC1D,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjD,2BAA2B,CAAC;MAC1D,IAAI,OAAO,IAAIzH,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,+BAA+B,CAAC;MAC1E;MACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACzB,IAAI,CAACA,MAAM,EAAE;QACX,MAAM,IAAI1oB,KAAK,CAAC,kBAAkB,GAAGkiB,IAAI,GAAG,YAAY,CAAC;MAC3D;MACA,OAAOwG,MAAM;IAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACQqc,uBAAuBA,CAAChhC,SAAS,EAAEgX,UAAU,EAAE;IAAA,IAAAiqB,OAAA;IAAA,OAAA/iC,iBAAA;MACnD,MAAM6I,IAAI,GAAGk6B,OAAI,CAAC1B,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,CAAC;MACrE,MAAMgd,SAAS,SAASiN,OAAI,CAAC3O,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEhD,uBAAuB,CAAC;MACtD,IAAI,OAAO,IAAI1H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,2BAA2B,CAAC;MACtE;MACA,MAAMsH,MAAM,GAAG2E,GAAG,CAAC3E,MAAM;MACzB,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;MAC1B,MAAMlqB,OAAO,GAAG,IAAIyM,OAAO,CAACyd,MAAM,CAACpb,WAAW,CAAC9O,OAAO,CAAC;MACvD,MAAMsS,UAAU,GAAG4X,MAAM,CAACpb,WAAW,CAACwD,UAAU;MAChD,OAAO;QACL,GAAG4X,MAAM;QACTpb,WAAW,EAAEuD,WAAW,CAAC+E,QAAQ,CAACpX,OAAO,EAAEsS,UAAU;MACvD,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACQm0B,6BAA6BA,CAAClhC,SAAS,EAAEgX,UAAU,EAAE;IAAA,IAAAmqB,OAAA;IAAA,OAAAjjC,iBAAA;MACzD,MAAM6I,IAAI,GAAGo6B,OAAI,CAAC5B,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAE,YAAY,CAAC;MACnF,MAAMgd,SAAS,SAASmN,OAAI,CAAC7O,WAAW,CAAC,gBAAgB,EAAEvrB,IAAI,CAAC;MAChE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/C,6BAA6B,CAAC;MAC5D,IAAI,OAAO,IAAI3H,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,qCAAqC,CAAC;MAChF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACQyc,8BAA8BA,CAACr0B,UAAU,EAAEiK,UAAU,EAAE;IAAA,IAAAqqB,OAAA;IAAA,OAAAnjC,iBAAA;MAC3D,MAAM+rB,KAAK,GAAGld,UAAU,CAAC7Q,GAAG,CAAC8D,SAAS,IAAI;QACxC,MAAM+G,IAAI,GAAGs6B,OAAI,CAAC9B,0BAA0B,CAAC,CAACv/B,SAAS,CAAC,EAAEgX,UAAU,EAAE,YAAY,CAAC;QACnF,OAAO;UACLkT,UAAU,EAAE,gBAAgB;UAC5BnjB;QACF,CAAC;MACH,CAAC,CAAC;MACF,MAAMitB,SAAS,SAASqN,OAAI,CAAC9O,gBAAgB,CAACtI,KAAK,CAAC;MACpD,MAAMX,GAAG,GAAG0K,SAAS,CAAC93B,GAAG,CAAC83B,SAAS,IAAI;QACrC,MAAM1K,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/C,6BAA6B,CAAC;QAC5D,IAAI,OAAO,IAAI3H,GAAG,EAAE;UAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,sCAAsC,CAAC;QACjF;QACA,OAAOiM,GAAG,CAAC3E,MAAM;MACnB,CAAC,CAAC;MACF,OAAO2E,GAAG;IAAC;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQgY,gCAAgCA,CAACziC,OAAO,EAAEw9B,SAAS,EAAEqE,OAAO,EAAE;IAAA,IAAAa,OAAA;IAAA,OAAArjC,iBAAA;MAClE,IAAIyQ,OAAO,GAAG,CAAC,CAAC;MAChB,IAAI6yB,mBAAmB,SAASD,OAAI,CAAC7L,sBAAsB,CAAC,CAAC;MAC7D,OAAO,EAAE,OAAO,IAAI/mB,OAAO,CAAC,EAAE;QAC5B0tB,SAAS,EAAE;QACX,IAAIA,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAGmF,mBAAmB,EAAE;UACrD;QACF;QACA,IAAI;UACF,MAAMhB,KAAK,SAASe,OAAI,CAACT,2BAA2B,CAACzE,SAAS,EAAE,WAAW,CAAC;UAC5E,IAAImE,KAAK,CAACzzB,UAAU,CAAC/Q,MAAM,GAAG,CAAC,EAAE;YAC/B2S,OAAO,CAAC8yB,KAAK,GAAGjB,KAAK,CAACzzB,UAAU,CAACyzB,KAAK,CAACzzB,UAAU,CAAC/Q,MAAM,GAAG,CAAC,CAAC,CAAC6B,QAAQ,CAAC,CAAC;UAC1E;QACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;UACZ,IAAIA,GAAG,YAAY9C,KAAK,IAAI8C,GAAG,CAACtE,OAAO,CAAC2T,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC3D;UACF,CAAC,MAAM;YACL,MAAMrP,GAAG;UACX;QACF;MACF;MACA,IAAI2iC,oBAAoB,SAASH,OAAI,CAACrjB,OAAO,CAAC,WAAW,CAAC;MAC1D,OAAO,EAAE,QAAQ,IAAIvP,OAAO,CAAC,EAAE;QAC7B+xB,OAAO,EAAE;QACT,IAAIA,OAAO,GAAGgB,oBAAoB,EAAE;UAClC;QACF;QACA,IAAI;UACF,MAAMlB,KAAK,SAASe,OAAI,CAACT,2BAA2B,CAACJ,OAAO,CAAC;UAC7D,IAAIF,KAAK,CAACzzB,UAAU,CAAC/Q,MAAM,GAAG,CAAC,EAAE;YAC/B2S,OAAO,CAACgzB,MAAM,GAAGnB,KAAK,CAACzzB,UAAU,CAACyzB,KAAK,CAACzzB,UAAU,CAAC/Q,MAAM,GAAG,CAAC,CAAC,CAAC6B,QAAQ,CAAC,CAAC;UAC3E;QACF,CAAC,CAAC,OAAOkB,GAAG,EAAE;UACZ,IAAIA,GAAG,YAAY9C,KAAK,IAAI8C,GAAG,CAACtE,OAAO,CAAC2T,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC3D;UACF,CAAC,MAAM;YACL,MAAMrP,GAAG;UACX;QACF;MACF;MACA,MAAM6iC,sBAAsB,SAASL,OAAI,CAACM,iCAAiC,CAAChjC,OAAO,EAAE8P,OAAO,CAAC;MAC7F,OAAOizB,sBAAsB,CAAC1lC,GAAG,CAACosB,IAAI,IAAIA,IAAI,CAACtoB,SAAS,CAAC;IAAC;EAC5D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACQ6hC,iCAAiCA,CAAChjC,OAAO,EAAE8P,OAAO,EAAEqI,UAAU,EAAE;IAAA,IAAA8qB,OAAA;IAAA,OAAA5jC,iBAAA;MACpE,MAAM6I,IAAI,GAAG+6B,OAAI,CAACvC,0BAA0B,CAAC,CAAC1gC,OAAO,CAAC3B,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEra,SAAS,EAAEgS,OAAO,CAAC;MAClG,MAAMqlB,SAAS,SAAS8N,OAAI,CAACxP,WAAW,CAAC,mCAAmC,EAAEvrB,IAAI,CAAC;MACnF,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEjI,0CAA0C,CAAC;MACzE,IAAI,OAAO,IAAIzC,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,gDAAgD,CAAC;MAC3F;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACQod,uBAAuBA,CAACljC,OAAO,EAAE8P,OAAO,EAAEqI,UAAU,EAAE;IAAA,IAAAgrB,OAAA;IAAA,OAAA9jC,iBAAA;MAC1D,MAAM6I,IAAI,GAAGi7B,OAAI,CAACzC,0BAA0B,CAAC,CAAC1gC,OAAO,CAAC3B,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,EAAEra,SAAS,EAAEgS,OAAO,CAAC;MAClG,MAAMqlB,SAAS,SAASgO,OAAI,CAAC1P,WAAW,CAAC,yBAAyB,EAAEvrB,IAAI,CAAC;MACzE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE9H,gCAAgC,CAAC;MAC/D,IAAI,OAAO,IAAI5C,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,sCAAsC,CAAC;MACjF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;EACMsd,qBAAqBA,CAAC/7B,UAAU,EAAEiL,MAAM,EAAE;IAAA,IAAA+wB,OAAA;IAAA,OAAAhkC,iBAAA;MAC9C,MAAM;QACJ8f,OAAO;QACPvhB,KAAK,EAAE0lC;MACT,CAAC,SAASD,OAAI,CAACjL,wBAAwB,CAAC/wB,UAAU,EAAEiL,MAAM,CAAC;MAC3D,IAAI1U,KAAK,GAAG,IAAI;MAChB,IAAI0lC,WAAW,KAAK,IAAI,EAAE;QACxB1lC,KAAK,GAAG,IAAIylB,yBAAyB,CAAC;UACpC/lB,GAAG,EAAE+J,UAAU;UACfJ,KAAK,EAAEoc,yBAAyB,CAACpqB,WAAW,CAACqqC,WAAW,CAACxmC,IAAI;QAC/D,CAAC,CAAC;MACJ;MACA,OAAO;QACLqiB,OAAO;QACPvhB;MACF,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQ0+B,kBAAkBA,CAAC5iB,YAAY,EAAE4L,kBAAkB,EAAE;IAAA,IAAAie,OAAA;IAAA,OAAAlkC,iBAAA;MACzD,MAAM;QACJ8f,OAAO;QACPvhB,KAAK,EAAE0lC;MACT,CAAC,SAASC,OAAI,CAACnL,wBAAwB,CAAC1e,YAAY,EAAE4L,kBAAkB,CAAC;MACzE,IAAI1nB,KAAK,GAAG,IAAI;MAChB,IAAI0lC,WAAW,KAAK,IAAI,EAAE;QACxB1lC,KAAK,GAAG0b,YAAY,CAACG,eAAe,CAAC6pB,WAAW,CAACxmC,IAAI,CAAC;MACxD;MACA,OAAO;QACLqiB,OAAO;QACPvhB;MACF,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;EACQ4lC,QAAQA,CAAC9pB,YAAY,EAAE4L,kBAAkB,EAAE;IAAA,IAAAme,OAAA;IAAA,OAAApkC,iBAAA;MAC/C,aAAaokC,OAAI,CAACnH,kBAAkB,CAAC5iB,YAAY,EAAE4L,kBAAkB,CAAC,CAACvP,IAAI,CAACpG,CAAC,IAAIA,CAAC,CAAC/R,KAAK,CAAC,CAACsY,KAAK,CAACsgB,CAAC,IAAI;QACnG,MAAM,IAAIp5B,KAAK,CAAC,kCAAkC,GAAGsc,YAAY,CAACrb,QAAQ,CAAC,CAAC,GAAG,IAAI,GAAGm4B,CAAC,CAAC;MAC1F,CAAC,CAAC;IAAC;EACL;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQkN,cAAcA,CAACC,EAAE,EAAElpB,QAAQ,EAAE;IAAA,IAAAmpB,OAAA;IAAA,OAAAvkC,iBAAA;MACjC,MAAM81B,SAAS,SAASyO,OAAI,CAACnQ,WAAW,CAAC,gBAAgB,EAAE,CAACkQ,EAAE,CAACtlC,QAAQ,CAAC,CAAC,EAAEoc,QAAQ,CAAC,CAAC;MACrF,MAAMgQ,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAErC,uBAAuB,CAAC;MACtD,IAAI,OAAO,IAAIrI,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,cAAcmlB,EAAE,CAACtlC,QAAQ,CAAC,CAAC,SAAS,CAAC;MAC/E;MACA,OAAOosB,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACQ+d,+BAA+BA,CAACC,YAAY,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAA1kC,iBAAA;MAClD,IAAI,CAACykC,YAAY,EAAE;QACjB;QACA,OAAOC,OAAI,CAAC9P,iBAAiB,EAAE;UAC7B,MAAMtb,KAAK,CAAC,GAAG,CAAC;QAClB;QACA,MAAMqrB,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,OAAI,CAAC7P,cAAc,CAACE,SAAS;QACjE,MAAM+P,OAAO,GAAGH,cAAc,IAAI/e,0BAA0B;QAC5D,IAAI8e,OAAI,CAAC7P,cAAc,CAACC,eAAe,KAAK,IAAI,IAAI,CAACgQ,OAAO,EAAE;UAC5D,OAAOJ,OAAI,CAAC7P,cAAc,CAACC,eAAe;QAC5C;MACF;MACA,aAAa4P,OAAI,CAACK,iBAAiB,CAAC,CAAC;IAAC;EACxC;;EAEA;AACF;AACA;EACQA,iBAAiBA,CAAA,EAAG;IAAA,IAAAC,OAAA;IAAA,OAAAhlC,iBAAA;MACxBglC,OAAI,CAACpQ,iBAAiB,GAAG,IAAI;MAC7B,IAAI;QACF,MAAMqQ,SAAS,GAAGL,IAAI,CAACC,GAAG,CAAC,CAAC;QAC5B,MAAMK,qBAAqB,GAAGF,OAAI,CAACnQ,cAAc,CAACC,eAAe;QACjE,MAAMqQ,eAAe,GAAGD,qBAAqB,GAAGA,qBAAqB,CAAC31B,SAAS,GAAG,IAAI;QACtF,KAAK,IAAI/D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;UAC3B,MAAMspB,eAAe,SAASkQ,OAAI,CAACtE,kBAAkB,CAAC,WAAW,CAAC;UAClE,IAAIyE,eAAe,KAAKrQ,eAAe,CAACvlB,SAAS,EAAE;YACjDy1B,OAAI,CAACnQ,cAAc,GAAG;cACpBC,eAAe;cACfC,SAAS,EAAE6P,IAAI,CAACC,GAAG,CAAC,CAAC;cACrB7P,qBAAqB,EAAE,EAAE;cACzBC,mBAAmB,EAAE;YACvB,CAAC;YACD,OAAOH,eAAe;UACxB;;UAEA;UACA,MAAMxb,KAAK,CAACtE,WAAW,GAAG,CAAC,CAAC;QAC9B;QACA,MAAM,IAAIjX,KAAK,CAAC,0CAA0C6mC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGI,SAAS,IAAI,CAAC;MACvF,CAAC,SAAS;QACRD,OAAI,CAACpQ,iBAAiB,GAAG,KAAK;MAChC;IAAC;EACH;;EAEA;AACF;AACA;EACQwQ,yBAAyBA,CAACnyB,MAAM,EAAE;IAAA,IAAAoyB,OAAA;IAAA,OAAArlC,iBAAA;MACtC,MAAM;QACJ8Y,UAAU;QACV7F,MAAM,EAAE2kB;MACV,CAAC,GAAG5R,2BAA2B,CAAC/S,MAAM,CAAC;MACvC,MAAMpK,IAAI,GAAGw8B,OAAI,CAACzP,UAAU,CAAC,EAAE,EAAE9c,UAAU,EAAE,QAAQ,EAAE8e,SAAS,CAAC;MACjE,MAAM9B,SAAS,SAASuP,OAAI,CAACjR,WAAW,CAAC,2BAA2B,EAAEvrB,IAAI,CAAC;MAC3E,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE/O,uBAAuB,CAACtsB,MAAM,CAAC,CAAC,CAAC,CAAC;MAChE,IAAI,OAAO,IAAI2wB,GAAG,EAAE;QAClB,MAAM,IAAIrT,kBAAkB,CAACqT,GAAG,CAACjM,KAAK,EAAE,wCAAwC,CAAC;MACnF;MACA,OAAOiM,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;EACE;;EAEA;AACF;AACA;EACE;EACM6e,mBAAmBA,CAACC,oBAAoB,EAAEC,eAAe,EAAEC,eAAe,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAA1lC,iBAAA;MAChF,IAAI,SAAS,IAAIulC,oBAAoB,EAAE;QACrC,MAAMI,WAAW,GAAGJ,oBAAoB;QACxC,MAAM9xB,eAAe,GAAGkyB,WAAW,CAAChsC,SAAS,CAAC,CAAC;QAC/C,MAAMisC,kBAAkB,GAAGtsC,MAAM,CAACuD,IAAI,CAAC4W,eAAe,CAAC,CAAC9T,QAAQ,CAAC,QAAQ,CAAC;QAC1E,IAAIsF,KAAK,CAACC,OAAO,CAACsgC,eAAe,CAAC,IAAIC,eAAe,KAAKhnC,SAAS,EAAE;UACnE,MAAM,IAAIV,KAAK,CAAC,mBAAmB,CAAC;QACtC;QACA,MAAMkV,MAAM,GAAGuyB,eAAe,IAAI,CAAC,CAAC;QACpCvyB,MAAM,CAACsT,QAAQ,GAAG,QAAQ;QAC1B,IAAI,EAAE,YAAY,IAAItT,MAAM,CAAC,EAAE;UAC7BA,MAAM,CAAC6F,UAAU,GAAG4sB,OAAI,CAAC5sB,UAAU;QACrC;QACA,IAAI0sB,eAAe,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAI,mBAAmB,IAAIA,eAAe,EAAE;UACpGvyB,MAAM,CAACoW,iBAAiB,GAAGmc,eAAe,CAACnc,iBAAiB;QAC9D;QACA,MAAMxgB,IAAI,GAAG,CAAC+8B,kBAAkB,EAAE3yB,MAAM,CAAC;QACzC,MAAM6iB,SAAS,SAAS4P,OAAI,CAACtR,WAAW,CAAC,qBAAqB,EAAEvrB,IAAI,CAAC;QACrE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE7M,kCAAkC,CAAC;QACjE,IAAI,OAAO,IAAImC,GAAG,EAAE;UAClB,MAAM,IAAIrtB,KAAK,CAAC,kCAAkC,GAAGqtB,GAAG,CAACjM,KAAK,CAAC5iB,OAAO,CAAC;QACzE;QACA,OAAO6uB,GAAG,CAAC3E,MAAM;MACnB;MACA,IAAIpb,WAAW;MACf,IAAIk6B,oBAAoB,YAAY32B,WAAW,EAAE;QAC/C,IAAIi3B,UAAU,GAAGN,oBAAoB;QACrCl6B,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;QAC/BvD,WAAW,CAACyD,QAAQ,GAAG+2B,UAAU,CAAC/2B,QAAQ;QAC1CzD,WAAW,CAACpI,YAAY,GAAGsiC,oBAAoB,CAACtiC,YAAY;QAC5DoI,WAAW,CAAC2D,SAAS,GAAG62B,UAAU,CAAC72B,SAAS;QAC5C3D,WAAW,CAACwD,UAAU,GAAGg3B,UAAU,CAACh3B,UAAU;MAChD,CAAC,MAAM;QACLxD,WAAW,GAAGuD,WAAW,CAAC+E,QAAQ,CAAC4xB,oBAAoB,CAAC;QACxD;QACAl6B,WAAW,CAAC6D,QAAQ,GAAG7D,WAAW,CAAC8D,KAAK,GAAG1Q,SAAS;MACtD;MACA,IAAI+mC,eAAe,KAAK/mC,SAAS,IAAI,CAACwG,KAAK,CAACC,OAAO,CAACsgC,eAAe,CAAC,EAAE;QACpE,MAAM,IAAIznC,KAAK,CAAC,mBAAmB,CAAC;MACtC;MACA,MAAM0R,OAAO,GAAG+1B,eAAe;MAC/B,IAAIn6B,WAAW,CAAC2D,SAAS,IAAIS,OAAO,EAAE;QACpCpE,WAAW,CAAC/O,IAAI,CAAC,GAAGmT,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL,IAAIg1B,YAAY,GAAGiB,OAAI,CAAC/Q,wBAAwB;QAChD,SAAS;UACP,MAAMG,eAAe,SAAS4Q,OAAI,CAAClB,+BAA+B,CAACC,YAAY,CAAC;UAChFp5B,WAAW,CAAC0D,oBAAoB,GAAG+lB,eAAe,CAAC/lB,oBAAoB;UACvE1D,WAAW,CAACnC,eAAe,GAAG4rB,eAAe,CAACvlB,SAAS;UACvD,IAAI,CAACE,OAAO,EAAE;UACdpE,WAAW,CAAC/O,IAAI,CAAC,GAAGmT,OAAO,CAAC;UAC5B,IAAI,CAACpE,WAAW,CAACvJ,SAAS,EAAE;YAC1B,MAAM,IAAI/D,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;UACjC;UACA,MAAM+D,SAAS,GAAGuJ,WAAW,CAACvJ,SAAS,CAACnC,QAAQ,CAAC,QAAQ,CAAC;UAC1D,IAAI,CAAC+lC,OAAI,CAAC7Q,cAAc,CAACI,mBAAmB,CAAC/kB,QAAQ,CAACpO,SAAS,CAAC,IAAI,CAAC4jC,OAAI,CAAC7Q,cAAc,CAACG,qBAAqB,CAAC9kB,QAAQ,CAACpO,SAAS,CAAC,EAAE;YAClI;YACA;YACA4jC,OAAI,CAAC7Q,cAAc,CAACI,mBAAmB,CAACxyB,IAAI,CAACX,SAAS,CAAC;YACvD;UACF,CAAC,MAAM;YACL;YACA;YACA;YACA;YACA2iC,YAAY,GAAG,IAAI;UACrB;QACF;MACF;MACA,MAAMloC,OAAO,GAAG8O,WAAW,CAACkG,QAAQ,CAAC,CAAC;MACtC,MAAMjG,QAAQ,GAAG/O,OAAO,CAAC5C,SAAS,CAAC,CAAC;MACpC,MAAM8Z,eAAe,GAAGpI,WAAW,CAACiI,UAAU,CAAChI,QAAQ,CAAC;MACxD,MAAMs6B,kBAAkB,GAAGnyB,eAAe,CAAC9T,QAAQ,CAAC,QAAQ,CAAC;MAC7D,MAAMsT,MAAM,GAAG;QACbsT,QAAQ,EAAE,QAAQ;QAClBzN,UAAU,EAAE4sB,OAAI,CAAC5sB;MACnB,CAAC;MACD,IAAI2sB,eAAe,EAAE;QACnB,MAAM59B,SAAS,GAAG,CAAC5C,KAAK,CAACC,OAAO,CAACugC,eAAe,CAAC,GAAGA,eAAe,GAAGlpC,OAAO,CAACgO,aAAa,CAAC,CAAC,EAAEvM,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;QACzHiU,MAAM,CAAC,UAAU,CAAC,GAAG;UACnBsT,QAAQ,EAAE,QAAQ;UAClB1e;QACF,CAAC;MACH;MACA,IAAI4H,OAAO,EAAE;QACXwD,MAAM,CAAC6yB,SAAS,GAAG,IAAI;MACzB;MACA,IAAIN,eAAe,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAI,mBAAmB,IAAIA,eAAe,EAAE;QACpGvyB,MAAM,CAACoW,iBAAiB,GAAGmc,eAAe,CAACnc,iBAAiB;MAC9D;MACA,MAAMxgB,IAAI,GAAG,CAAC+8B,kBAAkB,EAAE3yB,MAAM,CAAC;MACzC,MAAM6iB,SAAS,SAAS4P,OAAI,CAACtR,WAAW,CAAC,qBAAqB,EAAEvrB,IAAI,CAAC;MACrE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAE7M,kCAAkC,CAAC;MACjE,IAAI,OAAO,IAAImC,GAAG,EAAE;QAClB,IAAIvV,IAAI;QACR,IAAI,MAAM,IAAIuV,GAAG,CAACjM,KAAK,EAAE;UACvBtJ,IAAI,GAAGuV,GAAG,CAACjM,KAAK,CAAC1hB,IAAI,CAACoY,IAAI;UAC1B,IAAIA,IAAI,IAAI5Q,KAAK,CAACC,OAAO,CAAC2Q,IAAI,CAAC,EAAE;YAC/B,MAAMkwB,WAAW,GAAG,QAAQ;YAC5B,MAAMC,QAAQ,GAAGD,WAAW,GAAGlwB,IAAI,CAACxC,IAAI,CAAC0yB,WAAW,CAAC;YACrDh2B,OAAO,CAACoP,KAAK,CAACiM,GAAG,CAACjM,KAAK,CAAC5iB,OAAO,EAAEypC,QAAQ,CAAC;UAC5C;QACF;QACA,MAAM,IAAItwB,oBAAoB,CAAC;UAC7BC,MAAM,EAAE,UAAU;UAClB7T,SAAS,EAAE,EAAE;UACb8T,kBAAkB,EAAEwV,GAAG,CAACjM,KAAK,CAAC5iB,OAAO;UACrCsZ,IAAI,EAAEA;QACR,CAAC,CAAC;MACJ;MACA,OAAOuV,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;EACE;;EAEA;AACF;AACA;EACE;EACMzN,eAAeA,CAAC3N,WAAW,EAAE46B,gBAAgB,EAAEx1B,OAAO,EAAE;IAAA,IAAAy1B,OAAA;IAAA,OAAAlmC,iBAAA;MAC5D,IAAI,SAAS,IAAIqL,WAAW,EAAE;QAC5B,IAAI46B,gBAAgB,IAAIhhC,KAAK,CAACC,OAAO,CAAC+gC,gBAAgB,CAAC,EAAE;UACvD,MAAM,IAAIloC,KAAK,CAAC,mBAAmB,CAAC;QACtC;QACA,MAAM0V,eAAe,GAAGpI,WAAW,CAAC1R,SAAS,CAAC,CAAC;QAC/C,aAAausC,OAAI,CAACC,kBAAkB,CAAC1yB,eAAe,EAAEwyB,gBAAgB,CAAC;MACzE;MACA,IAAIA,gBAAgB,KAAKxnC,SAAS,IAAI,CAACwG,KAAK,CAACC,OAAO,CAAC+gC,gBAAgB,CAAC,EAAE;QACtE,MAAM,IAAIloC,KAAK,CAAC,mBAAmB,CAAC;MACtC;MACA,MAAM0R,OAAO,GAAGw2B,gBAAgB;MAChC,IAAI56B,WAAW,CAAC2D,SAAS,EAAE;QACzB3D,WAAW,CAAC/O,IAAI,CAAC,GAAGmT,OAAO,CAAC;MAC9B,CAAC,MAAM;QACL,IAAIg1B,YAAY,GAAGyB,OAAI,CAACvR,wBAAwB;QAChD,SAAS;UACP,MAAMG,eAAe,SAASoR,OAAI,CAAC1B,+BAA+B,CAACC,YAAY,CAAC;UAChFp5B,WAAW,CAAC0D,oBAAoB,GAAG+lB,eAAe,CAAC/lB,oBAAoB;UACvE1D,WAAW,CAACnC,eAAe,GAAG4rB,eAAe,CAACvlB,SAAS;UACvDlE,WAAW,CAAC/O,IAAI,CAAC,GAAGmT,OAAO,CAAC;UAC5B,IAAI,CAACpE,WAAW,CAACvJ,SAAS,EAAE;YAC1B,MAAM,IAAI/D,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;UACjC;UACA,MAAM+D,SAAS,GAAGuJ,WAAW,CAACvJ,SAAS,CAACnC,QAAQ,CAAC,QAAQ,CAAC;UAC1D,IAAI,CAACumC,OAAI,CAACrR,cAAc,CAACG,qBAAqB,CAAC9kB,QAAQ,CAACpO,SAAS,CAAC,EAAE;YAClE;YACA;YACAokC,OAAI,CAACrR,cAAc,CAACG,qBAAqB,CAACvyB,IAAI,CAACX,SAAS,CAAC;YACzD;UACF,CAAC,MAAM;YACL;YACA;YACA;YACA;YACA2iC,YAAY,GAAG,IAAI;UACrB;QACF;MACF;MACA,MAAMhxB,eAAe,GAAGpI,WAAW,CAAC1R,SAAS,CAAC,CAAC;MAC/C,aAAausC,OAAI,CAACC,kBAAkB,CAAC1yB,eAAe,EAAEhD,OAAO,CAAC;IAAC;EACjE;;EAEA;AACF;AACA;AACA;EACQ01B,kBAAkBA,CAACC,cAAc,EAAE31B,OAAO,EAAE;IAAA,IAAA41B,OAAA;IAAA,OAAArmC,iBAAA;MAChD,MAAM4lC,kBAAkB,GAAGlpC,QAAQ,CAAC0pC,cAAc,CAAC,CAACzmC,QAAQ,CAAC,QAAQ,CAAC;MACtE,MAAM8mB,MAAM,SAAS4f,OAAI,CAACC,sBAAsB,CAACV,kBAAkB,EAAEn1B,OAAO,CAAC;MAC7E,OAAOgW,MAAM;IAAC;EAChB;;EAEA;AACF;AACA;AACA;EACQ6f,sBAAsBA,CAACV,kBAAkB,EAAEn1B,OAAO,EAAE;IAAA,IAAA81B,OAAA;IAAA,OAAAvmC,iBAAA;MACxD,MAAMiT,MAAM,GAAG;QACbsT,QAAQ,EAAE;MACZ,CAAC;MACD,MAAM3N,aAAa,GAAGnI,OAAO,IAAIA,OAAO,CAACmI,aAAa;MACtD,MAAMC,mBAAmB,GAAGD,aAAa,KAAK,IAAI,GAAG,WAAW,CAAC;MAAA,EAC/DnI,OAAO,IAAIA,OAAO,CAACoI,mBAAmB,IAAI0tB,OAAI,CAACztB,UAAU;MAC3D,IAAIrI,OAAO,IAAIA,OAAO,CAACsI,UAAU,IAAI,IAAI,EAAE;QACzC9F,MAAM,CAAC8F,UAAU,GAAGtI,OAAO,CAACsI,UAAU;MACxC;MACA,IAAItI,OAAO,IAAIA,OAAO,CAACnB,cAAc,IAAI,IAAI,EAAE;QAC7C2D,MAAM,CAAC3D,cAAc,GAAGmB,OAAO,CAACnB,cAAc;MAChD;MACA,IAAIsJ,aAAa,EAAE;QACjB3F,MAAM,CAAC2F,aAAa,GAAGA,aAAa;MACtC;MACA,IAAIC,mBAAmB,EAAE;QACvB5F,MAAM,CAAC4F,mBAAmB,GAAGA,mBAAmB;MAClD;MACA,MAAMhQ,IAAI,GAAG,CAAC+8B,kBAAkB,EAAE3yB,MAAM,CAAC;MACzC,MAAM6iB,SAAS,SAASyQ,OAAI,CAACnS,WAAW,CAAC,iBAAiB,EAAEvrB,IAAI,CAAC;MACjE,MAAMuiB,GAAG,GAAGpwB,MAAM,CAAC86B,SAAS,EAAEpC,wBAAwB,CAAC;MACvD,IAAI,OAAO,IAAItI,GAAG,EAAE;QAClB,IAAIvV,IAAI,GAAGpX,SAAS;QACpB,IAAI,MAAM,IAAI2sB,GAAG,CAACjM,KAAK,EAAE;UACvBtJ,IAAI,GAAGuV,GAAG,CAACjM,KAAK,CAAC1hB,IAAI,CAACoY,IAAI;QAC5B;QACA,MAAM,IAAIH,oBAAoB,CAAC;UAC7BC,MAAM,EAAEiD,aAAa,GAAG,MAAM,GAAG,UAAU;UAC3C9W,SAAS,EAAE,EAAE;UACb8T,kBAAkB,EAAEwV,GAAG,CAACjM,KAAK,CAAC5iB,OAAO;UACrCsZ,IAAI,EAAEA;QACR,CAAC,CAAC;MACJ;MACA,OAAOuV,GAAG,CAAC3E,MAAM;IAAC;EACpB;;EAEA;AACF;AACA;EACE2P,SAASA,CAAA,EAAG;IAAA,IAAAoQ,OAAA;IACV,IAAI,CAACjS,sBAAsB,GAAG,IAAI;IAClC,IAAI,CAACC,sBAAsB,GAAGiS,WAAW,CAAC,MAAM;MAC9C;MACAzmC,iBAAA,CAAC,aAAY;QACX,IAAI;UACF,MAAMwmC,OAAI,CAAClS,aAAa,CAACzQ,MAAM,CAAC,MAAM,CAAC;UACvC;QACF,CAAC,CAAC,MAAM,CAAC;MACX,CAAC,EAAE,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;IACR,IAAI,CAAC6iB,oBAAoB,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;EACErQ,UAAUA,CAACx1B,GAAG,EAAE;IACd,IAAI,CAAC0zB,sBAAsB,GAAG,KAAK;IACnCxkB,OAAO,CAACoP,KAAK,CAAC,WAAW,EAAEte,GAAG,CAACtE,OAAO,CAAC;EACzC;;EAEA;AACF;AACA;EACE+5B,UAAUA,CAACte,IAAI,EAAE;IACf,IAAI,CAACuc,sBAAsB,GAAG,KAAK;IACnC,IAAI,CAACG,uBAAuB,GAAG,CAAC,IAAI,CAACA,uBAAuB,GAAG,CAAC,IAAIiS,MAAM,CAACC,gBAAgB;IAC3F,IAAI,IAAI,CAACnS,wBAAwB,EAAE;MACjCiJ,YAAY,CAAC,IAAI,CAACjJ,wBAAwB,CAAC;MAC3C,IAAI,CAACA,wBAAwB,GAAG,IAAI;IACtC;IACA,IAAI,IAAI,CAACD,sBAAsB,EAAE;MAC/BqS,aAAa,CAAC,IAAI,CAACrS,sBAAsB,CAAC;MAC1C,IAAI,CAACA,sBAAsB,GAAG,IAAI;IACpC;IACA,IAAIxc,IAAI,KAAK,IAAI,EAAE;MACjB;MACA,IAAI,CAAC0uB,oBAAoB,CAAC,CAAC;MAC3B;IACF;;IAEA;IACA,IAAI,CAACpR,4CAA4C,GAAG,CAAC,CAAC;IACtDl4B,MAAM,CAACwJ,OAAO,CAAC,IAAI,CAAC2uB,oBAAoB,CAAC,CAACl1B,OAAO,CAAC,CAAC,CAACymC,IAAI,EAAE5Y,YAAY,CAAC,KAAK;MAC1E,IAAI,CAAC6Y,gBAAgB,CAACD,IAAI,EAAE;QAC1B,GAAG5Y,YAAY;QACftmB,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEm/B,gBAAgBA,CAACD,IAAI,EAAEE,gBAAgB,EAAE;IACvC,MAAMC,SAAS,GAAG,IAAI,CAAC1R,oBAAoB,CAACuR,IAAI,CAAC,EAAEl/B,KAAK;IACxD,IAAI,CAAC2tB,oBAAoB,CAACuR,IAAI,CAAC,GAAGE,gBAAgB;IAClD,IAAIC,SAAS,KAAKD,gBAAgB,CAACp/B,KAAK,EAAE;MACxC,MAAMs/B,oBAAoB,GAAG,IAAI,CAAC7R,uCAAuC,CAACyR,IAAI,CAAC;MAC/E,IAAII,oBAAoB,EAAE;QACxBA,oBAAoB,CAAC7mC,OAAO,CAAC8mC,EAAE,IAAI;UACjC,IAAI;YACFA,EAAE,CAACH,gBAAgB,CAACp/B,KAAK,CAAC;YAC1B;UACF,CAAC,CAAC,MAAM,CAAC;QACX,CAAC,CAAC;MACJ;IACF;EACF;;EAEA;AACF;AACA;EACEi0B,0BAA0BA,CAACuL,oBAAoB,EAAEtc,QAAQ,EAAE;IACzD,MAAMgc,IAAI,GAAG,IAAI,CAAC1R,uCAAuC,CAACgS,oBAAoB,CAAC;IAC/E,IAAIN,IAAI,IAAI,IAAI,EAAE;MAChB,OAAO,MAAM,CAAC,CAAC;IACjB;IACA,MAAMI,oBAAoB,GAAG,IAAI,CAAC7R,uCAAuC,CAACyR,IAAI,CAAC,KAAK,IAAI50B,GAAG,CAAC,CAAC;IAC7Fg1B,oBAAoB,CAACx3B,GAAG,CAACob,QAAQ,CAAC;IAClC,OAAO,MAAM;MACXoc,oBAAoB,CAAC1+B,MAAM,CAACsiB,QAAQ,CAAC;MACrC,IAAIoc,oBAAoB,CAAC1hC,IAAI,KAAK,CAAC,EAAE;QACnC,OAAO,IAAI,CAAC6vB,uCAAuC,CAACyR,IAAI,CAAC;MAC3D;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACQJ,oBAAoBA,CAAA,EAAG;IAAA,IAAAW,OAAA;IAAA,OAAArnC,iBAAA;MAC3B,IAAI5C,MAAM,CAACS,IAAI,CAACwpC,OAAI,CAAC9R,oBAAoB,CAAC,CAACz3B,MAAM,KAAK,CAAC,EAAE;QACvD,IAAIupC,OAAI,CAAC9S,sBAAsB,EAAE;UAC/B8S,OAAI,CAAC9S,sBAAsB,GAAG,KAAK;UACnC8S,OAAI,CAAC5S,wBAAwB,GAAGjb,UAAU,CAAC,MAAM;YAC/C6tB,OAAI,CAAC5S,wBAAwB,GAAG,IAAI;YACpC,IAAI;cACF4S,OAAI,CAAC/S,aAAa,CAACgT,KAAK,CAAC,CAAC;YAC5B,CAAC,CAAC,OAAOzmC,GAAG,EAAE;cACZ;cACA,IAAIA,GAAG,YAAY9C,KAAK,EAAE;gBACxBgS,OAAO,CAACw3B,GAAG,CAAC,yCAAyC1mC,GAAG,CAACtE,OAAO,EAAE,CAAC;cACrE;YACF;UACF,CAAC,EAAE,GAAG,CAAC;QACT;QACA;MACF;MACA,IAAI8qC,OAAI,CAAC5S,wBAAwB,KAAK,IAAI,EAAE;QAC1CiJ,YAAY,CAAC2J,OAAI,CAAC5S,wBAAwB,CAAC;QAC3C4S,OAAI,CAAC5S,wBAAwB,GAAG,IAAI;QACpC4S,OAAI,CAAC9S,sBAAsB,GAAG,IAAI;MACpC;MACA,IAAI,CAAC8S,OAAI,CAAC9S,sBAAsB,EAAE;QAChC8S,OAAI,CAAC/S,aAAa,CAACkT,OAAO,CAAC,CAAC;QAC5B;MACF;MACA,MAAMC,yBAAyB,GAAGJ,OAAI,CAAC3S,uBAAuB;MAC9D,MAAMgT,8BAA8B,GAAGA,CAAA,KAAM;QAC3C,OAAOD,yBAAyB,KAAKJ,OAAI,CAAC3S,uBAAuB;MACnE,CAAC;MACD,MAAMpe,OAAO,CAACqJ,GAAG;MACjB;MACA;MACA;MACA;MACAviB,MAAM,CAACS,IAAI,CAACwpC,OAAI,CAAC9R,oBAAoB,CAAC,CAACv3B,GAAG;QAAA,IAAA2pC,MAAA,GAAA3nC,iBAAA,CAAC,WAAM8mC,IAAI,EAAI;UACvD,MAAM5Y,YAAY,GAAGmZ,OAAI,CAAC9R,oBAAoB,CAACuR,IAAI,CAAC;UACpD,IAAI5Y,YAAY,KAAKzvB,SAAS,EAAE;YAC9B;YACA;UACF;UACA,QAAQyvB,YAAY,CAACtmB,KAAK;YACxB,KAAK,SAAS;YACd,KAAK,cAAc;cACjB,IAAIsmB,YAAY,CAAC0Z,SAAS,CAACpiC,IAAI,KAAK,CAAC,EAAE;gBACrC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;gBACY,OAAO6hC,OAAI,CAAC9R,oBAAoB,CAACuR,IAAI,CAAC;gBACtC,IAAI5Y,YAAY,CAACtmB,KAAK,KAAK,cAAc,EAAE;kBACzC,OAAOy/B,OAAI,CAAC/R,4CAA4C,CAACpH,YAAY,CAAC2Z,oBAAoB,CAAC;gBAC7F;gBACA,MAAMR,OAAI,CAACX,oBAAoB,CAAC,CAAC;gBACjC;cACF;cACA,MAAM1mC,iBAAA,CAAC,aAAY;gBACjB,MAAM;kBACJ6I,IAAI;kBACJkiB;gBACF,CAAC,GAAGmD,YAAY;gBAChB,IAAI;kBACFmZ,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;oBAC1B,GAAG5Y,YAAY;oBACftmB,KAAK,EAAE;kBACT,CAAC,CAAC;kBACF,MAAMigC,oBAAoB,SAASR,OAAI,CAAC/S,aAAa,CAACjlB,IAAI,CAAC0b,MAAM,EAAEliB,IAAI,CAAC;kBACxEw+B,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;oBAC1B,GAAG5Y,YAAY;oBACf2Z,oBAAoB;oBACpBjgC,KAAK,EAAE;kBACT,CAAC,CAAC;kBACFy/B,OAAI,CAAC/R,4CAA4C,CAACuS,oBAAoB,CAAC,GAAG3Z,YAAY,CAAC0Z,SAAS;kBAChG,MAAMP,OAAI,CAACX,oBAAoB,CAAC,CAAC;gBACnC,CAAC,CAAC,OAAOvP,CAAC,EAAE;kBACVpnB,OAAO,CAACoP,KAAK,CAAC,YAAYgY,CAAC,YAAYp5B,KAAK,GAAG,EAAE,GAAG,WAAW,mBAAmBgtB,MAAM,IAAI,EAAE;oBAC5FliB,IAAI;oBACJsW,KAAK,EAAEgY;kBACT,CAAC,CAAC;kBACF,IAAI,CAACuQ,8BAA8B,CAAC,CAAC,EAAE;oBACrC;kBACF;kBACA;kBACAL,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;oBAC1B,GAAG5Y,YAAY;oBACftmB,KAAK,EAAE;kBACT,CAAC,CAAC;kBACF,MAAMy/B,OAAI,CAACX,oBAAoB,CAAC,CAAC;gBACnC;cACF,CAAC,EAAE,CAAC;cACJ;YACF,KAAK,YAAY;cACf,IAAIxY,YAAY,CAAC0Z,SAAS,CAACpiC,IAAI,KAAK,CAAC,EAAE;gBACrC;gBACA;gBACA;gBACA,MAAMxF,iBAAA,CAAC,aAAY;kBACjB,MAAM;oBACJ6nC,oBAAoB;oBACpBC;kBACF,CAAC,GAAG5Z,YAAY;kBAChB,IAAImZ,OAAI,CAAC7R,+BAA+B,CAACprB,GAAG,CAACy9B,oBAAoB,CAAC,EAAE;oBAClE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;oBACgBR,OAAI,CAAC7R,+BAA+B,CAAChtB,MAAM,CAACq/B,oBAAoB,CAAC;kBACnE,CAAC,MAAM;oBACLR,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;sBAC1B,GAAG5Y,YAAY;sBACftmB,KAAK,EAAE;oBACT,CAAC,CAAC;oBACFy/B,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;sBAC1B,GAAG5Y,YAAY;sBACftmB,KAAK,EAAE;oBACT,CAAC,CAAC;oBACF,IAAI;sBACF,MAAMy/B,OAAI,CAAC/S,aAAa,CAACjlB,IAAI,CAACy4B,iBAAiB,EAAE,CAACD,oBAAoB,CAAC,CAAC;oBAC1E,CAAC,CAAC,OAAO1Q,CAAC,EAAE;sBACV,IAAIA,CAAC,YAAYp5B,KAAK,EAAE;wBACtBgS,OAAO,CAACoP,KAAK,CAAC,GAAG2oB,iBAAiB,SAAS,EAAE3Q,CAAC,CAAC56B,OAAO,CAAC;sBACzD;sBACA,IAAI,CAACmrC,8BAA8B,CAAC,CAAC,EAAE;wBACrC;sBACF;sBACA;sBACAL,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;wBAC1B,GAAG5Y,YAAY;wBACftmB,KAAK,EAAE;sBACT,CAAC,CAAC;sBACF,MAAMy/B,OAAI,CAACX,oBAAoB,CAAC,CAAC;sBACjC;oBACF;kBACF;kBACAW,OAAI,CAACN,gBAAgB,CAACD,IAAI,EAAE;oBAC1B,GAAG5Y,YAAY;oBACftmB,KAAK,EAAE;kBACT,CAAC,CAAC;kBACF,MAAMy/B,OAAI,CAACX,oBAAoB,CAAC,CAAC;gBACnC,CAAC,EAAE,CAAC;cACN;cACA;UACJ;QACF,CAAC;QAAA,iBAAAqB,IAAA;UAAA,OAAAJ,MAAA,CAAAlvB,KAAA,OAAAC,SAAA;QAAA;MAAA,IAAC,CAAC;IAAC;EACN;;EAEA;AACF;AACA;EACEsvB,yBAAyBA,CAACH,oBAAoB,EAAEI,YAAY,EAAE;IAC5D,MAAML,SAAS,GAAG,IAAI,CAACtS,4CAA4C,CAACuS,oBAAoB,CAAC;IACzF,IAAID,SAAS,KAAKnpC,SAAS,EAAE;MAC3B;IACF;IACAmpC,SAAS,CAACvnC,OAAO,CAAC8mC,EAAE,IAAI;MACtB,IAAI;QACFA,EAAE;QACF;QACA;QACA;QACA;QACA,GAAGc,YAAY,CAAC;MAClB,CAAC,CAAC,OAAO9Q,CAAC,EAAE;QACVpnB,OAAO,CAACoP,KAAK,CAACgY,CAAC,CAAC;MAClB;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEZ,wBAAwBA,CAAC2R,YAAY,EAAE;IACrC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAEja,yBAAyB,CAAC;IACnD,IAAI,CAAC+Z,yBAAyB,CAAC9Z,YAAY,EAAE,CAACzH,MAAM,CAACloB,KAAK,EAAEkoB,MAAM,CAAC3G,OAAO,CAAC,CAAC;EAC9E;;EAEA;AACF;AACA;EACEqoB,iBAAiBA,CAACC,kBAAkB;EACpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEv/B,IAAI,EAAE;IAAA,IAAAw/B,OAAA;IACJ,MAAMjB,oBAAoB,GAAG,IAAI,CAAClS,yBAAyB,EAAE;IAC7D,MAAM4R,IAAI,GAAGvlB,mBAAmB,CAAC,CAAC6mB,kBAAkB,CAACrd,MAAM,EAAEliB,IAAI,CAAC,CAAC;IACnE,MAAMy/B,oBAAoB,GAAG,IAAI,CAAC/S,oBAAoB,CAACuR,IAAI,CAAC;IAC5D,IAAIwB,oBAAoB,KAAK7pC,SAAS,EAAE;MACtC,IAAI,CAAC82B,oBAAoB,CAACuR,IAAI,CAAC,GAAG;QAChC,GAAGsB,kBAAkB;QACrBv/B,IAAI;QACJ++B,SAAS,EAAE,IAAI11B,GAAG,CAAC,CAACk2B,kBAAkB,CAACtd,QAAQ,CAAC,CAAC;QACjDljB,KAAK,EAAE;MACT,CAAC;IACH,CAAC,MAAM;MACL0gC,oBAAoB,CAACV,SAAS,CAACl4B,GAAG,CAAC04B,kBAAkB,CAACtd,QAAQ,CAAC;IACjE;IACA,IAAI,CAACsK,uCAAuC,CAACgS,oBAAoB,CAAC,GAAGN,IAAI;IACzE,IAAI,CAAC3R,mDAAmD,CAACiS,oBAAoB,CAAC,gBAAApnC,iBAAA,CAAG,aAAY;MAC3F,OAAOqoC,OAAI,CAAClT,mDAAmD,CAACiS,oBAAoB,CAAC;MACrF,OAAOiB,OAAI,CAACjT,uCAAuC,CAACgS,oBAAoB,CAAC;MACzE,MAAMlZ,YAAY,GAAGma,OAAI,CAAC9S,oBAAoB,CAACuR,IAAI,CAAC;MACpD5rC,MAAM,CAACgzB,YAAY,KAAKzvB,SAAS,EAAE,4EAA4E2oC,oBAAoB,EAAE,CAAC;MACtIlZ,YAAY,CAAC0Z,SAAS,CAACp/B,MAAM,CAAC4/B,kBAAkB,CAACtd,QAAQ,CAAC;MAC1D,MAAMud,OAAI,CAAC3B,oBAAoB,CAAC,CAAC;IACnC,CAAC;IACD,IAAI,CAACA,oBAAoB,CAAC,CAAC;IAC3B,OAAOU,oBAAoB;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACA;;EAEA;EACAmB,eAAeA,CAACzsC,SAAS,EAAEgvB,QAAQ,EAAE7E,kBAAkB,EAAE;IACvD,MAAM;MACJnN,UAAU;MACV7F;IACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;IACnD,MAAMpd,IAAI,GAAG,IAAI,CAAC+sB,UAAU,CAAC,CAAC95B,SAAS,CAACkD,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,IAAI,IAAI,CAACkb,WAAW,IAAI,WAAW;IAClG;IACA,QAAQ,EAAE/gB,MAAM,CAAC;IACjB,OAAO,IAAI,CAACk1B,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,kBAAkB;MAC1B+c,iBAAiB,EAAE;IACrB,CAAC,EAAEj/B,IAAI,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;EACQ2/B,2BAA2BA,CAACpB,oBAAoB,EAAE;IAAA,IAAAqB,OAAA;IAAA,OAAAzoC,iBAAA;MACtD,MAAMyoC,OAAI,CAACC,8BAA8B,CAACtB,oBAAoB,EAAE,gBAAgB,CAAC;IAAC;EACpF;;EAEA;AACF;AACA;EACE5Q,+BAA+BA,CAAC0R,YAAY,EAAE;IAC5C,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAE9Z,gCAAgC,CAAC;IAC1D,IAAI,CAAC4Z,yBAAyB,CAAC9Z,YAAY,EAAE,CAAC;MAC5Cya,SAAS,EAAEliB,MAAM,CAACloB,KAAK,CAAC0C,MAAM;MAC9BgjC,WAAW,EAAExd,MAAM,CAACloB,KAAK,CAAC6K;IAC5B,CAAC,EAAEqd,MAAM,CAAC3G,OAAO,CAAC,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACA;;EAEA;EACA8oB,sBAAsBA,CAAC7oC,SAAS,EAAE+qB,QAAQ,EAAE7E,kBAAkB,EAAE4iB,YAAY,EAAE;IAC5E,MAAM;MACJ/vB,UAAU;MACV7F;IACF,CAAC,GAAG+S,2BAA2B,CAACC,kBAAkB,CAAC;IACnD,MAAMpd,IAAI,GAAG,IAAI,CAAC+sB,UAAU,CAAC,CAAC71B,SAAS,CAACf,QAAQ,CAAC,CAAC,CAAC,EAAE8Z,UAAU,IAAI,IAAI,CAACkb,WAAW,IAAI,WAAW;IAClG;IACA,QAAQ,CAAC,gBAAgB/gB,MAAM,GAAGA,MAAM,GAAG41B,YAAY,GAAG;MACxDxiB,OAAO,EAAED,mCAAmC,CAACyiB,YAAY;IAC3D,CAAC,GAAGpqC,SAAS,CAAC,WAAW,CAAC;IAC1B,OAAO,IAAI,CAAC0pC,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,kBAAkB;MAC1B+c,iBAAiB,EAAE;IACrB,CAAC,EAAEj/B,IAAI,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;EACQigC,kCAAkCA,CAAC1B,oBAAoB,EAAE;IAAA,IAAA2B,OAAA;IAAA,OAAA/oC,iBAAA;MAC7D,MAAM+oC,OAAI,CAACL,8BAA8B,CAACtB,oBAAoB,EAAE,wBAAwB,CAAC;IAAC;EAC5F;;EAEA;AACF;AACA;EACE4B,MAAMA,CAACliC,MAAM,EAAEgkB,QAAQ,EAAEhS,UAAU,EAAE;IACnC,MAAMjQ,IAAI,GAAG,IAAI,CAAC+sB,UAAU,CAAC,CAAC,OAAO9uB,MAAM,KAAK,QAAQ,GAAG;MACzDmiC,QAAQ,EAAE,CAACniC,MAAM,CAACnH,QAAQ,CAAC,CAAC;IAC9B,CAAC,GAAGmH,MAAM,CAAC,EAAEgS,UAAU,IAAI,IAAI,CAACkb,WAAW,IAAI,WAAW,CAAC;IAC3D,CAAC;IACD,OAAO,IAAI,CAACmU,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,eAAe;MACvB+c,iBAAiB,EAAE;IACrB,CAAC,EAAEj/B,IAAI,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;EACQqgC,oBAAoBA,CAAC9B,oBAAoB,EAAE;IAAA,IAAA+B,OAAA;IAAA,OAAAnpC,iBAAA;MAC/C,MAAMmpC,OAAI,CAACT,8BAA8B,CAACtB,oBAAoB,EAAE,MAAM,CAAC;IAAC;EAC1E;;EAEA;AACF;AACA;EACEvQ,qBAAqBA,CAACqR,YAAY,EAAE;IAClC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAEtU,sBAAsB,CAAC;IAChD,IAAI,CAACoU,yBAAyB,CAAC9Z,YAAY,EAAE,CAACzH,MAAM,CAACloB,KAAK,EAAEkoB,MAAM,CAAC3G,OAAO,CAAC,CAAC;EAC9E;;EAEA;AACF;AACA;EACE2W,qBAAqBA,CAACyR,YAAY,EAAE;IAClC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAE1Z,sBAAsB,CAAC;IAChD,IAAI,CAACwZ,yBAAyB,CAAC9Z,YAAY,EAAE,CAACzH,MAAM,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE2iB,YAAYA,CAACte,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACqd,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,eAAe;MACvB+c,iBAAiB,EAAE;IACrB,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACQuB,wBAAwBA,CAACjC,oBAAoB,EAAE;IAAA,IAAAkC,OAAA;IAAA,OAAAtpC,iBAAA;MACnD,MAAMspC,OAAI,CAACZ,8BAA8B,CAACtB,oBAAoB,EAAE,aAAa,CAAC;IAAC;EACjF;;EAEA;AACF;AACA;EACE1Q,4BAA4BA,CAACwR,YAAY,EAAE;IACzC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAElZ,4BAA4B,CAAC;IACtD,IAAI,CAACgZ,yBAAyB,CAAC9Z,YAAY,EAAE,CAACzH,MAAM,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE8iB,YAAYA,CAACze,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACqd,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,uBAAuB;MAC/B+c,iBAAiB,EAAE;IACrB,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACQ0B,wBAAwBA,CAACpC,oBAAoB,EAAE;IAAA,IAAAqC,OAAA;IAAA,OAAAzpC,iBAAA;MACnD,MAAMypC,OAAI,CAACf,8BAA8B,CAACtB,oBAAoB,EAAE,aAAa,CAAC;IAAC;EACjF;;EAEA;AACF;AACA;;EAEQsB,8BAA8BA,CAACtB,oBAAoB,EAAEsC,gBAAgB,EAAE;IAAA,IAAAC,OAAA;IAAA,OAAA3pC,iBAAA;MAC3E,MAAM4pC,OAAO,GAAGD,OAAI,CAACxU,mDAAmD,CAACiS,oBAAoB,CAAC;MAC9F,IAAIwC,OAAO,EAAE;QACX,MAAMA,OAAO,CAAC,CAAC;MACjB,CAAC,MAAM;QACL75B,OAAO,CAACC,IAAI,CAAC,qEAAqE,GAAG,KAAKo3B,oBAAoB,WAAWsC,gBAAgB,WAAW,GAAG,qBAAqB,CAAC;MAC/K;IAAC;EACH;EACA9T,UAAUA,CAAC/sB,IAAI,EAAEghC,QAAQ,EAAEtjB,QAAQ,EAAEob,KAAK,EAAE;IAC1C,MAAM7oB,UAAU,GAAG+wB,QAAQ,IAAI,IAAI,CAAC7V,WAAW;IAC/C,IAAIlb,UAAU,IAAIyN,QAAQ,IAAIob,KAAK,EAAE;MACnC,IAAIlxB,OAAO,GAAG,CAAC,CAAC;MAChB,IAAI8V,QAAQ,EAAE;QACZ9V,OAAO,CAAC8V,QAAQ,GAAGA,QAAQ;MAC7B;MACA,IAAIzN,UAAU,EAAE;QACdrI,OAAO,CAACqI,UAAU,GAAGA,UAAU;MACjC;MACA,IAAI6oB,KAAK,EAAE;QACTlxB,OAAO,GAAGrT,MAAM,CAACC,MAAM,CAACoT,OAAO,EAAEkxB,KAAK,CAAC;MACzC;MACA94B,IAAI,CAACpG,IAAI,CAACgO,OAAO,CAAC;IACpB;IACA,OAAO5H,IAAI;EACb;;EAEA;AACF;AACA;EACEw4B,0BAA0BA,CAACx4B,IAAI,EAAEghC,QAAQ,EAAEtjB,QAAQ,EAAEob,KAAK,EAAE;IAC1D,MAAM7oB,UAAU,GAAG+wB,QAAQ,IAAI,IAAI,CAAC7V,WAAW;IAC/C,IAAIlb,UAAU,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC5I,QAAQ,CAAC4I,UAAU,CAAC,EAAE;MAClE,MAAM,IAAI/a,KAAK,CAAC,6CAA6C,GAAG,IAAI,CAACi2B,WAAW,GAAG,6CAA6C,CAAC;IACnI;IACA,OAAO,IAAI,CAAC4B,UAAU,CAAC/sB,IAAI,EAAEghC,QAAQ,EAAEtjB,QAAQ,EAAEob,KAAK,CAAC;EACzD;;EAEA;AACF;AACA;EACEhL,0BAA0BA,CAACuR,YAAY,EAAE;IACvC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAEjZ,2BAA2B,CAAC;IACrD,IAAIxI,MAAM,CAACloB,KAAK,KAAK,mBAAmB,EAAE;MACxC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,IAAI,CAACi3B,+BAA+B,CAAC9lB,GAAG,CAACwe,YAAY,CAAC;IACxD;IACA,IAAI,CAAC8Z,yBAAyB,CAAC9Z,YAAY,EAAEzH,MAAM,CAACloB,KAAK,KAAK,mBAAmB,GAAG,CAAC;MACnF/D,IAAI,EAAE;IACR,CAAC,EAAEisB,MAAM,CAAC3G,OAAO,CAAC,GAAG,CAAC;MACpBtlB,IAAI,EAAE,QAAQ;MACdisB,MAAM,EAAEA,MAAM,CAACloB;IACjB,CAAC,EAAEkoB,MAAM,CAAC3G,OAAO,CAAC,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE0b,WAAWA,CAAC15B,SAAS,EAAEgpB,QAAQ,EAAEhS,UAAU,EAAE;IAC3C,MAAMjQ,IAAI,GAAG,IAAI,CAAC+sB,UAAU,CAAC,CAAC9zB,SAAS,CAAC,EAAEgX,UAAU,IAAI,IAAI,CAACkb,WAAW,IAAI,WAAW,CAAC;IACxF,CAAC;IACD,MAAMoT,oBAAoB,GAAG,IAAI,CAACe,iBAAiB,CAAC;MAClDrd,QAAQ,EAAEA,CAACod,YAAY,EAAEpoB,OAAO,KAAK;QACnC,IAAIooB,YAAY,CAAC1tC,IAAI,KAAK,QAAQ,EAAE;UAClCswB,QAAQ,CAACod,YAAY,CAACzhB,MAAM,EAAE3G,OAAO,CAAC;UACtC;UACA;UACA,IAAI;YACF,IAAI,CAACmc,uBAAuB,CAACmL,oBAAoB,CAAC;YAClD;UACF,CAAC,CAAC,OAAO0C,IAAI,EAAE;YACb;UAAA;QAEJ;MACF,CAAC;MACD/e,MAAM,EAAE,oBAAoB;MAC5B+c,iBAAiB,EAAE;IACrB,CAAC,EAAEj/B,IAAI,CAAC;IACR,OAAOu+B,oBAAoB;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2C,sBAAsBA,CAACjoC,SAAS,EAAEgpB,QAAQ,EAAEra,OAAO,EAAE;IACnD,MAAM;MACJqI,UAAU;MACV,GAAG6oB;IACL,CAAC,GAAG;MACF,GAAGlxB,OAAO;MACVqI,UAAU,EAAErI,OAAO,IAAIA,OAAO,CAACqI,UAAU,IAAI,IAAI,CAACkb,WAAW,IAAI,WAAW,CAAC;IAC/E,CAAC;IACD,MAAMnrB,IAAI,GAAG,IAAI,CAAC+sB,UAAU,CAAC,CAAC9zB,SAAS,CAAC,EAAEgX,UAAU,EAAEra,SAAS,CAAC,gBAAgBkjC,KAAK,CAAC;IACtF,MAAMyF,oBAAoB,GAAG,IAAI,CAACe,iBAAiB,CAAC;MAClDrd,QAAQ,EAAEA,CAACod,YAAY,EAAEpoB,OAAO,KAAK;QACnCgL,QAAQ,CAACod,YAAY,EAAEpoB,OAAO,CAAC;QAC/B;QACA;QACA,IAAI;UACF,IAAI,CAACmc,uBAAuB,CAACmL,oBAAoB,CAAC;UAClD;QACF,CAAC,CAAC,OAAO0C,IAAI,EAAE;UACb;QAAA;MAEJ,CAAC;MACD/e,MAAM,EAAE,oBAAoB;MAC5B+c,iBAAiB,EAAE;IACrB,CAAC,EAAEj/B,IAAI,CAAC;IACR,OAAOu+B,oBAAoB;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACQnL,uBAAuBA,CAACmL,oBAAoB,EAAE;IAAA,IAAA4C,OAAA;IAAA,OAAAhqC,iBAAA;MAClD,MAAMgqC,OAAI,CAACtB,8BAA8B,CAACtB,oBAAoB,EAAE,kBAAkB,CAAC;IAAC;EACtF;;EAEA;AACF;AACA;EACExQ,qBAAqBA,CAACsR,YAAY,EAAE;IAClC,MAAM;MACJzhB,MAAM;MACNyH;IACF,CAAC,GAAGlzB,MAAM,CAACktC,YAAY,EAAEhZ,sBAAsB,CAAC;IAChD,IAAI,CAAC8Y,yBAAyB,CAAC9Z,YAAY,EAAE,CAACzH,MAAM,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEwjB,YAAYA,CAACnf,QAAQ,EAAE;IACrB,OAAO,IAAI,CAACqd,iBAAiB,CAAC;MAC5Brd,QAAQ;MACRC,MAAM,EAAE,eAAe;MACvB+c,iBAAiB,EAAE;IACrB,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACQoC,wBAAwBA,CAAC9C,oBAAoB,EAAE;IAAA,IAAA+C,OAAA;IAAA,OAAAnqC,iBAAA;MACnD,MAAMmqC,OAAI,CAACzB,8BAA8B,CAACtB,oBAAoB,EAAE,aAAa,CAAC;IAAC;EACjF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMgD,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;AACA;EACEltC,WAAWA,CAACmtC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACA,QAAQ,GAAGD,OAAO,IAAIzuC,eAAe,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAO2uC,QAAQA,CAAA,EAAG;IAChB,OAAO,IAAIH,OAAO,CAACxuC,eAAe,CAAC,CAAC,CAAC;EACvC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO4uC,aAAaA,CAACxuC,SAAS,EAAEyU,OAAO,EAAE;IACvC,IAAIzU,SAAS,CAACgB,UAAU,KAAK,EAAE,EAAE;MAC/B,MAAM,IAAIe,KAAK,CAAC,qBAAqB,CAAC;IACxC;IACA,MAAMjC,SAAS,GAAGE,SAAS,CAACQ,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IACzC,IAAI,CAACiU,OAAO,IAAI,CAACA,OAAO,CAACg6B,cAAc,EAAE;MACvC,MAAM5uC,aAAa,GAAGG,SAAS,CAACQ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAC5C,MAAMkuC,iBAAiB,GAAG3uC,YAAY,CAACF,aAAa,CAAC;MACrD,KAAK,IAAI8uC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG,EAAE,EAAEA,EAAE,EAAE,EAAE;QAC9B,IAAI7uC,SAAS,CAAC6uC,EAAE,CAAC,KAAKD,iBAAiB,CAACC,EAAE,CAAC,EAAE;UAC3C,MAAM,IAAI5sC,KAAK,CAAC,+BAA+B,CAAC;QAClD;MACF;IACF;IACA,OAAO,IAAIqsC,OAAO,CAAC;MACjBtuC,SAAS;MACTE;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAO4uC,QAAQA,CAAC9qC,IAAI,EAAE;IACpB,MAAMhE,SAAS,GAAGC,YAAY,CAAC+D,IAAI,CAAC;IACpC,MAAM9D,SAAS,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;IACpCD,SAAS,CAACE,GAAG,CAAC4D,IAAI,CAAC;IACnB9D,SAAS,CAACE,GAAG,CAACJ,SAAS,EAAE,EAAE,CAAC;IAC5B,OAAO,IAAIsuC,OAAO,CAAC;MACjBtuC,SAAS;MACTE;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIF,SAASA,CAAA,EAAG;IACd,OAAO,IAAI6C,SAAS,CAAC,IAAI,CAAC2rC,QAAQ,CAACxuC,SAAS,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;EACE,IAAIE,SAASA,CAAA,EAAG;IACd,OAAO,IAAIC,UAAU,CAAC,IAAI,CAACquC,QAAQ,CAACtuC,SAAS,CAAC;EAChD;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM6uC,gCAAgC,GAAGztC,MAAM,CAACmgB,MAAM,CAAC;EACrDutB,iBAAiB,EAAE;IACjBjoC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEwW,GAAG,CAAC,YAAY,CAAC,EAAExgB,YAAY,CAAC6K,EAAE,CAAC,UAAU,CAAC,CAAC;EAC/G,CAAC;EACDomC,iBAAiB,EAAE;IACjBloC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACDknC,iBAAiB,EAAE;IACjBnoC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEwW,GAAG,CAAC,CAAC,EAAExgB,YAAY,CAACqR,GAAG,CAACrP,SAAS,CAAC,CAAC,EAAEhC,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;EAC/J,CAAC;EACDmnC,qBAAqB,EAAE;IACrBpoC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACDonC,gBAAgB,EAAE;IAChBroC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D;AACF,CAAC,CAAC;AACF,MAAMqnC,6BAA6B,CAAC;EAClC;AACF;AACA;EACEjuC,WAAWA,CAAA,EAAG,CAAC;EACf,OAAO0d,qBAAqBA,CAACtX,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM+a,qBAAqB,GAAGhhB,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC;IAC7D,MAAMjB,KAAK,GAAGiY,qBAAqB,CAACtd,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC;IAC5D,IAAIjD,IAAI;IACR,KAAK,MAAM,CAAC4wC,UAAU,EAAEhmC,MAAM,CAAC,IAAIhI,MAAM,CAACwJ,OAAO,CAACikC,gCAAgC,CAAC,EAAE;MACnF,IAAIzlC,MAAM,CAACvC,KAAK,IAAIA,KAAK,EAAE;QACzBrI,IAAI,GAAG4wC,UAAU;QACjB;MACF;IACF;IACA,IAAI,CAAC5wC,IAAI,EAAE;MACT,MAAM,IAAIuD,KAAK,CAAC,0DAA0D,CAAC;IAC7E;IACA,OAAOvD,IAAI;EACb;EACA,OAAO6wC,uBAAuBA,CAAC/nC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACurC,eAAe,CAAChoC,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACzC,MAAM;MACJ0tC;IACF,CAAC,GAAG3xB,YAAY,CAACixB,gCAAgC,CAACC,iBAAiB,EAAExnC,WAAW,CAAC7F,IAAI,CAAC;IACtF,OAAO;MACLknB,SAAS,EAAErhB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACrC8E,KAAK,EAAEzC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACjCsqC,UAAU,EAAE5E,MAAM,CAAC4E,UAAU;IAC/B,CAAC;EACH;EACA,OAAOC,uBAAuBA,CAACloC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAIuD,WAAW,CAACzF,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAAC,8BAA8BuF,WAAW,CAACzF,IAAI,CAACC,MAAM,4BAA4B,CAAC;IACpG;IACA,MAAM;MACJ+J;IACF,CAAC,GAAG+R,YAAY,CAACixB,gCAAgC,CAACG,iBAAiB,EAAE1nC,WAAW,CAAC7F,IAAI,CAAC;IACtF,OAAO;MACL+J,WAAW,EAAElE,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0jB,SAAS,EAAErhB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACrC8E,KAAK,EAAEzC,WAAW,CAACzF,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGwF,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM,GAAGxC,SAAS;MAC3EoJ,SAAS,EAAEA,SAAS,CAAC7J,GAAG,CAAClB,MAAM,IAAI,IAAI6B,SAAS,CAAC7B,MAAM,CAAC;IAC1D,CAAC;EACH;EACA,OAAO2uC,sBAAsBA,CAACnoC,WAAW,EAAE;IACzC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACurC,eAAe,CAAChoC,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACzC,OAAO;MACL2J,WAAW,EAAElE,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0jB,SAAS,EAAErhB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACrCyqC,SAAS,EAAEpoC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACjC,CAAC;EACH;EACA,OAAO0qC,uBAAuBA,CAACroC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACurC,eAAe,CAAChoC,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACzC,OAAO;MACL2J,WAAW,EAAElE,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0jB,SAAS,EAAErhB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACjC,CAAC;EACH;EACA,OAAO2qC,2BAA2BA,CAACtoC,WAAW,EAAE;IAC9C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACurC,eAAe,CAAChoC,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACzC,OAAO;MACL2J,WAAW,EAAElE,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0jB,SAAS,EAAErhB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACjC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO4Z,cAAcA,CAAC9a,SAAS,EAAE;IAC/B,IAAI,CAACA,SAAS,CAACjB,MAAM,CAAC+sC,yBAAyB,CAAC9rC,SAAS,CAAC,EAAE;MAC1D,MAAM,IAAIhC,KAAK,CAAC,kEAAkE,CAAC;IACrF;EACF;EACA;AACF;AACA;EACE,OAAOutC,eAAeA,CAACztC,IAAI,EAAEyf,cAAc,EAAE;IAC3C,IAAIzf,IAAI,CAACC,MAAM,GAAGwf,cAAc,EAAE;MAChC,MAAM,IAAIvf,KAAK,CAAC,8BAA8BF,IAAI,CAACC,MAAM,4BAA4Bwf,cAAc,EAAE,CAAC;IACxG;EACF;AACF;AACA,MAAMuuB,yBAAyB,CAAC;EAC9B;AACF;AACA;EACE3uC,WAAWA,CAAA,EAAG,CAAC;EACf,OAAO4uC,iBAAiBA,CAACpuB,MAAM,EAAE;IAC/B,MAAM,CAACquB,kBAAkB,EAAEC,QAAQ,CAAC,GAAGrtC,SAAS,CAAC8B,sBAAsB,CAAC,CAACid,MAAM,CAACiH,SAAS,CAACjoB,QAAQ,CAAC,CAAC,EAAEzC,aAAa,CAAC,CAAC,CAACqD,MAAM,CAACogB,MAAM,CAAC6tB,UAAU,CAAC,CAAC,EAAE,IAAI,CAACxrC,SAAS,CAAC;IACjK,MAAMvF,IAAI,GAAGqwC,gCAAgC,CAACC,iBAAiB;IAC/D,MAAMrtC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B+wC,UAAU,EAAE3tB,MAAM,CAACF,MAAM,CAAC6tB,UAAU,CAAC;MACrCS,QAAQ,EAAEA;IACZ,CAAC,CAAC;IACF,MAAMnuC,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAE8qC,kBAAkB;MAC1B3lC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACiH,SAAS;MACxBve,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAAC3X,KAAK;MACpBK,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEoc,aAAa,CAACtd,SAAS;MAC/BqG,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,CAAC,IAAIqI,sBAAsB,CAAC;MACjC3O,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBlC,IAAI,EAAEA,IAAI;MACVJ,IAAI,EAAEA;IACR,CAAC,CAAC,EAAEsuC,kBAAkB,CAAC;EACzB;EACA,OAAOE,iBAAiBA,CAACvuB,MAAM,EAAE;IAC/B,MAAMljB,IAAI,GAAGqwC,gCAAgC,CAACE,iBAAiB;IAC/D,MAAMttC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,MAAMqD,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEyc,MAAM,CAAClW,WAAW;MAC1BpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACiH,SAAS;MACxBve,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIqI,sBAAsB,CAAC;MAChC3O,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBlC,IAAI,EAAEA,IAAI;MACVJ,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;EACA,OAAOyuC,iBAAiBA,CAACxuB,MAAM,EAAE;IAC/B,MAAMljB,IAAI,GAAGqwC,gCAAgC,CAACG,iBAAiB;IAC/D,MAAMvtC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5BqN,SAAS,EAAE6V,MAAM,CAAC7V,SAAS,CAAC7J,GAAG,CAACmuC,IAAI,IAAIA,IAAI,CAACltC,OAAO,CAAC,CAAC;IACxD,CAAC,CAAC;IACF,MAAMpB,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEyc,MAAM,CAAClW,WAAW;MAC1BpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACiH,SAAS;MACxBve,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIqX,MAAM,CAAC3X,KAAK,EAAE;MAChBlI,IAAI,CAAC4E,IAAI,CAAC;QACRxB,MAAM,EAAEyc,MAAM,CAAC3X,KAAK;QACpBK,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEoc,aAAa,CAACtd,SAAS;QAC/BqG,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIqI,sBAAsB,CAAC;MAChC3O,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBlC,IAAI,EAAEA,IAAI;MACVJ,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;EACA,OAAO2uC,qBAAqBA,CAAC1uB,MAAM,EAAE;IACnC,MAAMljB,IAAI,GAAGqwC,gCAAgC,CAACI,qBAAqB;IACnE,MAAMxtC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,MAAMqD,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEyc,MAAM,CAAClW,WAAW;MAC1BpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACiH,SAAS;MACxBve,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIqI,sBAAsB,CAAC;MAChC3O,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBlC,IAAI,EAAEA,IAAI;MACVJ,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;EACA,OAAO4uC,gBAAgBA,CAAC3uB,MAAM,EAAE;IAC9B,MAAMljB,IAAI,GAAGqwC,gCAAgC,CAACK,gBAAgB;IAC9D,MAAMztC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,MAAMqD,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEyc,MAAM,CAAClW,WAAW;MAC1BpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACiH,SAAS;MACxBve,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEyc,MAAM,CAACguB,SAAS;MACxBtlC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIqI,sBAAsB,CAAC;MAChC3O,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBlC,IAAI,EAAEA,IAAI;MACVJ,IAAI,EAAEA;IACR,CAAC,CAAC;EACJ;AACF;AACAouC,yBAAyB,CAAC9rC,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;;AAElG;AACA;AACA;AACA,MAAM2tC,wBAAwB,CAAC;EAC7B;AACF;AACA;EACEpvC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;EACE,OAAO0d,qBAAqBA,CAACtX,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM+a,qBAAqB,GAAGhhB,YAAY,CAAC6K,EAAE,CAAC,aAAa,CAAC;IAC5D,MAAMoW,SAAS,GAAGD,qBAAqB,CAACtd,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC;IAChE,IAAIjD,IAAI;IACR,KAAK,MAAM,CAACwgB,MAAM,EAAE5V,MAAM,CAAC,IAAIhI,MAAM,CAACwJ,OAAO,CAAC2lC,kCAAkC,CAAC,EAAE;MACjF,IAAInnC,MAAM,CAACvC,KAAK,IAAIkY,SAAS,EAAE;QAC7BvgB,IAAI,GAAGwgB,MAAM;QACb;MACF;IACF;IACA,IAAI,CAACxgB,IAAI,EAAE;MACT,MAAM,IAAIuD,KAAK,CAAC,4DAA4D,CAAC;IAC/E;IACA,OAAOvD,IAAI;EACb;;EAEA;AACF;AACA;EACE,OAAOgyC,kBAAkBA,CAAClpC,WAAW,EAAE;IACrC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM;MACJ0sC,KAAK;MACLC;IACF,CAAC,GAAG9yB,YAAY,CAAC2yB,kCAAkC,CAACI,YAAY,EAAErpC,WAAW,CAAC7F,IAAI,CAAC;IACnF,OAAO;MACLgvC,KAAK;MACLC;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOE,sBAAsBA,CAACtpC,WAAW,EAAE;IACzC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM;MACJuF;IACF,CAAC,GAAGsU,YAAY,CAAC2yB,kCAAkC,CAACM,gBAAgB,EAAEvpC,WAAW,CAAC7F,IAAI,CAAC;IACvF,OAAO;MACL6H;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOwnC,yBAAyBA,CAACxpC,WAAW,EAAE;IAC5C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM;MACJ0sC;IACF,CAAC,GAAG7yB,YAAY,CAAC2yB,kCAAkC,CAACQ,mBAAmB,EAAEzpC,WAAW,CAAC7F,IAAI,CAAC;IAC1F,OAAO;MACLgvC;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOO,yBAAyBA,CAAC1pC,WAAW,EAAE;IAC5C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM;MACJktC;IACF,CAAC,GAAGrzB,YAAY,CAAC2yB,kCAAkC,CAACW,mBAAmB,EAAE5pC,WAAW,CAAC7F,IAAI,CAAC;IAC1F,OAAO;MACLwvC;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOpyB,cAAcA,CAAC9a,SAAS,EAAE;IAC/B,IAAI,CAACA,SAAS,CAACjB,MAAM,CAACquC,oBAAoB,CAACptC,SAAS,CAAC,EAAE;MACrD,MAAM,IAAIhC,KAAK,CAAC,4DAA4D,CAAC;IAC/E;EACF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMwuC,kCAAkC,GAAGnvC,MAAM,CAACmgB,MAAM,CAAC;EACvDovB,YAAY,EAAE;IACZ9pC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,aAAa,CAAC,EAAE7K,YAAY,CAACgK,GAAG,CAAC,OAAO,CAAC,EAAEhK,YAAY,CAACgK,GAAG,CAAC,eAAe,CAAC,CAAC;EAC5H,CAAC;EACD+oC,gBAAgB,EAAE;IAChBhqC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,aAAa,CAAC,EAAE7K,YAAY,CAACgK,GAAG,CAAC,OAAO,CAAC,CAAC;EACzF,CAAC;EACDipC,mBAAmB,EAAE;IACnBlqC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,aAAa,CAAC,EAAE7K,YAAY,CAACgK,GAAG,CAAC,OAAO,CAAC,CAAC;EACzF,CAAC;EACDopC,mBAAmB,EAAE;IACnBrqC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,aAAa,CAAC,EAAE2V,GAAG,CAAC,eAAe,CAAC,CAAC;EACpF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM6yB,oBAAoB,CAAC;EACzB;AACF;AACA;EACEjwC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;EACE,OAAOkwC,YAAYA,CAAC1vB,MAAM,EAAE;IAC1B,MAAMljB,IAAI,GAAG+xC,kCAAkC,CAACI,YAAY;IAC5D,MAAMlvC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAEkjB,MAAM,CAAC;IACrC,OAAO,IAAIhP,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;EACA,OAAO4vC,gBAAgBA,CAAC3vB,MAAM,EAAE;IAC9B,MAAMljB,IAAI,GAAG+xC,kCAAkC,CAACM,gBAAgB;IAChE,MAAMpvC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAEkjB,MAAM,CAAC;IACrC,OAAO,IAAIhP,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;EACA,OAAO6vC,mBAAmBA,CAAC5vB,MAAM,EAAE;IACjC,MAAMljB,IAAI,GAAG+xC,kCAAkC,CAACQ,mBAAmB;IACnE,MAAMtvC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAEkjB,MAAM,CAAC;IACrC,OAAO,IAAIhP,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;EACA,OAAO8vC,mBAAmBA,CAAC7vB,MAAM,EAAE;IACjC,MAAMljB,IAAI,GAAG+xC,kCAAkC,CAACW,mBAAmB;IACnE,MAAMzvC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5ByyC,aAAa,EAAErvB,MAAM,CAACF,MAAM,CAACuvB,aAAa;IAC5C,CAAC,CAAC;IACF,OAAO,IAAIv+B,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;AACF;AACA0vC,oBAAoB,CAACptC,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;AAE7F,MAAM6uC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,kBAAkB,GAAG,EAAE;AAC7B,MAAMC,eAAe,GAAG,EAAE;;AAE1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMC,0BAA0B,GAAG7zC,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,eAAe,CAAC,EAAE7K,YAAY,CAAC6K,EAAE,CAAC,SAAS,CAAC,EAAE7K,YAAY,CAAC8zC,GAAG,CAAC,iBAAiB,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,2BAA2B,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,iBAAiB,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,2BAA2B,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,mBAAmB,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,iBAAiB,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;AACvZ,MAAMC,cAAc,CAAC;EACnB;AACF;AACA;EACE3wC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,OAAO4wC,8BAA8BA,CAACpwB,MAAM,EAAE;IAC5C,MAAM;MACJ5hB,SAAS;MACTS,OAAO;MACPuF,SAAS;MACTisC;IACF,CAAC,GAAGrwB,MAAM;IACVxiB,MAAM,CAACY,SAAS,CAACgC,MAAM,KAAK2vC,kBAAkB,EAAE,sBAAsBA,kBAAkB,uBAAuB3xC,SAAS,CAACgC,MAAM,QAAQ,CAAC;IACxI5C,MAAM,CAAC4G,SAAS,CAAChE,MAAM,KAAK4vC,eAAe,EAAE,qBAAqBA,eAAe,uBAAuB5rC,SAAS,CAAChE,MAAM,QAAQ,CAAC;IACjI,MAAMkwC,eAAe,GAAGL,0BAA0B,CAACrpC,IAAI;IACvD,MAAM2pC,eAAe,GAAGD,eAAe,GAAGlyC,SAAS,CAACgC,MAAM;IAC1D,MAAMowC,iBAAiB,GAAGD,eAAe,GAAGnsC,SAAS,CAAChE,MAAM;IAC5D,MAAMqwC,aAAa,GAAG,CAAC;IACvB,MAAMlwB,eAAe,GAAG3kB,MAAM,CAACiG,KAAK,CAAC2uC,iBAAiB,GAAG3xC,OAAO,CAACuB,MAAM,CAAC;IACxE,MAAM+E,KAAK,GAAGkrC,gBAAgB,IAAI,IAAI,GAAG,MAAM,CAAC;IAAA,EAC9CA,gBAAgB;IAClBJ,0BAA0B,CAACrwC,MAAM,CAAC;MAChC6wC,aAAa;MACbC,OAAO,EAAE,CAAC;MACVH,eAAe;MACfI,yBAAyB,EAAExrC,KAAK;MAChCmrC,eAAe;MACfM,yBAAyB,EAAEzrC,KAAK;MAChCqrC,iBAAiB;MACjBK,eAAe,EAAEhyC,OAAO,CAACuB,MAAM;MAC/B0wC,uBAAuB,EAAE3rC;IAC3B,CAAC,EAAEob,eAAe,CAAC;IACnBA,eAAe,CAACxP,IAAI,CAAC3S,SAAS,EAAEkyC,eAAe,CAAC;IAChD/vB,eAAe,CAACxP,IAAI,CAAC3M,SAAS,EAAEmsC,eAAe,CAAC;IAChDhwB,eAAe,CAACxP,IAAI,CAAClS,OAAO,EAAE2xC,iBAAiB,CAAC;IAChD,OAAO,IAAIx/B,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAE8tC,cAAc,CAAC9tC,SAAS;MACnCtC,IAAI,EAAEwgB;IACR,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOwwB,+BAA+BA,CAAC/wB,MAAM,EAAE;IAC7C,MAAM;MACJgxB,UAAU;MACVnyC,OAAO;MACPwxC;IACF,CAAC,GAAGrwB,MAAM;IACVxiB,MAAM,CAACwzC,UAAU,CAAC5wC,MAAM,KAAK0vC,mBAAmB,EAAE,uBAAuBA,mBAAmB,uBAAuBkB,UAAU,CAAC5wC,MAAM,QAAQ,CAAC;IAC7I,IAAI;MACF,MAAMusC,OAAO,GAAGD,OAAO,CAACI,aAAa,CAACkE,UAAU,CAAC;MACjD,MAAM5yC,SAAS,GAAGuuC,OAAO,CAACvuC,SAAS,CAACmD,OAAO,CAAC,CAAC;MAC7C,MAAM6C,SAAS,GAAGxF,IAAI,CAACC,OAAO,EAAE8tC,OAAO,CAACruC,SAAS,CAAC;MAClD,OAAO,IAAI,CAAC8xC,8BAA8B,CAAC;QACzChyC,SAAS;QACTS,OAAO;QACPuF,SAAS;QACTisC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO5uB,KAAK,EAAE;MACd,MAAM,IAAIphB,KAAK,CAAC,+BAA+BohB,KAAK,EAAE,CAAC;IACzD;EACF;AACF;AACA0uB,cAAc,CAAC9tC,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;AAEvF,MAAMgwC,SAAS,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EACtC,MAAM/sC,SAAS,GAAGtG,SAAS,CAACc,IAAI,CAACsyC,OAAO,EAAEC,OAAO,CAAC;EAClD,OAAO,CAAC/sC,SAAS,CAACgtC,iBAAiB,CAAC,CAAC,EAAEhtC,SAAS,CAACitC,QAAQ,CAAC;AAC5D,CAAC;AACDvzC,SAAS,CAACE,KAAK,CAACszC,iBAAiB;AACjC,MAAMC,eAAe,GAAGzzC,SAAS,CAACO,YAAY;AAE9C,MAAMmzC,iBAAiB,GAAG,EAAE;AAC5B,MAAMC,sBAAsB,GAAG,EAAE;AACjC,MAAMC,gBAAgB,GAAG,EAAE;AAC3B,MAAMC,iCAAiC,GAAG,EAAE;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMC,4BAA4B,GAAGx1C,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAAC6K,EAAE,CAAC,eAAe,CAAC,EAAE7K,YAAY,CAAC8zC,GAAG,CAAC,iBAAiB,CAAC,EAAE9zC,YAAY,CAAC6K,EAAE,CAAC,2BAA2B,CAAC,EAAE7K,YAAY,CAAC8zC,GAAG,CAAC,kBAAkB,CAAC,EAAE9zC,YAAY,CAAC6K,EAAE,CAAC,4BAA4B,CAAC,EAAE7K,YAAY,CAAC8zC,GAAG,CAAC,mBAAmB,CAAC,EAAE9zC,YAAY,CAAC8zC,GAAG,CAAC,iBAAiB,CAAC,EAAE9zC,YAAY,CAAC6K,EAAE,CAAC,yBAAyB,CAAC,EAAE7K,YAAY,CAACC,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,EAAED,YAAY,CAACC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,EAAED,YAAY,CAAC6K,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;AACpe,MAAM4qC,gBAAgB,CAAC;EACrB;AACF;AACA;EACEryC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;AACA;EACE,OAAOsyC,qBAAqBA,CAAC1zC,SAAS,EAAE;IACtCZ,MAAM,CAACY,SAAS,CAACgC,MAAM,KAAKsxC,gBAAgB,EAAE,sBAAsBA,gBAAgB,uBAAuBtzC,SAAS,CAACgC,MAAM,QAAQ,CAAC;IACpI,IAAI;MACF,OAAOxE,MAAM,CAACuD,IAAI,CAACtB,UAAU,CAACmB,QAAQ,CAACZ,SAAS,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,CAAC2yC,sBAAsB,CAAC;IACpF,CAAC,CAAC,OAAOhwB,KAAK,EAAE;MACd,MAAM,IAAIphB,KAAK,CAAC,wCAAwCohB,KAAK,EAAE,CAAC;IAClE;EACF;;EAEA;AACF;AACA;AACA;EACE,OAAO2uB,8BAA8BA,CAACpwB,MAAM,EAAE;IAC5C,MAAM;MACJ5hB,SAAS;MACTS,OAAO;MACPuF,SAAS;MACT2tC,UAAU;MACV1B;IACF,CAAC,GAAGrwB,MAAM;IACV,OAAO6xB,gBAAgB,CAACG,+BAA+B,CAAC;MACtDC,UAAU,EAAEJ,gBAAgB,CAACC,qBAAqB,CAAC1zC,SAAS,CAAC;MAC7DS,OAAO;MACPuF,SAAS;MACT2tC,UAAU;MACV1B;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAO2B,+BAA+BA,CAAChyB,MAAM,EAAE;IAC7C,MAAM;MACJiyB,UAAU,EAAEC,UAAU;MACtBrzC,OAAO;MACPuF,SAAS;MACT2tC,UAAU;MACV1B,gBAAgB,GAAG;IACrB,CAAC,GAAGrwB,MAAM;IACV,IAAIiyB,UAAU;IACd,IAAI,OAAOC,UAAU,KAAK,QAAQ,EAAE;MAClC,IAAIA,UAAU,CAACvqB,UAAU,CAAC,IAAI,CAAC,EAAE;QAC/BsqB,UAAU,GAAGr2C,MAAM,CAACuD,IAAI,CAAC+yC,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACvD,CAAC,MAAM;QACLF,UAAU,GAAGr2C,MAAM,CAACuD,IAAI,CAAC+yC,UAAU,EAAE,KAAK,CAAC;MAC7C;IACF,CAAC,MAAM;MACLD,UAAU,GAAGC,UAAU;IACzB;IACA10C,MAAM,CAACy0C,UAAU,CAAC7xC,MAAM,KAAKqxC,sBAAsB,EAAE,mBAAmBA,sBAAsB,uBAAuBQ,UAAU,CAAC7xC,MAAM,QAAQ,CAAC;IAC/I,MAAMgyC,SAAS,GAAG,CAAC,GAAGT,iCAAiC;IACvD,MAAMU,gBAAgB,GAAGD,SAAS;IAClC,MAAM7B,eAAe,GAAG6B,SAAS,GAAGH,UAAU,CAAC7xC,MAAM;IACrD,MAAMowC,iBAAiB,GAAGD,eAAe,GAAGnsC,SAAS,CAAChE,MAAM,GAAG,CAAC;IAChE,MAAMqwC,aAAa,GAAG,CAAC;IACvB,MAAMlwB,eAAe,GAAG3kB,MAAM,CAACiG,KAAK,CAAC+vC,4BAA4B,CAAChrC,IAAI,GAAG/H,OAAO,CAACuB,MAAM,CAAC;IACxFwxC,4BAA4B,CAAChyC,MAAM,CAAC;MAClC6wC,aAAa;MACbF,eAAe;MACfI,yBAAyB,EAAEN,gBAAgB;MAC3CgC,gBAAgB;MAChBC,0BAA0B,EAAEjC,gBAAgB;MAC5CG,iBAAiB;MACjBK,eAAe,EAAEhyC,OAAO,CAACuB,MAAM;MAC/B0wC,uBAAuB,EAAET,gBAAgB;MACzCjsC,SAAS,EAAEpF,QAAQ,CAACoF,SAAS,CAAC;MAC9B6tC,UAAU,EAAEjzC,QAAQ,CAACizC,UAAU,CAAC;MAChCF;IACF,CAAC,EAAExxB,eAAe,CAAC;IACnBA,eAAe,CAACxP,IAAI,CAAC/R,QAAQ,CAACH,OAAO,CAAC,EAAE+yC,4BAA4B,CAAChrC,IAAI,CAAC;IAC1E,OAAO,IAAIoK,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,EAAE;MACRkC,SAAS,EAAEwvC,gBAAgB,CAACxvC,SAAS;MACrCtC,IAAI,EAAEwgB;IACR,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOwwB,+BAA+BA,CAAC/wB,MAAM,EAAE;IAC7C,MAAM;MACJgxB,UAAU,EAAEuB,IAAI;MAChB1zC,OAAO;MACPwxC;IACF,CAAC,GAAGrwB,MAAM;IACVxiB,MAAM,CAAC+0C,IAAI,CAACnyC,MAAM,KAAKoxC,iBAAiB,EAAE,uBAAuBA,iBAAiB,uBAAuBe,IAAI,CAACnyC,MAAM,QAAQ,CAAC;IAC7H,IAAI;MACF,MAAM4wC,UAAU,GAAGhyC,QAAQ,CAACuzC,IAAI,CAAC;MACjC,MAAMn0C,SAAS,GAAGmzC,eAAe,CAACP,UAAU,EAAE,KAAK,CAAC,kBAAkB,CAAC,CAAClyC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;MAClF,MAAM0zC,WAAW,GAAG52C,MAAM,CAACuD,IAAI,CAACtB,UAAU,CAACmB,QAAQ,CAACH,OAAO,CAAC,CAAC,CAAC;MAC9D,MAAM,CAACuF,SAAS,EAAE2tC,UAAU,CAAC,GAAGd,SAAS,CAACuB,WAAW,EAAExB,UAAU,CAAC;MAClE,OAAO,IAAI,CAACZ,8BAA8B,CAAC;QACzChyC,SAAS;QACTS,OAAO;QACPuF,SAAS;QACT2tC,UAAU;QACV1B;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO5uB,KAAK,EAAE;MACd,MAAM,IAAIphB,KAAK,CAAC,+BAA+BohB,KAAK,EAAE,CAAC;IACzD;EACF;AACF;AACAowB,gBAAgB,CAACxvC,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;AAEzF,IAAIwxC,OAAO;;AAEX;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAIzxC,SAAS,CAAC,6CAA6C,CAAC;;AAEpF;AACA;AACA;AACA,MAAM0xC,UAAU,CAAC;EACf;AACF;AACA;AACA;AACA;EACEnzC,WAAWA,CAACozC,MAAM,EAAEC,UAAU,EAAE;IAC9B;IACA,IAAI,CAACD,MAAM,GAAG,KAAK,CAAC;IACpB;IACA,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;AACF;AACA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACX;AACF;AACA;EACEtzC,WAAWA,CAACuzC,aAAa,EAAEruB,KAAK,EAAEsuB,SAAS,EAAE;IAC3C;IACA,IAAI,CAACD,aAAa,GAAG,KAAK,CAAC;IAC3B;IACA,IAAI,CAACruB,KAAK,GAAG,KAAK,CAAC;IACnB;IACA,IAAI,CAACsuB,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACruB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACsuB,SAAS,GAAGA,SAAS;EAC5B;;EAEA;AACF;AACA;AACA;AACAP,OAAO,GAAGK,MAAM;AAChBA,MAAM,CAACtvC,OAAO,GAAG,IAAIivC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAExxC,SAAS,CAACuC,OAAO,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyvC,gBAAgB,CAAC;EACrB;AACF;AACA;EACEzzC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;EACE,OAAO0d,qBAAqBA,CAACtX,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM+a,qBAAqB,GAAGhhB,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC;IAC7D,MAAMiX,SAAS,GAAGD,qBAAqB,CAACtd,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC;IAChE,IAAIjD,IAAI;IACR,KAAK,MAAM,CAACwgB,MAAM,EAAE5V,MAAM,CAAC,IAAIhI,MAAM,CAACwJ,OAAO,CAACgqC,yBAAyB,CAAC,EAAE;MACxE,IAAIxrC,MAAM,CAACvC,KAAK,IAAIkY,SAAS,EAAE;QAC7BvgB,IAAI,GAAGwgB,MAAM;QACb;MACF;IACF;IACA,IAAI,CAACxgB,IAAI,EAAE;MACT,MAAM,IAAIuD,KAAK,CAAC,oDAAoD,CAAC;IACvE;IACA,OAAOvD,IAAI;EACb;;EAEA;AACF;AACA;EACE,OAAOq2C,gBAAgBA,CAACvtC,WAAW,EAAE;IACnC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJ0G,UAAU;MACVC;IACF,CAAC,GAAGoV,YAAY,CAACg3B,yBAAyB,CAACE,UAAU,EAAExtC,WAAW,CAAC7F,IAAI,CAAC;IACxE,OAAO;MACLszC,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCsD,UAAU,EAAE,IAAI8rC,UAAU,CAAC,IAAI1xC,SAAS,CAAC4F,UAAU,CAAC+rC,MAAM,CAAC,EAAE,IAAI3xC,SAAS,CAAC4F,UAAU,CAACgsC,UAAU,CAAC,CAAC;MAClG/rC,MAAM,EAAE,IAAIgsC,MAAM,CAAChsC,MAAM,CAACisC,aAAa,EAAEjsC,MAAM,CAAC4d,KAAK,EAAE,IAAIzjB,SAAS,CAAC6F,MAAM,CAACksC,SAAS,CAAC;IACxF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOM,cAAcA,CAAC1tC,WAAW,EAAE;IACjC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC+b,YAAY,CAACg3B,yBAAyB,CAACK,QAAQ,EAAE3tC,WAAW,CAAC7F,IAAI,CAAC;IAClE,OAAO;MACLszC,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCsuB,UAAU,EAAEjsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACxC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOiwC,eAAeA,CAAC5tC,WAAW,EAAE;IAClC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJszC,aAAa;MACbC;IACF,CAAC,GAAGx3B,YAAY,CAACg3B,yBAAyB,CAACS,SAAS,EAAE/tC,WAAW,CAAC7F,IAAI,CAAC;IACvE,MAAM6zC,CAAC,GAAG;MACRP,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cmc,mBAAmB,EAAE,IAAIze,SAAS,CAACwyC,aAAa,CAAC;MACjDC,sBAAsB,EAAE;QACtBvuC,KAAK,EAAEuuC;MACT;IACF,CAAC;IACD,IAAI9tC,WAAW,CAACzF,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/BwzC,CAAC,CAACC,eAAe,GAAGjuC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;IAChD;IACA,OAAOqwC,CAAC;EACV;;EAEA;AACF;AACA;EACE,OAAOE,uBAAuBA,CAACluC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJszC,aAAa;MACbC,sBAAsB;MACtBK,aAAa;MACbC;IACF,CAAC,GAAG93B,YAAY,CAACg3B,yBAAyB,CAACe,iBAAiB,EAAEruC,WAAW,CAAC7F,IAAI,CAAC;IAC/E,MAAM6zC,CAAC,GAAG;MACRP,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC2wC,aAAa,EAAEtuC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACzCwwC,aAAa,EAAEA,aAAa;MAC5BC,cAAc,EAAE,IAAI/yC,SAAS,CAAC+yC,cAAc,CAAC;MAC7Ct0B,mBAAmB,EAAE,IAAIze,SAAS,CAACwyC,aAAa,CAAC;MACjDC,sBAAsB,EAAE;QACtBvuC,KAAK,EAAEuuC;MACT;IACF,CAAC;IACD,IAAI9tC,WAAW,CAACzF,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/BwzC,CAAC,CAACC,eAAe,GAAGjuC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;IAChD;IACA,OAAOqwC,CAAC;EACV;;EAEA;AACF;AACA;EACE,OAAOO,WAAWA,CAACvuC,WAAW,EAAE;IAC9B,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud;IACF,CAAC,GAAGxB,YAAY,CAACg3B,yBAAyB,CAACkB,KAAK,EAAExuC,WAAW,CAAC7F,IAAI,CAAC;IACnE,OAAO;MACLszC,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC8wC,gBAAgB,EAAEzuC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5CiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cma;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO42B,WAAWA,CAAC1uC,WAAW,EAAE;IAC9B,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC+b,YAAY,CAACg3B,yBAAyB,CAACqB,KAAK,EAAE3uC,WAAW,CAAC7F,IAAI,CAAC;IAC/D,OAAO;MACLszC,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCixC,iBAAiB,EAAE5uC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC7CiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACxC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOkxC,cAAcA,CAAC7uC,WAAW,EAAE;IACjC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud;IACF,CAAC,GAAGxB,YAAY,CAACg3B,yBAAyB,CAACwB,QAAQ,EAAE9uC,WAAW,CAAC7F,IAAI,CAAC;IACtE,MAAM6zC,CAAC,GAAG;MACRP,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvC0a,QAAQ,EAAErY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACpCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cma;IACF,CAAC;IACD,IAAI9X,WAAW,CAACzF,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/BwzC,CAAC,CAACC,eAAe,GAAGjuC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;IAChD;IACA,OAAOqwC,CAAC;EACV;;EAEA;AACF;AACA;EACE,OAAOe,gBAAgBA,CAAC/uC,WAAW,EAAE;IACnC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC+b,YAAY,CAACg3B,yBAAyB,CAAC0B,UAAU,EAAEhvC,WAAW,CAAC7F,IAAI,CAAC;IACpE,OAAO;MACLszC,WAAW,EAAEztC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACvCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IACxC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO4Z,cAAcA,CAAC9a,SAAS,EAAE;IAC/B,IAAI,CAACA,SAAS,CAACjB,MAAM,CAACyzC,YAAY,CAACxyC,SAAS,CAAC,EAAE;MAC7C,MAAM,IAAIhC,KAAK,CAAC,oDAAoD,CAAC;IACvE;EACF;;EAEA;AACF;AACA;EACE,OAAOod,cAAcA,CAACtd,IAAI,EAAEyf,cAAc,EAAE;IAC1C,IAAIzf,IAAI,CAACC,MAAM,GAAGwf,cAAc,EAAE;MAChC,MAAM,IAAIvf,KAAK,CAAC,8BAA8BF,IAAI,CAACC,MAAM,4BAA4Bwf,cAAc,EAAE,CAAC;IACxG;EACF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMszB,yBAAyB,GAAGxzC,MAAM,CAACmgB,MAAM,CAAC;EAC9CuzB,UAAU,EAAE;IACVjuC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAES,UAAU,CAAC,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC;EACvF,CAAC;EACD6sC,SAAS,EAAE;IACTxuC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,eAAe,CAAC,EAAEhC,YAAY,CAACgK,GAAG,CAAC,wBAAwB,CAAC,CAAC;EACvI,CAAC;EACDmtC,QAAQ,EAAE;IACRpuC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACDguC,KAAK,EAAE;IACLjvC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,CAAC;EAC9F,CAAC;EACD2tC,QAAQ,EAAE;IACRvvC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,CAAC;EAC9F,CAAC;EACD6tC,UAAU,EAAE;IACVzvC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACDmuC,KAAK,EAAE;IACLpvC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACD6tC,iBAAiB,EAAE;IACjB9uC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,eAAe,CAAC,EAAEhC,YAAY,CAACgK,GAAG,CAAC,wBAAwB,CAAC,EAAEH,UAAU,CAAC,eAAe,CAAC,EAAE7H,SAAS,CAAC,gBAAgB,CAAC,CAAC;EACjM;AACF,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM02C,wBAAwB,GAAGp1C,MAAM,CAACmgB,MAAM,CAAC;EAC7Ck1B,MAAM,EAAE;IACN5vC,KAAK,EAAE;EACT,CAAC;EACD6vC,UAAU,EAAE;IACV7vC,KAAK,EAAE;EACT;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM0vC,YAAY,CAAC;EACjB;AACF;AACA;EACEr1C,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;EACE,OAAOy1C,UAAUA,CAACj1B,MAAM,EAAE;IACxB,MAAM;MACJqzB,WAAW;MACXxsC,UAAU;MACVC,MAAM,EAAEouC;IACV,CAAC,GAAGl1B,MAAM;IACV,MAAMlZ,MAAM,GAAGouC,WAAW,IAAIpC,MAAM,CAACtvC,OAAO;IAC5C,MAAM1G,IAAI,GAAGo2C,yBAAyB,CAACE,UAAU;IACjD,MAAMrzC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B+J,UAAU,EAAE;QACV+rC,MAAM,EAAE5zC,QAAQ,CAAC6H,UAAU,CAAC+rC,MAAM,CAAC5zC,QAAQ,CAAC,CAAC,CAAC;QAC9C6zC,UAAU,EAAE7zC,QAAQ,CAAC6H,UAAU,CAACgsC,UAAU,CAAC7zC,QAAQ,CAAC,CAAC;MACvD,CAAC;MACD8H,MAAM,EAAE;QACNisC,aAAa,EAAEjsC,MAAM,CAACisC,aAAa;QACnCruB,KAAK,EAAE5d,MAAM,CAAC4d,KAAK;QACnBsuB,SAAS,EAAEh0C,QAAQ,CAAC8H,MAAM,CAACksC,SAAS,CAACh0C,QAAQ,CAAC,CAAC;MACjD;IACF,CAAC,CAAC;IACF,MAAMuhB,eAAe,GAAG;MACtBpgB,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAE8vC,WAAW;QACnB3qC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEoU,kBAAkB;QAC1BjP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC;IACD,OAAO,IAAIiR,sBAAsB,CAACuP,eAAe,CAAC;EACpD;;EAEA;AACF;AACA;AACA;EACE,OAAOJ,qBAAqBA,CAACH,MAAM,EAAE;IACnC,MAAMrS,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACQ,qBAAqB,CAAC;MAClDtC,UAAU,EAAEmC,MAAM,CAACnC,UAAU;MAC7BC,gBAAgB,EAAEkC,MAAM,CAACqzB,WAAW;MACpCj1B,UAAU,EAAE4B,MAAM,CAAC5B,UAAU;MAC7Bhc,IAAI,EAAE4d,MAAM,CAAC5d,IAAI;MACjBsb,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;MACzBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtb,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC,CAAC;IACH,MAAM;MACJgxC,WAAW;MACXxsC,UAAU;MACVC;IACF,CAAC,GAAGkZ,MAAM;IACV,OAAOrS,WAAW,CAACqE,GAAG,CAAC,IAAI,CAACijC,UAAU,CAAC;MACrC5B,WAAW;MACXxsC,UAAU;MACVC;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE,OAAOiZ,aAAaA,CAACC,MAAM,EAAE;IAC3B,MAAMrS,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACI,aAAa,CAAC;MAC1ClC,UAAU,EAAEmC,MAAM,CAACnC,UAAU;MAC7BC,gBAAgB,EAAEkC,MAAM,CAACqzB,WAAW;MACpC31B,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;MACzBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtb,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC,CAAC;IACH,MAAM;MACJgxC,WAAW;MACXxsC,UAAU;MACVC;IACF,CAAC,GAAGkZ,MAAM;IACV,OAAOrS,WAAW,CAACqE,GAAG,CAAC,IAAI,CAACijC,UAAU,CAAC;MACrC5B,WAAW;MACXxsC,UAAU;MACVC;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOquC,QAAQA,CAACn1B,MAAM,EAAE;IACtB,MAAM;MACJqzB,WAAW;MACX72B,gBAAgB;MAChBqV;IACF,CAAC,GAAG7R,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACK,QAAQ;IAC/C,MAAMxzC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,OAAO,IAAIoU,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAE8vC,WAAW;QACnB3qC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEsuB,UAAU;QAClBnpB,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEgU,mBAAmB;QAC3B7O,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEwU,2BAA2B;QACnCrP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEmvC,eAAe;QACvBhqC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEiZ,gBAAgB;QACxB9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOq1C,SAASA,CAACp1B,MAAM,EAAE;IACvB,MAAM;MACJqzB,WAAW;MACX72B,gBAAgB;MAChBkD,mBAAmB;MACnBg0B,sBAAsB;MACtBG;IACF,CAAC,GAAG7zB,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACS,SAAS;IAChD,MAAM5zC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B22C,aAAa,EAAEz0C,QAAQ,CAAC0gB,mBAAmB,CAAC1gB,QAAQ,CAAC,CAAC,CAAC;MACvD00C,sBAAsB,EAAEA,sBAAsB,CAACvuC;IACjD,CAAC,CAAC;IACF,MAAMhF,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAE8vC,WAAW;MACnB3qC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgU,mBAAmB;MAC3B7O,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEiZ,gBAAgB;MACxB9T,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIkrC,eAAe,EAAE;MACnB1zC,IAAI,CAAC4E,IAAI,CAAC;QACRxB,MAAM,EAAEswC,eAAe;QACvBnrC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOs1C,iBAAiBA,CAACr1B,MAAM,EAAE;IAC/B,MAAM;MACJqzB,WAAW;MACXa,aAAa;MACbH,aAAa;MACbC,cAAc;MACdt0B,mBAAmB;MACnBg0B,sBAAsB;MACtBG;IACF,CAAC,GAAG7zB,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACe,iBAAiB;IACxD,MAAMl0C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B22C,aAAa,EAAEz0C,QAAQ,CAAC0gB,mBAAmB,CAAC1gB,QAAQ,CAAC,CAAC,CAAC;MACvD00C,sBAAsB,EAAEA,sBAAsB,CAACvuC,KAAK;MACpD4uC,aAAa,EAAEA,aAAa;MAC5BC,cAAc,EAAEh1C,QAAQ,CAACg1C,cAAc,CAACh1C,QAAQ,CAAC,CAAC;IACpD,CAAC,CAAC;IACF,MAAMmB,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAE8vC,WAAW;MACnB3qC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAE2wC,aAAa;MACrBxrC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgU,mBAAmB;MAC3B7O,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIkrC,eAAe,EAAE;MACnB1zC,IAAI,CAAC4E,IAAI,CAAC;QACRxB,MAAM,EAAEswC,eAAe;QACvBnrC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAOu1C,gBAAgBA,CAACt1B,MAAM,EAAE;IAC9B,MAAM;MACJqzB,WAAW;MACX72B,gBAAgB;MAChB63B,gBAAgB;MAChB32B;IACF,CAAC,GAAGsC,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACkB,KAAK;IAC5C,MAAMr0C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B4gB;IACF,CAAC,CAAC;IACF,OAAO,IAAI1M,sBAAsB,CAAC;MAChC7Q,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAE8vC,WAAW;QACnB3qC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAE8wC,gBAAgB;QACxB3rC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEiZ,gBAAgB;QACxB9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAOw1C,KAAKA,CAACv1B,MAAM;EACnB;EACAw1B,iBAAiB,EAAE;IACjB,MAAM7nC,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACI,aAAa,CAAC;MAC1ClC,UAAU,EAAEmC,MAAM,CAACxD,gBAAgB;MACnCsB,gBAAgB,EAAEkC,MAAM,CAACq0B,gBAAgB;MACzC32B,QAAQ,EAAE83B,iBAAiB;MAC3B73B,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtb,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC,CAAC;IACH,OAAOsL,WAAW,CAACqE,GAAG,CAAC,IAAI,CAACsjC,gBAAgB,CAACt1B,MAAM,CAAC,CAAC;EACvD;;EAEA;AACF;AACA;AACA;EACE,OAAOy1B,aAAaA,CAACz1B,MAAM;EAC3B;EACAw1B,iBAAiB,EAAE;IACjB,MAAM;MACJnC,WAAW;MACX72B,gBAAgB;MAChB63B,gBAAgB;MAChBj2B,UAAU;MACVhc,IAAI;MACJsb;IACF,CAAC,GAAGsC,MAAM;IACV,MAAMrS,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACgB,QAAQ,CAAC;MACrCpC,aAAa,EAAE81B,gBAAgB;MAC/Bj2B,UAAU;MACVhc,IAAI;MACJub,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtb,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC,CAAC;IACH,IAAImzC,iBAAiB,IAAIA,iBAAiB,GAAG,CAAC,EAAE;MAC9C7nC,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACM,QAAQ,CAAC;QACrCpC,UAAU,EAAEmC,MAAM,CAACxD,gBAAgB;QACnCyB,QAAQ,EAAEo2B,gBAAgB;QAC1B32B,QAAQ,EAAE83B;MACZ,CAAC,CAAC,CAAC;IACL;IACA,OAAO7nC,WAAW,CAACqE,GAAG,CAAC,IAAI,CAACsjC,gBAAgB,CAAC;MAC3CjC,WAAW;MACX72B,gBAAgB;MAChB63B,gBAAgB;MAChB32B;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE,OAAOg4B,KAAKA,CAAC11B,MAAM,EAAE;IACnB,MAAM;MACJqzB,WAAW;MACXmB,iBAAiB;MACjBh4B;IACF,CAAC,GAAGwD,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACqB,KAAK;IAC5C,MAAMx0C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,OAAO,IAAIoU,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAE8vC,WAAW;QACnB3qC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEixC,iBAAiB;QACzB9rC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEgU,mBAAmB;QAC3B7O,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEwU,2BAA2B;QACnCrP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEiZ,gBAAgB;QACxB9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAO41C,QAAQA,CAAC31B,MAAM,EAAE;IACtB,MAAM;MACJqzB,WAAW;MACX72B,gBAAgB;MAChByB,QAAQ;MACRP,QAAQ;MACRm2B;IACF,CAAC,GAAG7zB,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAACwB,QAAQ;IAC/C,MAAM30C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B4gB;IACF,CAAC,CAAC;IACF,MAAMvd,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAE8vC,WAAW;MACnB3qC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAE0a,QAAQ;MAChBvV,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgU,mBAAmB;MAC3B7O,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEwU,2BAA2B;MACnCrP,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEiZ,gBAAgB;MACxB9T,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIkrC,eAAe,EAAE;MACnB1zC,IAAI,CAAC4E,IAAI,CAAC;QACRxB,MAAM,EAAEswC,eAAe;QACvBnrC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;IACJ;IACA,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAO61C,UAAUA,CAAC51B,MAAM,EAAE;IACxB,MAAM;MACJqzB,WAAW;MACX72B;IACF,CAAC,GAAGwD,MAAM;IACV,MAAMljB,IAAI,GAAGo2C,yBAAyB,CAAC0B,UAAU;IACjD,MAAM70C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,OAAO,IAAIoU,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAE8vC,WAAW;QACnB3qC,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEgU,mBAAmB;QAC3B7O,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEiZ,gBAAgB;QACxB9T,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;AACF;AACA80C,YAAY,CAACxyC,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA4zC,YAAY,CAACl3B,KAAK,GAAG,GAAG;;AAExB;AACA;AACA;AACA,MAAMk4B,QAAQ,CAAC;EACb;;EAEAr2C,WAAWA,CAACsyB,UAAU,EAAEgkB,eAAe,EAAEC,oBAAoB,EAAE5rB,UAAU,EAAE;IACzE,IAAI,CAAC2H,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACgkB,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACC,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAAC5rB,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAAC2H,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACgkB,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAAC5rB,UAAU,GAAGA,UAAU;EAC9B;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM6rB,eAAe,CAAC;EACpB;AACF;AACA;EACEx2C,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;EACE,OAAO0d,qBAAqBA,CAACtX,WAAW,EAAE;IACxC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,MAAM+a,qBAAqB,GAAGhhB,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC;IAC7D,MAAMiX,SAAS,GAAGD,qBAAqB,CAACtd,MAAM,CAAC8F,WAAW,CAAC7F,IAAI,CAAC;IAChE,IAAIjD,IAAI;IACR,KAAK,MAAM,CAACwgB,MAAM,EAAE5V,MAAM,CAAC,IAAIhI,MAAM,CAACwJ,OAAO,CAAC+sC,wBAAwB,CAAC,EAAE;MACvE,IAAIvuC,MAAM,CAACvC,KAAK,IAAIkY,SAAS,EAAE;QAC7BvgB,IAAI,GAAGwgB,MAAM;QACb;MACF;IACF;IACA,IAAI,CAACxgB,IAAI,EAAE;MACT,MAAM,IAAIuD,KAAK,CAAC,mDAAmD,CAAC;IACtE;IACA,OAAOvD,IAAI;EACb;;EAEA;AACF;AACA;EACE,OAAOo5C,uBAAuBA,CAACtwC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJ6G;IACF,CAAC,GAAGkV,YAAY,CAAC+5B,wBAAwB,CAACE,iBAAiB,EAAEvwC,WAAW,CAAC7F,IAAI,CAAC;IAC9E,OAAO;MACL8xB,UAAU,EAAEjsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCuuB,UAAU,EAAElsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCyD,QAAQ,EAAE,IAAI6uC,QAAQ,CAAC,IAAI50C,SAAS,CAAC+F,QAAQ,CAAC8qB,UAAU,CAAC,EAAE,IAAI7wB,SAAS,CAAC+F,QAAQ,CAAC8uC,eAAe,CAAC,EAAE,IAAI70C,SAAS,CAAC+F,QAAQ,CAAC+uC,oBAAoB,CAAC,EAAE/uC,QAAQ,CAACmjB,UAAU;IACvK,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOqpB,eAAeA,CAAC5tC,WAAW,EAAE;IAClC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJszC,aAAa;MACb2C;IACF,CAAC,GAAGl6B,YAAY,CAAC+5B,wBAAwB,CAACtC,SAAS,EAAE/tC,WAAW,CAAC7F,IAAI,CAAC;IACtE,OAAO;MACL8xB,UAAU,EAAEjsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCiZ,gBAAgB,EAAE5W,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAC5Cmc,mBAAmB,EAAE,IAAIze,SAAS,CAACwyC,aAAa,CAAC;MACjD2C,qBAAqB,EAAE;QACrBjxC,KAAK,EAAEixC;MACT;IACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOtC,uBAAuBA,CAACluC,WAAW,EAAE;IAC1C,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJ+G,yBAAyB,EAAE;QACzBmvC,qCAAqC;QACrCC,8BAA8B;QAC9B7C,aAAa;QACb2C;MACF;IACF,CAAC,GAAGl6B,YAAY,CAAC+5B,wBAAwB,CAAChC,iBAAiB,EAAEruC,WAAW,CAAC7F,IAAI,CAAC;IAC9E,OAAO;MACLw2C,oCAAoC,EAAE3wC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MAChE8yC,qCAAqC,EAAE,IAAIp1C,SAAS,CAACo1C,qCAAqC,CAAC;MAC3FC,8BAA8B,EAAEA,8BAA8B;MAC9D52B,mBAAmB,EAAE,IAAIze,SAAS,CAACwyC,aAAa,CAAC;MACjD2C,qBAAqB,EAAE;QACrBjxC,KAAK,EAAEixC;MACT,CAAC;MACDvkB,UAAU,EAAEjsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IAClC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAOkxC,cAAcA,CAAC7uC,WAAW,EAAE;IACjC,IAAI,CAACuX,cAAc,CAACvX,WAAW,CAACvD,SAAS,CAAC;IAC1C,IAAI,CAACob,cAAc,CAAC7X,WAAW,CAACzF,IAAI,EAAE,CAAC,CAAC;IACxC,MAAM;MACJud;IACF,CAAC,GAAGxB,YAAY,CAAC+5B,wBAAwB,CAACvB,QAAQ,EAAE9uC,WAAW,CAAC7F,IAAI,CAAC;IACrE,OAAO;MACL8xB,UAAU,EAAEjsB,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtCizC,0BAA0B,EAAE5wC,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD,MAAM;MACtDma,QAAQ;MACRO,QAAQ,EAAErY,WAAW,CAACzF,IAAI,CAAC,CAAC,CAAC,CAACoD;IAChC,CAAC;EACH;;EAEA;AACF;AACA;EACE,OAAO4Z,cAAcA,CAAC9a,SAAS,EAAE;IAC/B,IAAI,CAACA,SAAS,CAACjB,MAAM,CAACq1C,WAAW,CAACp0C,SAAS,CAAC,EAAE;MAC5C,MAAM,IAAIhC,KAAK,CAAC,mDAAmD,CAAC;IACtE;EACF;;EAEA;AACF;AACA;EACE,OAAOod,cAAcA,CAACtd,IAAI,EAAEyf,cAAc,EAAE;IAC1C,IAAIzf,IAAI,CAACC,MAAM,GAAGwf,cAAc,EAAE;MAChC,MAAM,IAAIvf,KAAK,CAAC,8BAA8BF,IAAI,CAACC,MAAM,4BAA4Bwf,cAAc,EAAE,CAAC;IACxG;EACF;AACF;;AAEA;AACA;AACA;;AAEA;;AAEA,MAAMq2B,wBAAwB,GAAGv2C,MAAM,CAACmgB,MAAM,CAAC;EAC7Cs2B,iBAAiB,EAAE;IACjBhxC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEY,QAAQ,CAAC,CAAC,CAAC;EAC3E,CAAC;EACD2sC,SAAS,EAAE;IACTxuC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhI,SAAS,CAAC,eAAe,CAAC,EAAEhC,YAAY,CAACgK,GAAG,CAAC,uBAAuB,CAAC,CAAC;EACtI,CAAC;EACDsuC,QAAQ,EAAE;IACRvvC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEhK,YAAY,CAAC2K,IAAI,CAAC,UAAU,CAAC,CAAC;EAC9F,CAAC;EACD2vC,uBAAuB,EAAE;IACvBvxC,KAAK,EAAE,CAAC;IACRuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,CAAC;EAC/D,CAAC;EACD6tC,iBAAiB,EAAE;IACjB9uC,KAAK,EAAE,EAAE;IACTuC,MAAM,EAAEtL,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACgK,GAAG,CAAC,aAAa,CAAC,EAAEc,yBAAyB,CAAC,CAAC,CAAC;EAC5F;AACF,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMyvC,uBAAuB,GAAGj3C,MAAM,CAACmgB,MAAM,CAAC;EAC5C+2B,KAAK,EAAE;IACLzxC,KAAK,EAAE;EACT,CAAC;EACD6vC,UAAU,EAAE;IACV7vC,KAAK,EAAE;EACT;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMsxC,WAAW,CAAC;EAChB;AACF;AACA;EACEj3C,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;;EAEE;AACF;AACA;EACE,OAAOq3C,iBAAiBA,CAAC72B,MAAM,EAAE;IAC/B,MAAM;MACJ6R,UAAU;MACVC,UAAU;MACV9qB;IACF,CAAC,GAAGgZ,MAAM;IACV,MAAMljB,IAAI,GAAGm5C,wBAAwB,CAACE,iBAAiB;IACvD,MAAMp2C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5BkK,QAAQ,EAAE;QACR8qB,UAAU,EAAE9yB,QAAQ,CAACgI,QAAQ,CAAC8qB,UAAU,CAAC9yB,QAAQ,CAAC,CAAC,CAAC;QACpD82C,eAAe,EAAE92C,QAAQ,CAACgI,QAAQ,CAAC8uC,eAAe,CAAC92C,QAAQ,CAAC,CAAC,CAAC;QAC9D+2C,oBAAoB,EAAE/2C,QAAQ,CAACgI,QAAQ,CAAC+uC,oBAAoB,CAAC/2C,QAAQ,CAAC,CAAC,CAAC;QACxEmrB,UAAU,EAAEnjB,QAAQ,CAACmjB;MACvB;IACF,CAAC,CAAC;IACF,MAAM5J,eAAe,GAAG;MACtBpgB,IAAI,EAAE,CAAC;QACLoD,MAAM,EAAEsuB,UAAU;QAClBnpB,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEoU,kBAAkB;QAC1BjP,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEgU,mBAAmB;QAC3B7O,QAAQ,EAAE,KAAK;QACfC,UAAU,EAAE;MACd,CAAC,EAAE;QACDpF,MAAM,EAAEuuB,UAAU;QAClBppB,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFtG,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC;IACD,OAAO,IAAIiR,sBAAsB,CAACuP,eAAe,CAAC;EACpD;;EAEA;AACF;AACA;EACE,OAAOR,aAAaA,CAACC,MAAM,EAAE;IAC3B,MAAMrS,WAAW,GAAG,IAAIuD,WAAW,CAAC,CAAC;IACrCvD,WAAW,CAACqE,GAAG,CAAC2N,aAAa,CAACI,aAAa,CAAC;MAC1ClC,UAAU,EAAEmC,MAAM,CAACnC,UAAU;MAC7BC,gBAAgB,EAAEkC,MAAM,CAAC6R,UAAU;MACnCnU,QAAQ,EAAEsC,MAAM,CAACtC,QAAQ;MACzBC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtb,SAAS,EAAE,IAAI,CAACA;IAClB,CAAC,CAAC,CAAC;IACH,OAAOsL,WAAW,CAACqE,GAAG,CAAC,IAAI,CAAC6kC,iBAAiB,CAAC;MAC5ChlB,UAAU,EAAE7R,MAAM,CAAC6R,UAAU;MAC7BC,UAAU,EAAE9R,MAAM,CAAChZ,QAAQ,CAAC8qB,UAAU;MACtC9qB,QAAQ,EAAEgZ,MAAM,CAAChZ;IACnB,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;EACE,OAAOouC,SAASA,CAACp1B,MAAM,EAAE;IACvB,MAAM;MACJ6R,UAAU;MACVrV,gBAAgB;MAChBkD,mBAAmB;MACnB02B;IACF,CAAC,GAAGp2B,MAAM;IACV,MAAMljB,IAAI,GAAGm5C,wBAAwB,CAACtC,SAAS;IAC/C,MAAM5zC,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B22C,aAAa,EAAEz0C,QAAQ,CAAC0gB,mBAAmB,CAAC1gB,QAAQ,CAAC,CAAC,CAAC;MACvDo3C,qBAAqB,EAAEA,qBAAqB,CAACjxC;IAC/C,CAAC,CAAC;IACF,MAAMhF,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEsuB,UAAU;MAClBnpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgU,mBAAmB;MAC3B7O,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEiZ,gBAAgB;MACxB9T,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,OAAOs1C,iBAAiBA,CAACr1B,MAAM,EAAE;IAC/B,MAAM;MACJu2B,oCAAoC;MACpCF,qCAAqC;MACrCC,8BAA8B;MAC9B52B,mBAAmB;MACnB02B,qBAAqB;MACrBvkB;IACF,CAAC,GAAG7R,MAAM;IACV,MAAMljB,IAAI,GAAGm5C,wBAAwB,CAAChC,iBAAiB;IACvD,MAAMl0C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5BoK,yBAAyB,EAAE;QACzBmvC,qCAAqC,EAAEr3C,QAAQ,CAACq3C,qCAAqC,CAACr3C,QAAQ,CAAC,CAAC,CAAC;QACjGs3C,8BAA8B,EAAEA,8BAA8B;QAC9D7C,aAAa,EAAEz0C,QAAQ,CAAC0gB,mBAAmB,CAAC1gB,QAAQ,CAAC,CAAC,CAAC;QACvDo3C,qBAAqB,EAAEA,qBAAqB,CAACjxC;MAC/C;IACF,CAAC,CAAC;IACF,MAAMhF,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEsuB,UAAU;MAClBnpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgU,mBAAmB;MAC3B7O,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEgzC,oCAAoC;MAC5C7tC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAO41C,QAAQA,CAAC31B,MAAM,EAAE;IACtB,MAAM;MACJ6R,UAAU;MACV2kB,0BAA0B;MAC1B94B,QAAQ;MACRO;IACF,CAAC,GAAG+B,MAAM;IACV,MAAMljB,IAAI,GAAGm5C,wBAAwB,CAACvB,QAAQ;IAC9C,MAAM30C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,EAAE;MAC5B4gB;IACF,CAAC,CAAC;IACF,MAAMvd,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEsuB,UAAU;MAClBnpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAE0a,QAAQ;MAChBvV,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEizC,0BAA0B;MAClC9tC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAO+2C,YAAYA,CAAC92B,MAAM,EAAE+2B,yBAAyB,EAAEC,iBAAiB,EAAE;IACxE,IAAIh3B,MAAM,CAACtC,QAAQ,GAAGq5B,yBAAyB,GAAGC,iBAAiB,EAAE;MACnE,MAAM,IAAI32C,KAAK,CAAC,2DAA2D,CAAC;IAC9E;IACA,OAAOo2C,WAAW,CAACd,QAAQ,CAAC31B,MAAM,CAAC;EACrC;;EAEA;AACF;AACA;EACE,OAAOi3B,uBAAuBA,CAACj3B,MAAM,EAAE;IACrC,MAAM;MACJ6R,UAAU;MACV2kB,0BAA0B;MAC1B1kB;IACF,CAAC,GAAG9R,MAAM;IACV,MAAMljB,IAAI,GAAGm5C,wBAAwB,CAACS,uBAAuB;IAC7D,MAAM32C,IAAI,GAAGgc,UAAU,CAACjf,IAAI,CAAC;IAC7B,MAAMqD,IAAI,GAAG,CAAC;MACZoD,MAAM,EAAEsuB,UAAU;MAClBnpB,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEuuB,UAAU;MAClBppB,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,EAAE;MACDpF,MAAM,EAAEizC,0BAA0B;MAClC9tC,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,IAAIuI,WAAW,CAAC,CAAC,CAACc,GAAG,CAAC;MAC3B7R,IAAI;MACJkC,SAAS,EAAE,IAAI,CAACA,SAAS;MACzBtC;IACF,CAAC,CAAC;EACJ;AACF;AACA02C,WAAW,CAACp0C,SAAS,GAAG,IAAIpB,SAAS,CAAC,6CAA6C,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAw1C,WAAW,CAAC94B,KAAK,GAAG,IAAI;AAExB,MAAMu5B,kBAAkB,GAAG,IAAIj2C,SAAS,CAAC,6CAA6C,CAAC;;AAEvF;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAMk2C,UAAU,GAAGr6C,IAAI,CAAC;EACtB0d,IAAI,EAAE9d,MAAM,CAAC,CAAC;EACd06C,OAAO,EAAEl6C,QAAQ,CAACR,MAAM,CAAC,CAAC,CAAC;EAC3B26C,OAAO,EAAEn6C,QAAQ,CAACR,MAAM,CAAC,CAAC,CAAC;EAC3B46C,OAAO,EAAEp6C,QAAQ,CAACR,MAAM,CAAC,CAAC,CAAC;EAC3B66C,eAAe,EAAEr6C,QAAQ,CAACR,MAAM,CAAC,CAAC;AACpC,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAM86C,aAAa,CAAC;EAClB;AACF;AACA;AACA;AACA;AACA;EACEh4C,WAAWA,CAACe,GAAG,EAAEmsB,IAAI,EAAE;IACrB;AACJ;AACA;IACI,IAAI,CAACnsB,GAAG,GAAG,KAAK,CAAC;IACjB;AACJ;AACA;IACI,IAAI,CAACmsB,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACnsB,GAAG,GAAGA,GAAG;IACd,IAAI,CAACmsB,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,OAAO+qB,cAAcA,CAACr4C,MAAM,EAAE;IAC5B,IAAI6L,SAAS,GAAG,CAAC,GAAG7L,MAAM,CAAC;IAC3B,MAAMs4C,cAAc,GAAG/vC,YAAY,CAACsD,SAAS,CAAC;IAC9C,IAAIysC,cAAc,KAAK,CAAC,EAAE,OAAO,IAAI;IACrC,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAI7pC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAM1P,SAAS,GAAG,IAAI6C,SAAS,CAACiK,aAAa,CAACD,SAAS,EAAE,CAAC,EAAEtK,iBAAiB,CAAC,CAAC;MAC/E,MAAM+H,QAAQ,GAAGsC,YAAY,CAACC,SAAS,CAAC,KAAK,CAAC;MAC9C0sC,UAAU,CAAC5yC,IAAI,CAAC;QACd3G,SAAS;QACTsK;MACF,CAAC,CAAC;IACJ;IACA,IAAIivC,UAAU,CAAC,CAAC,CAAC,CAACv5C,SAAS,CAACgD,MAAM,CAAC81C,kBAAkB,CAAC,EAAE;MACtD,IAAIS,UAAU,CAAC,CAAC,CAAC,CAACjvC,QAAQ,EAAE;QAC1B,MAAMkvC,OAAO,GAAG3xC,UAAU,CAAC,CAAC,CAACnG,MAAM,CAAClE,MAAM,CAACuD,IAAI,CAAC8L,SAAS,CAAC,CAAC;QAC3D,MAAMyhB,IAAI,GAAGva,IAAI,CAAC0lC,KAAK,CAACD,OAAO,CAAC;QAChCn6C,QAAQ,CAACivB,IAAI,EAAEyqB,UAAU,CAAC;QAC1B,OAAO,IAAIK,aAAa,CAACG,UAAU,CAAC,CAAC,CAAC,CAACv5C,SAAS,EAAEsuB,IAAI,CAAC;MACzD;IACF;IACA,OAAO,IAAI;EACb;AACF;AAEA,MAAMorB,eAAe,GAAG,IAAI72C,SAAS,CAAC,6CAA6C,CAAC;;AAEpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM82C,iBAAiB,GAAG37C,YAAY,CAAC+J,MAAM,CAAC,CAAC/H,SAAS,CAAC,YAAY,CAAC,EAAEA,SAAS,CAAC,sBAAsB,CAAC,EAAEhC,YAAY,CAAC6K,EAAE,CAAC,YAAY,CAAC,EAAE7K,YAAY,CAACggB,IAAI,CAAC,CAAC;AAC7J;AACAhgB,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACggB,IAAI,CAAC,MAAM,CAAC,EAAEhgB,YAAY,CAACgK,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAEhK,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAEhK,YAAY,CAAC6K,EAAE,CAAC,eAAe,CAAC,EAAE7K,YAAY,CAACggB,IAAI,CAAC,UAAU,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,CAAC;AACrP;AACAhgB,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACggB,IAAI,CAAC,OAAO,CAAC,EAAEhe,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAEhC,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,EAAEhK,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC+J,MAAM,CAAC,CAAC/H,SAAS,CAAC,kBAAkB,CAAC,EAAEhC,YAAY,CAACggB,IAAI,CAAC,6BAA6B,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,KAAK,CAAC,EAAEhgB,YAAY,CAAC6K,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,EAAE7K,YAAY,CAACggB,IAAI,CAAC,CAAC;AAC1b;AACAhgB,YAAY,CAACqR,GAAG,CAACrR,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACggB,IAAI,CAAC,OAAO,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,SAAS,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAEhgB,YAAY,CAACiK,MAAM,CAACjK,YAAY,CAACgK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,EAAEhK,YAAY,CAAC+J,MAAM,CAAC,CAAC/J,YAAY,CAACggB,IAAI,CAAC,MAAM,CAAC,EAAEhgB,YAAY,CAACggB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC;AACrS;AACA;AACA;AACA,MAAM47B,WAAW,CAAC;EAChB;AACF;AACA;EACEx4C,WAAWA,CAAC2L,IAAI,EAAE;IAChB,IAAI,CAAC2mB,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACikB,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAAC5rB,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACgI,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC8lB,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAAClmB,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACmmB,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACtmB,UAAU,GAAG3mB,IAAI,CAAC2mB,UAAU;IACjC,IAAI,CAACikB,oBAAoB,GAAG5qC,IAAI,CAAC4qC,oBAAoB;IACrD,IAAI,CAAC5rB,UAAU,GAAGhf,IAAI,CAACgf,UAAU;IACjC,IAAI,CAACgI,QAAQ,GAAGhnB,IAAI,CAACgnB,QAAQ;IAC7B,IAAI,CAAC8lB,KAAK,GAAG9sC,IAAI,CAAC8sC,KAAK;IACvB,IAAI,CAACC,gBAAgB,GAAG/sC,IAAI,CAAC+sC,gBAAgB;IAC7C,IAAI,CAACC,WAAW,GAAGhtC,IAAI,CAACgtC,WAAW;IACnC,IAAI,CAAClmB,YAAY,GAAG9mB,IAAI,CAAC8mB,YAAY;IACrC,IAAI,CAACmmB,aAAa,GAAGjtC,IAAI,CAACitC,aAAa;EACzC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAO17B,eAAeA,CAACtd,MAAM,EAAE;IAC7B,MAAMi5C,aAAa,GAAG,CAAC;IACvB,MAAMC,EAAE,GAAGP,iBAAiB,CAACj4C,MAAM,CAACd,QAAQ,CAACI,MAAM,CAAC,EAAEi5C,aAAa,CAAC;IACpE,IAAIlmB,QAAQ,GAAGmmB,EAAE,CAACnmB,QAAQ;IAC1B,IAAI,CAACmmB,EAAE,CAACC,aAAa,EAAE;MACrBpmB,QAAQ,GAAG,IAAI;IACjB;IACA,OAAO,IAAI6lB,WAAW,CAAC;MACrBlmB,UAAU,EAAE,IAAI7wB,SAAS,CAACq3C,EAAE,CAACxmB,UAAU,CAAC;MACxCikB,oBAAoB,EAAE,IAAI90C,SAAS,CAACq3C,EAAE,CAACvC,oBAAoB,CAAC;MAC5D5rB,UAAU,EAAEmuB,EAAE,CAACnuB,UAAU;MACzB8tB,KAAK,EAAEK,EAAE,CAACL,KAAK;MACf9lB,QAAQ;MACR+lB,gBAAgB,EAAEI,EAAE,CAACJ,gBAAgB,CAAC53C,GAAG,CAACk4C,oBAAoB,CAAC;MAC/DL,WAAW,EAAEM,cAAc,CAACH,EAAE,CAACH,WAAW,CAAC;MAC3ClmB,YAAY,EAAEqmB,EAAE,CAACrmB,YAAY;MAC7BmmB,aAAa,EAAEE,EAAE,CAACF;IACpB,CAAC,CAAC;EACJ;AACF;AACA,SAASI,oBAAoBA,CAAC;EAC5B1C,eAAe;EACfpxB;AACF,CAAC,EAAE;EACD,OAAO;IACLA,KAAK;IACLoxB,eAAe,EAAE,IAAI70C,SAAS,CAAC60C,eAAe;EAChD,CAAC;AACH;AACA,SAAS4C,gBAAgBA,CAAC;EACxBl8B,gBAAgB;EAChBm8B,2BAA2B;EAC3BC;AACF,CAAC,EAAE;EACD,OAAO;IACLp8B,gBAAgB,EAAE,IAAIvb,SAAS,CAACub,gBAAgB,CAAC;IACjDm8B,2BAA2B;IAC3BC;EACF,CAAC;AACH;AACA,SAASH,cAAcA,CAAC;EACtBh3C,GAAG;EACHo3C,GAAG;EACHC;AACF,CAAC,EAAE;EACD,IAAIA,OAAO,EAAE;IACX,OAAO,EAAE;EACX;EACA,OAAO,CAAC,GAAGr3C,GAAG,CAAC3C,KAAK,CAAC+5C,GAAG,GAAG,CAAC,CAAC,CAACv4C,GAAG,CAACo4C,gBAAgB,CAAC,EAAE,GAAGj3C,GAAG,CAAC3C,KAAK,CAAC,CAAC,EAAE+5C,GAAG,CAAC,CAACv4C,GAAG,CAACo4C,gBAAgB,CAAC,CAAC;AAClG;AAEA,MAAMtxB,QAAQ,GAAG;EACf2xB,IAAI,EAAE;IACJC,MAAM,EAAE,8BAA8B;IACtCC,OAAO,EAAE,+BAA+B;IACxC,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE;IACLF,MAAM,EAAE,+BAA+B;IACvCC,OAAO,EAAE,gCAAgC;IACzC,cAAc,EAAE;EAClB;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAACC,OAAO,EAAEC,GAAG,EAAE;EACnC,MAAM94C,GAAG,GAAG84C,GAAG,KAAK,KAAK,GAAG,MAAM,GAAG,OAAO;EAC5C,IAAI,CAACD,OAAO,EAAE;IACZ,OAAOhyB,QAAQ,CAAC7mB,GAAG,CAAC,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMmlB,GAAG,GAAG0B,QAAQ,CAAC7mB,GAAG,CAAC,CAAC64C,OAAO,CAAC;EAClC,IAAI,CAAC1zB,GAAG,EAAE;IACR,MAAM,IAAIrlB,KAAK,CAAC,WAAWE,GAAG,aAAa64C,OAAO,EAAE,CAAC;EACvD;EACA,OAAO1zB,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SACe4zB,4BAA4BA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,6BAAA,CAAA5+B,KAAA,OAAAC,SAAA;AAAA;AAkC3C;AACA;AACA;AAFA,SAAA2+B,8BAAA;EAAAA,6BAAA,GAAAr3C,iBAAA,CAlCA,WAA4C6R,UAAU,EAAEu0B,cAAc,EAAEkR,oCAAoC,EAAEC,mBAAmB,EAAE;IACjI,IAAIC,oBAAoB;IACxB,IAAI/mC,OAAO;IACX,IAAI6mC,oCAAoC,IAAIl6C,MAAM,CAAC4E,SAAS,CAACoN,cAAc,CAACC,IAAI,CAACioC,oCAAoC,EAAE,sBAAsB,CAAC,EAAE;MAC9IE,oBAAoB,GAAGF,oCAAoC;MAC3D7mC,OAAO,GAAG8mC,mBAAmB;IAC/B,CAAC,MAAM,IAAID,oCAAoC,IAAIl6C,MAAM,CAAC4E,SAAS,CAACoN,cAAc,CAACC,IAAI,CAACioC,oCAAoC,EAAE,YAAY,CAAC,EAAE;MAC3IE,oBAAoB,GAAGF,oCAAoC;MAC3D7mC,OAAO,GAAG8mC,mBAAmB;IAC/B,CAAC,MAAM;MACL9mC,OAAO,GAAG6mC,oCAAoC;IAChD;IACA,MAAM3+B,WAAW,GAAGlI,OAAO,IAAI;MAC7BmI,aAAa,EAAEnI,OAAO,CAACmI,aAAa;MACpCC,mBAAmB,EAAEpI,OAAO,CAACoI,mBAAmB,IAAIpI,OAAO,CAACqI,UAAU;MACtExJ,cAAc,EAAEmB,OAAO,CAACnB;IAC1B,CAAC;IACD,MAAMxN,SAAS,SAAS+P,UAAU,CAACs0B,kBAAkB,CAACC,cAAc,EAAEztB,WAAW,CAAC;IAClF,MAAMG,UAAU,GAAGrI,OAAO,IAAIA,OAAO,CAACqI,UAAU;IAChD,MAAMyiB,mBAAmB,GAAGic,oBAAoB,GAAG3lC,UAAU,CAACqH,kBAAkB,CAACs+B,oBAAoB,EAAE1+B,UAAU,CAAC,GAAGjH,UAAU,CAACqH,kBAAkB,CAACpX,SAAS,EAAEgX,UAAU,CAAC;IACzK,MAAMG,MAAM,GAAG,OAAOsiB,mBAAmB,EAAEh9B,KAAK;IAChD,IAAI0a,MAAM,CAACpY,GAAG,EAAE;MACd,IAAIiB,SAAS,IAAI,IAAI,EAAE;QACrB,MAAM,IAAI4T,oBAAoB,CAAC;UAC7BC,MAAM,EAAEgD,WAAW,EAAEC,aAAa,GAAG,MAAM,GAAG,UAAU;UACxD9W,SAAS,EAAEA,SAAS;UACpB8T,kBAAkB,EAAE,YAAY/F,IAAI,CAACC,SAAS,CAACmJ,MAAM,CAAC;QACxD,CAAC,CAAC;MACJ;MACA,MAAM,IAAIlb,KAAK,CAAC,mBAAmB+D,SAAS,YAAY+N,IAAI,CAACC,SAAS,CAACmJ,MAAM,CAAC,GAAG,CAAC;IACpF;IACA,OAAOnX,SAAS;EAClB,CAAC;EAAA,OAAAu1C,6BAAA,CAAA5+B,KAAA,OAAAC,SAAA;AAAA;AAKD,MAAM++B,gBAAgB,GAAG,UAAU;AAEnC,SAASp2C,OAAO,EAAE2iB,yBAAyB,EAAEmnB,6BAA6B,EAAEU,yBAAyB,EAAEwE,UAAU,EAAEzqB,0BAA0B,EAAEnkB,gCAAgC,EAAE0e,qBAAqB,EAAEC,SAAS,EAAEmsB,kCAAkC,EAAED,wBAAwB,EAAEa,oBAAoB,EAAEtZ,UAAU,EAAEga,cAAc,EAAElwC,IAAI,EAAEikB,aAAa,EAAE/H,mBAAmB,EAAEuwB,OAAO,EAAEqN,gBAAgB,EAAE5M,gCAAgC,EAAEtsB,MAAM,EAAEiyB,MAAM,EAAEpyC,eAAe,EAAE4K,OAAO,EAAE3G,kBAAkB,EAAEsJ,SAAS,EAAEqO,oBAAoB,EAAEC,YAAY,EAAEvY,gBAAgB,EAAErD,iBAAiB,EAAEM,SAAS,EAAEiD,yBAAyB,EAAErE,aAAa,EAAE6yC,eAAe,EAAEQ,yBAAyB,EAAE31B,0BAA0B,EAAEhG,mBAAmB,EAAEC,4BAA4B,EAAEC,0BAA0B,EAAEC,gCAAgC,EAAEC,kBAAkB,EAAEC,qBAAqB,EAAEC,yBAAyB,EAAEC,0BAA0B,EAAEC,2BAA2B,EAAE85B,gBAAgB,EAAE75B,oBAAoB,EAAEqC,kBAAkB,EAAEjB,sBAAsB,EAAE07B,wBAAwB,EAAE7B,gBAAgB,EAAE4B,YAAY,EAAEt1C,MAAM,EAAE0d,iBAAiB,EAAE0C,aAAa,EAAEzO,WAAW,EAAE/M,0CAA0C,EAAEO,mCAAmC,EAAEH,8BAA8B,EAAEyM,sBAAsB,EAAEoF,kBAAkB,EAAEvF,iBAAiB,EAAEqmC,kBAAkB,EAAEjzC,mBAAmB,EAAE6zC,eAAe,EAAEN,aAAa,EAAE7mC,gBAAgB,EAAE8F,oBAAoB,EAAEuhC,WAAW,EAAErB,uBAAuB,EAAEd,QAAQ,EAAEG,eAAe,EAAES,WAAW,EAAE0C,aAAa,EAAEG,4BAA4B,EAAE7+B,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}