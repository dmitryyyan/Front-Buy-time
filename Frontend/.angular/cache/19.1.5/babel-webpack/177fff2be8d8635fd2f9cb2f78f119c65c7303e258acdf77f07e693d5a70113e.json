{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./createbook.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./createbook.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Connection, PublicKey, Transaction, TransactionInstruction, LAMPORTS_PER_SOL, SystemProgram } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nvar BookingInstructionType;\n(function (BookingInstructionType) {\n  BookingInstructionType[BookingInstructionType[\"CreateBooking\"] = 0] = \"CreateBooking\";\n  BookingInstructionType[BookingInstructionType[\"StudentCancel\"] = 1] = \"StudentCancel\";\n  BookingInstructionType[BookingInstructionType[\"ExpertCancel\"] = 2] = \"ExpertCancel\";\n  BookingInstructionType[BookingInstructionType[\"ConfirmMeeting\"] = 3] = \"ConfirmMeeting\";\n})(BookingInstructionType || (BookingInstructionType = {}));\nlet CreatebookComponent = class CreatebookComponent {\n  fb;\n  http;\n  router;\n  bookingForm;\n  teachers = [];\n  timeslots = [];\n  userId = '';\n  message = '';\n  urlOfMeeting = '';\n  isConnected = false;\n  publicKey = null;\n  //expertPubkey: string = '8qYPSmTT9LFANhLdhNcGLoWX32mg2FfqbraEtBnkEUWU';\n  meetingTime = 1746952694;\n  amount = 0.1;\n  bookingPda = null;\n  passed = true;\n  connection = new Connection('https://api.devnet.solana.com', 'confirmed');\n  programId = new PublicKey('4ws28MPExiFotyySaD8Y3wNq3xEa9ZP3Eqbsf9m6fbu8');\n  stydentPyblicKey = '';\n  expertPublicKey = '';\n  unixTimestamp = 0;\n  constructor(fb, http, router) {\n    this.fb = fb;\n    this.http = http;\n    this.router = router;\n    this.bookingForm = this.fb.group({\n      teacherId: ['', Validators.required],\n      timeslotId: ['', Validators.required],\n      message: [''],\n      status: ['Pedning'],\n      urlOfMeeting: [''],\n      startTime: ['']\n    });\n  }\n  connectWallet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (!window.solana || !window.solana.isPhantom) {\n          throw new Error('Phantom Wallet not found. Please install Phantom Wallet.');\n        }\n        const response = yield window.solana.connect();\n        _this.publicKey = response.publicKey.toString();\n        _this.isConnected = true;\n      } catch (error) {\n        console.error('Failed to connect wallet:', error);\n        alert('Failed to connect wallet: ' + (error instanceof Error ? error.message : 'Unknown error'));\n      }\n    })();\n  }\n  getBookingPda(student, expert, meetingTime) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const meetingTimeBuffer = Buffer.alloc(8);\n      // Use writeInt32LE for 32-bit integers\n      meetingTimeBuffer.writeInt32LE(Number(meetingTime), 0); // Offset is a number\n      const [pda] = yield PublicKey.findProgramAddress([Buffer.from('booking'), student.toBuffer(), expert.toBuffer(), meetingTimeBuffer], _this2.programId);\n      return pda;\n    })();\n  }\n  createBookingInstruction(amount, meetingTime) {\n    const buffer = Buffer.alloc(1 + 8 + 8);\n    buffer.writeUInt8(BookingInstructionType.CreateBooking, 0);\n    // Replace BigInt with Number for compatibility\n    buffer.writeUInt32LE(Number(amount), 1); // Use writeUInt32LE for 32-bit unsigned integers\n    buffer.writeInt32LE(Number(meetingTime), 9); // Use writeInt32LE for 32-bit integers\n    return buffer;\n  }\n  confirmMeetingInstruction(passed) {\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt8(BookingInstructionType.ConfirmMeeting, 0);\n    buffer.writeUInt8(passed ? 1 : 0, 1);\n    return buffer;\n  }\n  createBooking() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.timeslots.forEach(slot => {\n        // Replace slot.startTime with the current time\n        // const unixTimestamp = Math.floor(Date.now() / 1000);\n        // console.log('S1 (UNIX)', unixTimestamp);\n        // this.unixTimestamp = unixTimestamp;\n      });\n      const student = new PublicKey(_this3.stydentPyblicKey);\n      const expert = new PublicKey(_this3.expertPublicKey);\n      const amount = Math.floor(_this3.amount * LAMPORTS_PER_SOL);\n      const pda = yield _this3.getBookingPda(student, expert, _this3.unixTimestamp);\n      _this3.bookingPda = pda.toString();\n      const data = _this3.createBookingInstruction(amount, _this3.unixTimestamp);\n      console.log('Booking PDA:', pda.toString());\n      const instruction = new TransactionInstruction({\n        keys: [{\n          pubkey: student,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: expert,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: pda,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: _this3.programId,\n        data\n      });\n      const transaction = new Transaction().add(instruction);\n      transaction.feePayer = student;\n      const {\n        blockhash\n      } = yield _this3.connection.getLatestBlockhash();\n      transaction.recentBlockhash = blockhash;\n      const signedTransaction = yield window.solana.signTransaction(transaction);\n      const signature = yield _this3.connection.sendRawTransaction(signedTransaction.serialize());\n      yield _this3.connection.confirmTransaction(signature, 'confirmed');\n      alert('Booking created! Signature: ' + signature);\n    })();\n  }\n  button1Action() {\n    this.router.navigate(['/teacher']);\n  }\n  button2Action() {\n    this.router.navigate(['/add-timeslot']);\n  }\n  button3Action() {\n    this.router.navigate(['/createbook']);\n  }\n  navigateToUserPage() {\n    this.router.navigate(['/user-page']);\n  }\n  ngOnInit() {\n    this.loadTeachers();\n    this.fetchChatId();\n  }\n  loadTeachers() {\n    this.http.get('http://localhost:5258/api/teacher/get-all').subscribe(data => {\n      this.teachers = data;\n      console.log(this.teachers);\n    });\n  }\n  loadTimeslots(teacherId) {\n    console.log('Loading timeslots for teacher:', teacherId);\n    this.http.get('http://localhost:5258/api/timeslot/get-all').subscribe(data => {\n      console.log('Fetched timeslots222s:', data); // Log the fetched timeslots\n      this.timeslots = data.filter(timeslot => timeslot.userId === teacherId && timeslot.isAvailable === true);\n      // ...existing code...\n      console.log('Filtered timeslots:', this.timeslots.map(slot => slot.startTime));\n      // ...existing code...\n      // Додати запит до гаманця\n      this.http.get(`http://localhost:5258/api/wallet/get-by-user-id?userId=${teacherId}`).subscribe(walletData => {\n        console.log('Fetched wallet data:', walletData);\n        console.log('TEACHER----walletadress', walletData.walletAddress);\n        this.expertPublicKey = walletData.walletAddress;\n        console.log(this.expertPublicKey); // Log the fetched wallet data\n      }, error => {\n        console.error('Error fetching wallet data', error);\n      });\n      // Iterate over timeslots to process each slot\n      if (this.timeslots.length > 0) {\n        console.log('Matching timeslots:', this.timeslots);\n      } else {\n        console.log('No matching timeslots found');\n      }\n    });\n  }\n  fetchChatId() {\n    this.http.get('http://localhost:3000/api/getCurrentChatId').subscribe(response => {\n      const chatId = response.chatId;\n      console.log('Chat ID:', chatId); // Вивід chatId в консоль\n      this.fetchUserData(chatId);\n    }, error => {\n      console.error('Error fetching chat ID', error);\n    });\n  }\n  fetchUserData(chatId) {\n    this.http.get(`http://localhost:5258/api/user/get-by-chat-id?chatId=${chatId}`).subscribe(data => {\n      console.log('Fetched user data:', data); // Log the fetched data\n      if (data && !data.message) {\n        this.userId = data.id; // Зберігаємо отриманий userId\n        console.log('User ID44:', this.userId); // Log the user ID\n        // Додати запит до гаманця\n        this.http.get(`http://localhost:5258/api/wallet/get-by-user-id?userId=${this.userId}`).subscribe(walletData => {\n          console.log('Fetched wallet data:', walletData);\n          console.log('SUDENT----walletadress', walletData.walletAddress);\n          this.stydentPyblicKey = walletData.walletAddress;\n          //console.log(this.stydentPyblicKey) // Log the fetched wallet data\n        }, error => {\n          console.error('Error fetching wallet data', error);\n        });\n      } else {\n        console.log('No user data available');\n      }\n    }, error => {\n      console.error('Error fetching user data', error);\n    });\n  }\n  onTeacherChange(event) {\n    const teacherId = event.target.value;\n    this.loadTimeslots(teacherId);\n  }\n  submitBooking() {\n    if (this.bookingForm.valid) {\n      const selectedTimeslotId = this.bookingForm.get('timeslotId')?.value;\n      // Знайти об'єкт таймслота за id\n      const selectedTimeslot = this.timeslots.find(slot => slot.id === selectedTimeslotId);\n      const bookingData = {\n        userId: this.userId,\n        timeslotId: selectedTimeslotId,\n        message: this.bookingForm.get('message')?.value,\n        status: this.bookingForm.get('status')?.value,\n        urlOfMeeting: this.bookingForm.get('urlOfMeeting')?.value,\n        startTime: selectedTimeslot ? selectedTimeslot.startTime : null // <-- тут час із таймслота\n      };\n      console.log('Start Time:', bookingData.startTime);\n      this.unixTimestamp = Math.floor(new Date(bookingData.startTime).getTime() / 1000);\n      console.log('UNIX Timestamp:', this.unixTimestamp);\n      this.http.post('http://localhost:5258/api/booking/create', bookingData).subscribe(response => {\n        this.createBooking();\n        console.log('Booking successful', response);\n        this.message = 'Success! Booking created.';\n      }, error => {\n        console.error('Booking failed', error);\n        this.message = 'Error! Booking failed.';\n      });\n    }\n  }\n  static ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: HttpClient\n  }, {\n    type: Router\n  }];\n};\nCreatebookComponent = __decorate([Component({\n  selector: 'app-createbook',\n  imports: [CommonModule, ReactiveFormsModule],\n  template: __NG_CLI_RESOURCE__0,\n  standalone: true,\n  template: `\n    \n      \n      `,\n  styles: [__NG_CLI_RESOURCE__1]\n})], CreatebookComponent);\nexport { CreatebookComponent };","map":{"version":3,"names":["Component","FormBuilder","Validators","HttpClient","CommonModule","ReactiveFormsModule","Router","Connection","PublicKey","Transaction","TransactionInstruction","LAMPORTS_PER_SOL","SystemProgram","Buffer","BookingInstructionType","CreatebookComponent","fb","http","router","bookingForm","teachers","timeslots","userId","message","urlOfMeeting","isConnected","publicKey","meetingTime","amount","bookingPda","passed","connection","programId","stydentPyblicKey","expertPublicKey","unixTimestamp","constructor","group","teacherId","required","timeslotId","status","startTime","connectWallet","_this","_asyncToGenerator","window","solana","isPhantom","Error","response","connect","toString","error","console","alert","getBookingPda","student","expert","_this2","meetingTimeBuffer","alloc","writeInt32LE","Number","pda","findProgramAddress","from","toBuffer","createBookingInstruction","buffer","writeUInt8","CreateBooking","writeUInt32LE","confirmMeetingInstruction","ConfirmMeeting","createBooking","_this3","forEach","slot","Math","floor","data","log","instruction","keys","pubkey","isSigner","isWritable","transaction","add","feePayer","blockhash","getLatestBlockhash","recentBlockhash","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","confirmTransaction","button1Action","navigate","button2Action","button3Action","navigateToUserPage","ngOnInit","loadTeachers","fetchChatId","get","subscribe","loadTimeslots","filter","timeslot","isAvailable","map","walletData","walletAddress","length","chatId","fetchUserData","id","onTeacherChange","event","target","value","submitBooking","valid","selectedTimeslotId","selectedTimeslot","find","bookingData","Date","getTime","post","__decorate","selector","imports","template","__NG_CLI_RESOURCE__0","standalone"],"sources":["C:\\Users\\user\\Desktop\\Front\\buy-time\\Frontend\\src\\app\\pages\\createbook\\createbook.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  Connection,\r\n  PublicKey,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  LAMPORTS_PER_SOL,\r\n  SystemProgram,\r\n} from '@solana/web3.js';\r\nimport { Buffer } from 'buffer';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    solana?: {\r\n      isPhantom?: boolean;\r\n      connect: () => Promise<{ publicKey: { toString: () => string } }>;\r\n      disconnect: () => Promise<void>;\r\n      signTransaction: (transaction: Transaction) => Promise<Transaction>;\r\n    };\r\n  }\r\n}\r\n\r\nenum BookingInstructionType {\r\n  CreateBooking = 0,\r\n  StudentCancel = 1,\r\n  ExpertCancel = 2,\r\n  ConfirmMeeting = 3,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-createbook',\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './createbook.component.html',\r\n  styleUrls: ['./createbook.component.css'],\r\n\r\n  standalone: true,\r\n  \r\n  template: `\r\n    \r\n      \r\n      `\r\n      \r\n})\r\nexport class CreatebookComponent implements OnInit {\r\n  bookingForm: FormGroup;\r\n  teachers: any[] = [];\r\n  timeslots: any[] = [];\r\n  userId: string = '';\r\n  message: string = '';\r\n  urlOfMeeting: string = '';\r\n  \r\n\r\n  isConnected: boolean = false;\r\n  publicKey: string | null = null;\r\n  //expertPubkey: string = '8qYPSmTT9LFANhLdhNcGLoWX32mg2FfqbraEtBnkEUWU';\r\n  meetingTime: number = 1746952694;\r\n  amount: number = 0.1;\r\n  bookingPda: string | null = null;\r\n  passed: boolean = true;\r\n  private connection = new Connection('https://api.devnet.solana.com', 'confirmed');\r\n  private programId = new PublicKey('4ws28MPExiFotyySaD8Y3wNq3xEa9ZP3Eqbsf9m6fbu8');\r\n  stydentPyblicKey: string ='';\r\n  expertPublicKey: string = '';\r\n  unixTimestamp = 0;\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient, private router: Router) {\r\n    this.bookingForm = this.fb.group({\r\n      teacherId: ['', Validators.required],\r\n      timeslotId: ['', Validators.required],\r\n      message: [''],\r\n      status: ['Pedning'],\r\n      urlOfMeeting: [''],\r\n      startTime: [''],\r\n    });\r\n  }\r\n\r\n  async connectWallet() {\r\n    try {\r\n      if (!window.solana || !window.solana.isPhantom) {\r\n        throw new Error('Phantom Wallet not found. Please install Phantom Wallet.');\r\n      }\r\n      const response = await window.solana.connect();\r\n      this.publicKey = response.publicKey.toString();\r\n      this.isConnected = true;\r\n    } catch (error) {\r\n      console.error('Failed to connect wallet:', error);\r\n      alert('Failed to connect wallet: ' + (error instanceof Error ? error.message : 'Unknown error'));\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  async getBookingPda(student: PublicKey, expert: PublicKey, meetingTime: number): Promise<PublicKey> {\r\n    const meetingTimeBuffer = Buffer.alloc(8);\r\n    // Use writeInt32LE for 32-bit integers\r\n    meetingTimeBuffer.writeInt32LE(Number(meetingTime), 0); // Offset is a number\r\n    const [pda] = await PublicKey.findProgramAddress(\r\n      [Buffer.from('booking'), student.toBuffer(), expert.toBuffer(), meetingTimeBuffer],\r\n      this.programId\r\n    );\r\n    return pda;\r\n  }\r\n\r\n  createBookingInstruction(amount: number, meetingTime: number): Buffer {\r\n    const buffer = Buffer.alloc(1 + 8 + 8);\r\n    buffer.writeUInt8(BookingInstructionType.CreateBooking, 0);\r\n    // Replace BigInt with Number for compatibility\r\n    buffer.writeUInt32LE(Number(amount), 1); // Use writeUInt32LE for 32-bit unsigned integers\r\n    buffer.writeInt32LE(Number(meetingTime), 9); // Use writeInt32LE for 32-bit integers\r\n    return buffer;\r\n  }\r\n\r\n \r\n\r\n  confirmMeetingInstruction(passed: boolean): Buffer {\r\n    const buffer = Buffer.alloc(2);\r\n    buffer.writeUInt8(BookingInstructionType.ConfirmMeeting, 0);\r\n    buffer.writeUInt8(passed ? 1 : 0, 1);\r\n    return buffer;\r\n  }\r\n\r\n  async createBooking() {\r\n      \r\n\r\n    this.timeslots.forEach(slot => {\r\n      // Replace slot.startTime with the current time\r\n    // const unixTimestamp = Math.floor(Date.now() / 1000);\r\n    // console.log('S1 (UNIX)', unixTimestamp);\r\n    // this.unixTimestamp = unixTimestamp;\r\n\r\n\r\n    });\r\n      const student = new PublicKey(this.stydentPyblicKey);\r\n      const expert = new PublicKey(this.expertPublicKey);\r\n\r\n      const amount = Math.floor(this.amount * LAMPORTS_PER_SOL);\r\n      const pda = await this.getBookingPda(student, expert, this.unixTimestamp);\r\n      this.bookingPda = pda.toString();\r\n      const data = this.createBookingInstruction(amount, this.unixTimestamp);\r\n      console.log('Booking PDA:', pda.toString());\r\n      const instruction = new TransactionInstruction({\r\n        keys: [\r\n          { pubkey: student, isSigner: true, isWritable: true },\r\n          { pubkey: expert, isSigner: false, isWritable: false },\r\n          { pubkey: pda, isSigner: false, isWritable: true },\r\n          { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n        ],\r\n        programId: this.programId,\r\n        data,\r\n      });\r\n      \r\n      const transaction = new Transaction().add(instruction);\r\n      transaction.feePayer = student;\r\n      const { blockhash } = await this.connection.getLatestBlockhash();\r\n      transaction.recentBlockhash = blockhash;\r\n\r\n      const signedTransaction = await window.solana!.signTransaction(transaction);\r\n      const signature = await this.connection.sendRawTransaction(signedTransaction.serialize());\r\n      await this.connection.confirmTransaction(signature, 'confirmed');\r\n\r\n      alert('Booking created! Signature: ' + signature);\r\n    \r\n  }\r\n\r\n  button1Action() {\r\n    this.router.navigate(['/teacher']);\r\n  }\r\n\r\n  button2Action() {\r\n    this.router.navigate(['/add-timeslot']);\r\n  }\r\n\r\n  button3Action() {\r\n     this.router.navigate(['/createbook']);\r\n  }\r\n\r\n  navigateToUserPage() {\r\n    this.router.navigate(['/user-page']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadTeachers();\r\n    this.fetchChatId();\r\n  }\r\n\r\n  loadTeachers(): void {\r\n    this.http.get('http://localhost:5258/api/teacher/get-all').subscribe((data: any) => {\r\n      this.teachers = data;\r\n      console.log(this.teachers);\r\n    });\r\n  }\r\n\r\n  loadTimeslots(teacherId: string): void {\r\n    console.log('Loading timeslots for teacher:', teacherId);\r\n    this.http.get('http://localhost:5258/api/timeslot/get-all').subscribe((data: any) => {\r\n      console.log('Fetched timeslots222s:', data); // Log the fetched timeslots\r\n      this.timeslots = data.filter((timeslot: any) => timeslot.userId === teacherId && timeslot.isAvailable === true);\r\n      // ...existing code...\r\n      console.log('Filtered timeslots:', this.timeslots.map(slot => slot.startTime));\r\n      \r\n// ...existing code...\r\n      // Додати запит до гаманця\r\n          this.http.get<any>(`http://localhost:5258/api/wallet/get-by-user-id?userId=${teacherId}`).subscribe(\r\n            (walletData) => {\r\n              console.log('Fetched wallet data:', walletData);\r\n              console.log('TEACHER----walletadress', walletData.walletAddress);\r\n              this.expertPublicKey=walletData.walletAddress;\r\n              console.log(this.expertPublicKey) // Log the fetched wallet data\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching wallet data', error);\r\n            }\r\n          );\r\n          \r\n          // Iterate over timeslots to process each slot\r\n  \r\n      \r\n      if (this.timeslots.length > 0) {\r\n        console.log('Matching timeslots:', this.timeslots);\r\n        \r\n      } else {\r\n        console.log('No matching timeslots found');\r\n      }\r\n    });\r\n  }\r\n\r\n  fetchChatId(): void {\r\n    this.http.get<{ chatId: string }>('http://localhost:3000/api/getCurrentChatId').subscribe(\r\n      (response) => {\r\n        const chatId = response.chatId;\r\n        console.log('Chat ID:', chatId); // Вивід chatId в консоль\r\n        this.fetchUserData(chatId);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching chat ID', error);\r\n      }\r\n    );\r\n  }\r\n\r\n   fetchUserData(chatId: string): void {\r\n    this.http.get<any>(`http://localhost:5258/api/user/get-by-chat-id?chatId=${chatId}`).subscribe(\r\n      (data) => {\r\n        console.log('Fetched user data:', data); // Log the fetched data\r\n        if (data && !data.message) {\r\n          this.userId = data.id; // Зберігаємо отриманий userId\r\n          console.log('User ID44:', this.userId); // Log the user ID\r\n\r\n          // Додати запит до гаманця\r\n          this.http.get<any>(`http://localhost:5258/api/wallet/get-by-user-id?userId=${this.userId}`).subscribe(\r\n            (walletData) => {\r\n              console.log('Fetched wallet data:', walletData);\r\n              console.log('SUDENT----walletadress', walletData.walletAddress);\r\n              this.stydentPyblicKey=walletData.walletAddress;\r\n              //console.log(this.stydentPyblicKey) // Log the fetched wallet data\r\n            },\r\n            (error) => {\r\n              console.error('Error fetching wallet data', error);\r\n            }\r\n          );\r\n        } else {\r\n          console.log('No user data available');\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching user data', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onTeacherChange(event: any): void {\r\n    const teacherId = event.target.value;\r\n    this.loadTimeslots(teacherId);\r\n  }\r\n\r\n submitBooking(): void {\r\n  if (this.bookingForm.valid) {\r\n    const selectedTimeslotId = this.bookingForm.get('timeslotId')?.value;\r\n    // Знайти об'єкт таймслота за id\r\n    const selectedTimeslot = this.timeslots.find(slot => slot.id === selectedTimeslotId);\r\n\r\n    const bookingData = {\r\n      userId: this.userId,\r\n      timeslotId: selectedTimeslotId,\r\n      message: this.bookingForm.get('message')?.value,\r\n      status: this.bookingForm.get('status')?.value,\r\n      urlOfMeeting: this.bookingForm.get('urlOfMeeting')?.value,\r\n      startTime: selectedTimeslot ? selectedTimeslot.startTime : null // <-- тут час із таймслота\r\n    };\r\n\r\n    console.log('Start Time:', bookingData.startTime);\r\n    this.unixTimestamp = Math.floor(new Date(bookingData.startTime).getTime() / 1000);\r\n    console.log('UNIX Timestamp:', this.unixTimestamp);\r\n\r\n    this.http.post('http://localhost:5258/api/booking/create', bookingData).subscribe(\r\n      (response) => {\r\n        this.createBooking();\r\n        console.log('Booking successful', response);\r\n        this.message = 'Success! Booking created.';\r\n      },\r\n      (error) => {\r\n        console.error('Booking failed', error);\r\n        this.message = 'Error! Booking failed.';\r\n      }\r\n    );\r\n  }\r\n}\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}