{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Buffer } from 'buffer';\nimport { EventEmitter } from 'eventemitter3';\n\n// node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\nvar WebSocketBrowserImpl = class extends EventEmitter {\n  socket;\n  /** Instantiate a WebSocket class\n  * @constructor\n  * @param {String} address - url to a websocket server\n  * @param {(Object)} options - websocket options\n  * @param {(String|Array)} protocols - a list of protocols\n  * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n  */\n  constructor(address, options, protocols) {\n    super();\n    this.socket = new window.WebSocket(address, protocols);\n    this.socket.onopen = () => this.emit(\"open\");\n    this.socket.onmessage = event => this.emit(\"message\", event.data);\n    this.socket.onerror = error => this.emit(\"error\", error);\n    this.socket.onclose = event => {\n      this.emit(\"close\", event.code, event.reason);\n    };\n  }\n  /**\n  * Sends data through a websocket connection\n  * @method\n  * @param {(String|Object)} data - data to be sent via websocket\n  * @param {Object} optionsOrCallback - ws options\n  * @param {Function} callback - a callback called once the data is sent\n  * @return {Undefined}\n  */\n  send(data, optionsOrCallback, callback) {\n    const cb = callback || optionsOrCallback;\n    try {\n      this.socket.send(data);\n      cb();\n    } catch (error) {\n      cb(error);\n    }\n  }\n  /**\n  * Closes an underlying socket\n  * @method\n  * @param {Number} code - status code explaining why the connection is being closed\n  * @param {String} reason - a description why the connection is closing\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  close(code, reason) {\n    this.socket.close(code, reason);\n  }\n  addEventListener(type, listener, options) {\n    this.socket.addEventListener(type, listener, options);\n  }\n};\nfunction WebSocket(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}\n\n// src/lib/utils.ts\nvar DefaultDataPack = class {\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  decode(value) {\n    return JSON.parse(value);\n  }\n};\n\n// src/lib/client.ts\nvar CommonClient = class extends EventEmitter {\n  address;\n  rpc_id;\n  queue;\n  options;\n  autoconnect;\n  ready;\n  reconnect;\n  reconnect_timer_id;\n  reconnect_interval;\n  max_reconnects;\n  rest_options;\n  current_reconnects;\n  generate_request_id;\n  socket;\n  webSocketFactory;\n  dataPack;\n  /**\n  * Instantiate a Client class.\n  * @constructor\n  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n  * @param {String} address - url to a websocket server\n  * @param {Object} options - ws options object with reconnect parameters\n  * @param {Function} generate_request_id - custom generation request Id\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {CommonClient}\n  */\n  constructor(webSocketFactory, address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5,\n    ...rest_options\n  } = {}, generate_request_id, dataPack) {\n    super();\n    this.webSocketFactory = webSocketFactory;\n    this.queue = {};\n    this.rpc_id = 0;\n    this.address = address;\n    this.autoconnect = autoconnect;\n    this.ready = false;\n    this.reconnect = reconnect;\n    this.reconnect_timer_id = void 0;\n    this.reconnect_interval = reconnect_interval;\n    this.max_reconnects = max_reconnects;\n    this.rest_options = rest_options;\n    this.current_reconnects = 0;\n    this.generate_request_id = generate_request_id || (() => typeof this.rpc_id === \"number\" ? ++this.rpc_id : Number(this.rpc_id) + 1);\n    if (!dataPack) this.dataPack = new DefaultDataPack();else this.dataPack = dataPack;\n    if (this.autoconnect) this._connect(this.address, {\n      autoconnect: this.autoconnect,\n      reconnect: this.reconnect,\n      reconnect_interval: this.reconnect_interval,\n      max_reconnects: this.max_reconnects,\n      ...this.rest_options\n    });\n  }\n  /**\n  * Connects to a defined server if not connected already.\n  * @method\n  * @return {Undefined}\n  */\n  connect() {\n    if (this.socket) return;\n    this._connect(this.address, {\n      autoconnect: this.autoconnect,\n      reconnect: this.reconnect,\n      reconnect_interval: this.reconnect_interval,\n      max_reconnects: this.max_reconnects,\n      ...this.rest_options\n    });\n  }\n  /**\n  * Calls a registered RPC method on server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object|Array} params - optional method parameters\n  * @param {Number} timeout - RPC reply timeout value\n  * @param {Object} ws_opts - options passed to ws\n  * @return {Promise}\n  */\n  call(method, params, timeout, ws_opts) {\n    if (!ws_opts && \"object\" === typeof timeout) {\n      ws_opts = timeout;\n      timeout = null;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const rpc_id = this.generate_request_id(method, params);\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params: params || void 0,\n        id: rpc_id\n      };\n      this.socket.send(this.dataPack.encode(message), ws_opts, error => {\n        if (error) return reject(error);\n        this.queue[rpc_id] = {\n          promise: [resolve, reject]\n        };\n        if (timeout) {\n          this.queue[rpc_id].timeout = setTimeout(() => {\n            delete this.queue[rpc_id];\n            reject(new Error(\"reply timeout\"));\n          }, timeout);\n        }\n      });\n    });\n  }\n  /**\n  * Logins with the other side of the connection.\n  * @method\n  * @param {Object} params - Login credentials object\n  * @return {Promise}\n  */\n  login(params) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const resp = yield _this.call(\"rpc.login\", params);\n      if (!resp) throw new Error(\"authentication failed\");\n      return resp;\n    })();\n  }\n  /**\n  * Fetches a list of client's methods registered on server.\n  * @method\n  * @return {Array}\n  */\n  listMethods() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this2.call(\"__listMethods\");\n    })();\n  }\n  /**\n  * Sends a JSON-RPC 2.0 notification to server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object} params - optional method parameters\n  * @return {Promise}\n  */\n  notify(method, params) {\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params\n      };\n      this.socket.send(this.dataPack.encode(message), error => {\n        if (error) return reject(error);\n        resolve();\n      });\n    });\n  }\n  /**\n  * Subscribes for a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  subscribe(event) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof event === \"string\") event = [event];\n      const result = yield _this3.call(\"rpc.on\", event);\n      if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n      return result;\n    })();\n  }\n  /**\n  * Unsubscribes from a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  unsubscribe(event) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof event === \"string\") event = [event];\n      const result = yield _this4.call(\"rpc.off\", event);\n      if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed unsubscribing from an event with: \" + result);\n      return result;\n    })();\n  }\n  /**\n  * Closes a WebSocket connection gracefully.\n  * @method\n  * @param {Number} code - socket close code\n  * @param {String} data - optional data to be sent before closing\n  * @return {Undefined}\n  */\n  close(code, data) {\n    this.socket.close(code || 1e3, data);\n  }\n  /**\n  * Enable / disable automatic reconnection.\n  * @method\n  * @param {Boolean} reconnect - enable / disable reconnection\n  * @return {Undefined}\n  */\n  setAutoReconnect(reconnect) {\n    this.reconnect = reconnect;\n  }\n  /**\n  * Set the interval between reconnection attempts.\n  * @method\n  * @param {Number} interval - reconnection interval in milliseconds\n  * @return {Undefined}\n  */\n  setReconnectInterval(interval) {\n    this.reconnect_interval = interval;\n  }\n  /**\n  * Set the maximum number of reconnection attempts.\n  * @method\n  * @param {Number} max_reconnects - maximum reconnection attempts\n  * @return {Undefined}\n  */\n  setMaxReconnects(max_reconnects) {\n    this.max_reconnects = max_reconnects;\n  }\n  /**\n  * Connection/Message handler.\n  * @method\n  * @private\n  * @param {String} address - WebSocket API address\n  * @param {Object} options - ws options object\n  * @return {Undefined}\n  */\n  _connect(address, options) {\n    clearTimeout(this.reconnect_timer_id);\n    this.socket = this.webSocketFactory(address, options);\n    this.socket.addEventListener(\"open\", () => {\n      this.ready = true;\n      this.emit(\"open\");\n      this.current_reconnects = 0;\n    });\n    this.socket.addEventListener(\"message\", ({\n      data: message\n    }) => {\n      if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n      try {\n        message = this.dataPack.decode(message);\n      } catch (error) {\n        return;\n      }\n      if (message.notification && this.listeners(message.notification).length) {\n        if (!Object.keys(message.params).length) return this.emit(message.notification);\n        const args = [message.notification];\n        if (message.params.constructor === Object) args.push(message.params);else for (let i = 0; i < message.params.length; i++) args.push(message.params[i]);\n        return Promise.resolve().then(() => {\n          this.emit.apply(this, args);\n        });\n      }\n      if (!this.queue[message.id]) {\n        if (message.method) {\n          return Promise.resolve().then(() => {\n            this.emit(message.method, message?.params);\n          });\n        }\n        return;\n      }\n      if (\"error\" in message === \"result\" in message) this.queue[message.id].promise[1](new Error('Server response malformed. Response must include either \"result\" or \"error\", but not both.'));\n      if (this.queue[message.id].timeout) clearTimeout(this.queue[message.id].timeout);\n      if (message.error) this.queue[message.id].promise[1](message.error);else this.queue[message.id].promise[0](message.result);\n      delete this.queue[message.id];\n    });\n    this.socket.addEventListener(\"error\", error => this.emit(\"error\", error));\n    this.socket.addEventListener(\"close\", ({\n      code,\n      reason\n    }) => {\n      if (this.ready) setTimeout(() => this.emit(\"close\", code, reason), 0);\n      this.ready = false;\n      this.socket = void 0;\n      if (code === 1e3) return;\n      this.current_reconnects++;\n      if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0)) this.reconnect_timer_id = setTimeout(() => this._connect(address, options), this.reconnect_interval);\n    });\n  }\n};\n\n// src/index.browser.ts\nvar Client = class extends CommonClient {\n  constructor(address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5\n  } = {}, generate_request_id) {\n    super(WebSocket, address, {\n      autoconnect,\n      reconnect,\n      reconnect_interval,\n      max_reconnects\n    }, generate_request_id);\n  }\n};\nexport { Client, CommonClient, DefaultDataPack, WebSocket };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["Buffer","EventEmitter","WebSocketBrowserImpl","socket","constructor","address","options","protocols","window","WebSocket","onopen","emit","onmessage","event","data","onerror","error","onclose","code","reason","send","optionsOrCallback","callback","cb","close","addEventListener","type","listener","DefaultDataPack","encode","value","JSON","stringify","decode","parse","CommonClient","rpc_id","queue","autoconnect","ready","reconnect","reconnect_timer_id","reconnect_interval","max_reconnects","rest_options","current_reconnects","generate_request_id","webSocketFactory","dataPack","Number","_connect","connect","call","method","params","timeout","ws_opts","Promise","resolve","reject","Error","message","jsonrpc","id","promise","setTimeout","login","_this","_asyncToGenerator","resp","listMethods","_this2","notify","subscribe","_this3","result","unsubscribe","_this4","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","ArrayBuffer","from","toString","notification","listeners","length","Object","keys","args","push","i","then","apply","Client"],"sources":["C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/rpc-websockets/dist/index.browser.mjs"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { EventEmitter } from 'eventemitter3';\n\n// node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\nvar WebSocketBrowserImpl = class extends EventEmitter {\n  socket;\n  /** Instantiate a WebSocket class\n  * @constructor\n  * @param {String} address - url to a websocket server\n  * @param {(Object)} options - websocket options\n  * @param {(String|Array)} protocols - a list of protocols\n  * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n  */\n  constructor(address, options, protocols) {\n    super();\n    this.socket = new window.WebSocket(address, protocols);\n    this.socket.onopen = () => this.emit(\"open\");\n    this.socket.onmessage = (event) => this.emit(\"message\", event.data);\n    this.socket.onerror = (error) => this.emit(\"error\", error);\n    this.socket.onclose = (event) => {\n      this.emit(\"close\", event.code, event.reason);\n    };\n  }\n  /**\n  * Sends data through a websocket connection\n  * @method\n  * @param {(String|Object)} data - data to be sent via websocket\n  * @param {Object} optionsOrCallback - ws options\n  * @param {Function} callback - a callback called once the data is sent\n  * @return {Undefined}\n  */\n  send(data, optionsOrCallback, callback) {\n    const cb = callback || optionsOrCallback;\n    try {\n      this.socket.send(data);\n      cb();\n    } catch (error) {\n      cb(error);\n    }\n  }\n  /**\n  * Closes an underlying socket\n  * @method\n  * @param {Number} code - status code explaining why the connection is being closed\n  * @param {String} reason - a description why the connection is closing\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  close(code, reason) {\n    this.socket.close(code, reason);\n  }\n  addEventListener(type, listener, options) {\n    this.socket.addEventListener(type, listener, options);\n  }\n};\nfunction WebSocket(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}\n\n// src/lib/utils.ts\nvar DefaultDataPack = class {\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  decode(value) {\n    return JSON.parse(value);\n  }\n};\n\n// src/lib/client.ts\nvar CommonClient = class extends EventEmitter {\n  address;\n  rpc_id;\n  queue;\n  options;\n  autoconnect;\n  ready;\n  reconnect;\n  reconnect_timer_id;\n  reconnect_interval;\n  max_reconnects;\n  rest_options;\n  current_reconnects;\n  generate_request_id;\n  socket;\n  webSocketFactory;\n  dataPack;\n  /**\n  * Instantiate a Client class.\n  * @constructor\n  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n  * @param {String} address - url to a websocket server\n  * @param {Object} options - ws options object with reconnect parameters\n  * @param {Function} generate_request_id - custom generation request Id\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {CommonClient}\n  */\n  constructor(webSocketFactory, address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5,\n    ...rest_options\n  } = {}, generate_request_id, dataPack) {\n    super();\n    this.webSocketFactory = webSocketFactory;\n    this.queue = {};\n    this.rpc_id = 0;\n    this.address = address;\n    this.autoconnect = autoconnect;\n    this.ready = false;\n    this.reconnect = reconnect;\n    this.reconnect_timer_id = void 0;\n    this.reconnect_interval = reconnect_interval;\n    this.max_reconnects = max_reconnects;\n    this.rest_options = rest_options;\n    this.current_reconnects = 0;\n    this.generate_request_id = generate_request_id || (() => typeof this.rpc_id === \"number\" ? ++this.rpc_id : Number(this.rpc_id) + 1);\n    if (!dataPack) this.dataPack = new DefaultDataPack();\n    else this.dataPack = dataPack;\n    if (this.autoconnect)\n      this._connect(this.address, {\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects,\n        ...this.rest_options\n      });\n  }\n  /**\n  * Connects to a defined server if not connected already.\n  * @method\n  * @return {Undefined}\n  */\n  connect() {\n    if (this.socket) return;\n    this._connect(this.address, {\n      autoconnect: this.autoconnect,\n      reconnect: this.reconnect,\n      reconnect_interval: this.reconnect_interval,\n      max_reconnects: this.max_reconnects,\n      ...this.rest_options\n    });\n  }\n  /**\n  * Calls a registered RPC method on server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object|Array} params - optional method parameters\n  * @param {Number} timeout - RPC reply timeout value\n  * @param {Object} ws_opts - options passed to ws\n  * @return {Promise}\n  */\n  call(method, params, timeout, ws_opts) {\n    if (!ws_opts && \"object\" === typeof timeout) {\n      ws_opts = timeout;\n      timeout = null;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const rpc_id = this.generate_request_id(method, params);\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params: params || void 0,\n        id: rpc_id\n      };\n      this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {\n        if (error) return reject(error);\n        this.queue[rpc_id] = { promise: [resolve, reject] };\n        if (timeout) {\n          this.queue[rpc_id].timeout = setTimeout(() => {\n            delete this.queue[rpc_id];\n            reject(new Error(\"reply timeout\"));\n          }, timeout);\n        }\n      });\n    });\n  }\n  /**\n  * Logins with the other side of the connection.\n  * @method\n  * @param {Object} params - Login credentials object\n  * @return {Promise}\n  */\n  async login(params) {\n    const resp = await this.call(\"rpc.login\", params);\n    if (!resp) throw new Error(\"authentication failed\");\n    return resp;\n  }\n  /**\n  * Fetches a list of client's methods registered on server.\n  * @method\n  * @return {Array}\n  */\n  async listMethods() {\n    return await this.call(\"__listMethods\");\n  }\n  /**\n  * Sends a JSON-RPC 2.0 notification to server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object} params - optional method parameters\n  * @return {Promise}\n  */\n  notify(method, params) {\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params\n      };\n      this.socket.send(this.dataPack.encode(message), (error) => {\n        if (error) return reject(error);\n        resolve();\n      });\n    });\n  }\n  /**\n  * Subscribes for a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async subscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.on\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\n        \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n      );\n    return result;\n  }\n  /**\n  * Unsubscribes from a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async unsubscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.off\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\"Failed unsubscribing from an event with: \" + result);\n    return result;\n  }\n  /**\n  * Closes a WebSocket connection gracefully.\n  * @method\n  * @param {Number} code - socket close code\n  * @param {String} data - optional data to be sent before closing\n  * @return {Undefined}\n  */\n  close(code, data) {\n    this.socket.close(code || 1e3, data);\n  }\n  /**\n  * Enable / disable automatic reconnection.\n  * @method\n  * @param {Boolean} reconnect - enable / disable reconnection\n  * @return {Undefined}\n  */\n  setAutoReconnect(reconnect) {\n    this.reconnect = reconnect;\n  }\n  /**\n  * Set the interval between reconnection attempts.\n  * @method\n  * @param {Number} interval - reconnection interval in milliseconds\n  * @return {Undefined}\n  */\n  setReconnectInterval(interval) {\n    this.reconnect_interval = interval;\n  }\n  /**\n  * Set the maximum number of reconnection attempts.\n  * @method\n  * @param {Number} max_reconnects - maximum reconnection attempts\n  * @return {Undefined}\n  */\n  setMaxReconnects(max_reconnects) {\n    this.max_reconnects = max_reconnects;\n  }\n  /**\n  * Connection/Message handler.\n  * @method\n  * @private\n  * @param {String} address - WebSocket API address\n  * @param {Object} options - ws options object\n  * @return {Undefined}\n  */\n  _connect(address, options) {\n    clearTimeout(this.reconnect_timer_id);\n    this.socket = this.webSocketFactory(address, options);\n    this.socket.addEventListener(\"open\", () => {\n      this.ready = true;\n      this.emit(\"open\");\n      this.current_reconnects = 0;\n    });\n    this.socket.addEventListener(\"message\", ({ data: message }) => {\n      if (message instanceof ArrayBuffer)\n        message = Buffer.from(message).toString();\n      try {\n        message = this.dataPack.decode(message);\n      } catch (error) {\n        return;\n      }\n      if (message.notification && this.listeners(message.notification).length) {\n        if (!Object.keys(message.params).length)\n          return this.emit(message.notification);\n        const args = [message.notification];\n        if (message.params.constructor === Object) args.push(message.params);\n        else\n          for (let i = 0; i < message.params.length; i++)\n            args.push(message.params[i]);\n        return Promise.resolve().then(() => {\n          this.emit.apply(this, args);\n        });\n      }\n      if (!this.queue[message.id]) {\n        if (message.method) {\n          return Promise.resolve().then(() => {\n            this.emit(message.method, message?.params);\n          });\n        }\n        return;\n      }\n      if (\"error\" in message === \"result\" in message)\n        this.queue[message.id].promise[1](\n          new Error(\n            'Server response malformed. Response must include either \"result\" or \"error\", but not both.'\n          )\n        );\n      if (this.queue[message.id].timeout)\n        clearTimeout(this.queue[message.id].timeout);\n      if (message.error) this.queue[message.id].promise[1](message.error);\n      else this.queue[message.id].promise[0](message.result);\n      delete this.queue[message.id];\n    });\n    this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error));\n    this.socket.addEventListener(\"close\", ({ code, reason }) => {\n      if (this.ready)\n        setTimeout(() => this.emit(\"close\", code, reason), 0);\n      this.ready = false;\n      this.socket = void 0;\n      if (code === 1e3) return;\n      this.current_reconnects++;\n      if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0))\n        this.reconnect_timer_id = setTimeout(\n          () => this._connect(address, options),\n          this.reconnect_interval\n        );\n    });\n  }\n};\n\n// src/index.browser.ts\nvar Client = class extends CommonClient {\n  constructor(address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5\n  } = {}, generate_request_id) {\n    super(\n      WebSocket,\n      address,\n      {\n        autoconnect,\n        reconnect,\n        reconnect_interval,\n        max_reconnects\n      },\n      generate_request_id\n    );\n  }\n};\n\nexport { Client, CommonClient, DefaultDataPack, WebSocket };\n//# sourceMappingURL=out.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}