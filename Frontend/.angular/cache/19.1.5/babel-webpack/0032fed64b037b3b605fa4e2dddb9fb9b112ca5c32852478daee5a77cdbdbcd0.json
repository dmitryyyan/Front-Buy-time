{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./connect-wallet.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./connect-wallet.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { TonConnect } from '@tonconnect/sdk';\nlet ConnectWalletComponent = class ConnectWalletComponent {\n  http;\n  userData = null;\n  walletAddress = null;\n  userId = '123';\n  chatId = null;\n  tonConnect = new TonConnect({\n    manifestUrl: 'https://dmitryyyan.github.io/ton-wallet-manifest/tonconnect-manifest.json'\n  });\n  constructor(http) {\n    this.http = http;\n  }\n  ngOnInit() {\n    this.fetchChatId();\n    // Підписка на події через .on (не .subscribe)\n    this.tonConnect.on('connect', wallet => {\n      console.log('Wallet connected:', wallet);\n      this.walletAddress = wallet.account.address;\n      this.saveWalletAddress();\n    });\n    this.tonConnect.on('disconnect', () => {\n      console.log('Wallet disconnected');\n      this.walletAddress = null;\n    });\n  }\n  fetchChatId() {\n    this.http.get('http://localhost:3000/api/getCurrentChatId').subscribe(response => {\n      this.chatId = response.chatId;\n      this.fetchUserData();\n    }, error => {\n      console.error('Error fetching chat ID', error);\n    });\n  }\n  fetchUserData() {\n    if (!this.chatId) {\n      console.error('Chat ID is not defined');\n      return;\n    }\n    this.http.get(`http://localhost:5258/api/user/get-by-chat-id?chatId=${this.chatId}`).subscribe(data => {\n      this.userId = data.id;\n      this.userData = data;\n    }, error => {\n      console.error('Error fetching user data', error);\n    });\n  }\n  connectWallet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const tonkeeperWalletSource = {\n        universalLink: 'https://app.tonkeeper.com/tonconnect',\n        bridgeUrl: 'https://bridge.tonapi.io/bridge',\n        jsBridgeKey: 'tonkeeper'\n      };\n      try {\n        yield _this.tonConnect.connect(tonkeeperWalletSource);\n        // Подія 'connect' автоматично оновить walletAddress\n      } catch (error) {\n        console.error('Error connecting wallet:', error);\n        alert('Не вдалося підключити гаманець');\n      }\n    })();\n  }\n  saveWalletAddress() {\n    if (!this.walletAddress) {\n      alert('Гаманець не підключено.');\n      return;\n    }\n    const apiUrl = 'http://localhost:5258/api/wallet/set-by-user-id';\n    const payload = {\n      userId: this.userId,\n      walletType: 'TonWallet',\n      walletAddress: this.walletAddress\n    };\n    this.http.post(apiUrl, payload).subscribe({\n      next: response => {\n        console.log('Гаманець успішно збережено:', response);\n        alert('Гаманець успішно збережено!');\n      },\n      error: error => {\n        console.error('Помилка збереження гаманця:', error);\n        alert('Помилка збереження гаманця.');\n      }\n    });\n  }\n  static ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nConnectWalletComponent = __decorate([Component({\n  selector: 'app-connect-wallet',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ConnectWalletComponent);\nexport { ConnectWalletComponent };","map":{"version":3,"names":["Component","HttpClient","TonConnect","ConnectWalletComponent","http","userData","walletAddress","userId","chatId","tonConnect","manifestUrl","constructor","ngOnInit","fetchChatId","on","wallet","console","log","account","address","saveWalletAddress","get","subscribe","response","fetchUserData","error","data","id","connectWallet","_this","_asyncToGenerator","tonkeeperWalletSource","universalLink","bridgeUrl","jsBridgeKey","connect","alert","apiUrl","payload","walletType","post","next","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\user\\Desktop\\Front\\buy-time\\Frontend\\src\\app\\pages\\connect-wallet\\connect-wallet.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TonConnect, Wallet } from '@tonconnect/sdk';\r\n\r\ninterface UserData {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  telegramChatId: string;\r\n  isTeacher: boolean;\r\n  teacherNickname: string;\r\n  description: string;\r\n  rating: number;\r\n  tags: string;\r\n  message?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-connect-wallet',\r\n  templateUrl: './connect-wallet.component.html',\r\n  styleUrls: ['./connect-wallet.component.css']\r\n})\r\nexport class ConnectWalletComponent implements OnInit {\r\n  userData: UserData | null = null;\r\n  walletAddress: string | null = null;\r\n  userId: string = '123';\r\n  chatId: string | null = null;\r\n\r\n  tonConnect = new TonConnect({\r\n    manifestUrl: 'https://dmitryyyan.github.io/ton-wallet-manifest/tonconnect-manifest.json'\r\n  });\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnInit(): void {\r\n    this.fetchChatId();\r\n\r\n    // Підписка на події через .on (не .subscribe)\r\n    this.tonConnect.on('connect', (wallet: Wallet) => {\r\n      console.log('Wallet connected:', wallet);\r\n      this.walletAddress = wallet.account.address;\r\n      this.saveWalletAddress();\r\n    });\r\n\r\n    this.tonConnect.on('disconnect', () => {\r\n      console.log('Wallet disconnected');\r\n      this.walletAddress = null;\r\n    });\r\n  }\r\n\r\n  fetchChatId(): void {\r\n    this.http.get<{ chatId: string }>('http://localhost:3000/api/getCurrentChatId').subscribe(\r\n      response => {\r\n        this.chatId = response.chatId;\r\n        this.fetchUserData();\r\n      },\r\n      error => {\r\n        console.error('Error fetching chat ID', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  fetchUserData(): void {\r\n    if (!this.chatId) {\r\n      console.error('Chat ID is not defined');\r\n      return;\r\n    }\r\n    this.http.get<UserData>(`http://localhost:5258/api/user/get-by-chat-id?chatId=${this.chatId}`).subscribe(\r\n      data => {\r\n        this.userId = data.id;\r\n        this.userData = data;\r\n      },\r\n      error => {\r\n        console.error('Error fetching user data', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async connectWallet() {\r\n    const tonkeeperWalletSource = {\r\n      universalLink: 'https://app.tonkeeper.com/tonconnect',\r\n      bridgeUrl: 'https://bridge.tonapi.io/bridge',\r\n      jsBridgeKey: 'tonkeeper'\r\n    };\r\n\r\n    try {\r\n      await this.tonConnect.connect(tonkeeperWalletSource);\r\n      // Подія 'connect' автоматично оновить walletAddress\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      alert('Не вдалося підключити гаманець');\r\n    }\r\n  }\r\n\r\n  saveWalletAddress() {\r\n    if (!this.walletAddress) {\r\n      alert('Гаманець не підключено.');\r\n      return;\r\n    }\r\n\r\n    const apiUrl = 'http://localhost:5258/api/wallet/set-by-user-id';\r\n    const payload = {\r\n      userId: this.userId,\r\n      walletType: 'TonWallet',\r\n      walletAddress: this.walletAddress,\r\n    };\r\n\r\n    this.http.post(apiUrl, payload).subscribe({\r\n      next: (response) => {\r\n        console.log('Гаманець успішно збережено:', response);\r\n        alert('Гаманець успішно збережено!');\r\n      },\r\n      error: (error) => {\r\n        console.error('Помилка збереження гаманця:', error);\r\n        alert('Помилка збереження гаманця.');\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}