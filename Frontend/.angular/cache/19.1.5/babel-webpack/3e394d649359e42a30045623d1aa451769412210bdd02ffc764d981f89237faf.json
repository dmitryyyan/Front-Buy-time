{"ast":null,"code":"/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE } from \"./abstract/utils.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3),\n    _6n = BigInt(6),\n    _11n = BigInt(11),\n    _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23),\n    _44n = BigInt(44),\n    _88n = BigInt(88);\n  const b2 = y * y * y % P; // x^3, 11\n  const b3 = b2 * b2 * y % P; // x^7\n  const b6 = pow2(b3, _3n, P) * b3 % P;\n  const b9 = pow2(b6, _3n, P) * b3 % P;\n  const b11 = pow2(b9, _2n, P) * b2 % P;\n  const b22 = pow2(b11, _11n, P) * b11 % P;\n  const b44 = pow2(b22, _22n, P) * b22 % P;\n  const b88 = pow2(b44, _44n, P) * b44 % P;\n  const b176 = pow2(b88, _88n, P) * b88 % P;\n  const b220 = pow2(b176, _44n, P) * b44 % P;\n  const b223 = pow2(b220, _3n, P) * b3 % P;\n  const t1 = pow2(b223, _23n, P) * b22 % P;\n  const t2 = pow2(t1, _6n, P) * b2 % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, {\n  sqrt: sqrtMod\n});\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n  a: BigInt(0),\n  b: BigInt(7),\n  Fp: Fpk1,\n  n: secp256k1N,\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  h: BigInt(1),\n  lowS: true,\n  // Allow only low-S signatures by default in sign() and verify()\n  endo: {\n    // Endomorphism, see above\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar: k => {\n      const n = secp256k1N;\n      const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n      const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n      const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n      const b2 = a1;\n      const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n      const c1 = divNearest(b2 * k, n);\n      const c2 = divNearest(-b1 * k, n);\n      let k1 = mod(k - c1 * a1 - c2 * a2, n);\n      let k2 = mod(-c1 * b1 - c2 * b2, n);\n      const k1neg = k1 > POW_2_128;\n      const k2neg = k2 > POW_2_128;\n      if (k1neg) k1 = n - k1;\n      if (k2neg) k2 = n - k2;\n      if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalar: Endomorphism failed, k=' + k);\n      }\n      return {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      };\n    }\n  }\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = point => point.toRawBytes(true).slice(1);\nconst numTo32b = n => numberToBytesBE(n, 32);\nconst modP = x => mod(x, secp256k1P);\nconst modN = x => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return {\n    scalar: scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n  const m = ensureBytes('message', message);\n  const {\n    bytes: px,\n    scalar: d\n  } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const {\n    bytes: rx,\n    scalar: k\n  } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */(() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod\n  }\n}))();\nconst isoMap = /* @__PURE__ */(() => isogenyMap(Fpk1, [\n// xNum\n['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n// xDen\n['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n// yDen\n['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */(() => mapToCurveSimpleSWU(Fpk1, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fpk1.create(BigInt('-11'))\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */(() => createHasher(secp256k1.ProjectivePoint, scalars => {\n  const {\n    x,\n    y\n  } = mapSWU(Fpk1.create(scalars[0]));\n  return isoMap(x, y);\n}, {\n  DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n  p: Fpk1.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256\n}))();\nexport const hashToCurve = /* @__PURE__ */(() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */(() => secp256k1_hasher.encodeToCurve)();","map":{"version":3,"names":["sha256","randomBytes","createCurve","createHasher","isogenyMap","Field","mod","pow2","aInRange","bytesToNumberBE","concatBytes","ensureBytes","inRange","numberToBytesBE","mapToCurveSimpleSWU","secp256k1P","BigInt","secp256k1N","_1n","_2n","divNearest","a","b","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fpk1","eql","sqr","Error","undefined","sqrt","secp256k1","Fp","n","Gx","Gy","h","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","k2","k1neg","k2neg","_0n","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","Uint8Array","from","c","charCodeAt","pointToBytes","point","toRawBytes","slice","numTo32b","modP","x","modN","Point","ProjectivePoint","GmulAdd","Q","BASE","multiplyAndAddUnsafe","schnorrGetExtPubKey","priv","d_","utils","normPrivateKeyToScalar","p","fromPrivateKey","scalar","hasEvenY","bytes","lift_x","xx","assertValidity","num","challenge","args","schnorrGetPublicKey","privateKey","schnorrSign","message","auxRand","m","px","d","t","rand","k_","rx","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","toAffine","error","schnorr","getPublicKey","sign","verify","randomPrivateKey","isoMap","map","i","j","mapSWU","A","B","Z","create","secp256k1_hasher","scalars","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["C:/Users/user/Desktop/Front/buy-time/Frontend/node_modules/@noble/curves/esm/secp256k1.js"],"sourcesContent":["/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap } from \"./abstract/hash-to-curve.js\";\nimport { Field, mod, pow2 } from \"./abstract/modular.js\";\nimport { aInRange, bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, } from \"./abstract/utils.js\";\nimport { mapToCurveSimpleSWU } from \"./abstract/weierstrass.js\";\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1P))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1N))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}